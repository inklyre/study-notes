{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#topics-covered","title":"Topics Covered","text":"<ul> <li>System Commands</li> <li>Python Data structures and Algorithms</li> </ul> <p>**Its a work still in progress. If you\u2019re interested you contribute via github.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/09/21/hello-world/","title":"Hello world","text":"<p>This is the first Blog post on this site. Today I\u2019ve finished adding the baseline features, suitable for reading. I\u2019ll update you with new features and content updates on this section. If you need any new feature on this site, surely comment down below. Bye!</p>"},{"location":"contribute/","title":"How to Contribute","text":""},{"location":"contribute/#how-to-contribute-to-improve-these-notes","title":"How to contribute to improve these notes?","text":"<p>For contributing, It\u2019ll be recommended for you to learn two things.</p> <ul> <li>Markdown</li> <li>Basics of Git and Github usage </li> </ul> <p>Markdown is a quite simple markup language, which you can get started using within 1 hour of learning. Its simpler than you\u2019d expect.</p> <p>Git is a version control system, quite oftenly used in development work. Its very useful for any type of file based collaborative work. Github is a medium through which the functionality of git is extended via the web. We\u2019ll use Git and Github for writing notes, since this notes project is meant to be a collaborative project. Git and Github are something you\u2019ll find inevitebly useful when working on development.</p>"},{"location":"credits/","title":"Credits","text":"<p>Isaac Newton</p> <p>If I have seen further it is by standing on the shoulders of Giants</p> <p>Here is the list of people/repositories/organisations/programmes whom I specially thank for their work or inspiration</p> <ul> <li>IIT Madras BS degree - Data Science and Applications - I\u2019m a student of this programme. So there must not be the need to explain my thankfullness.</li> <li>The site is created using Material theme for MkDocs</li> <li>Comment system by Giscus based on Github Discussions</li> <li>Notes section of System commands page is almost completely because of cheriangeorge/System-Commands-course</li> </ul>"},{"location":"system-commands/MOOCs/","title":"Free MOOCs","text":"<p>MIT\u2019s Missing Semester - Github</p>"},{"location":"system-commands/about/","title":"Why Learn System Commands?","text":"<p>Learning this will be helpful.</p>"},{"location":"system-commands/notes/Week-1/","title":"Getting Started","text":"<p>In this section we cover the following topics</p> <ul> <li>Introduction to GNU/Linux OS. Setting up and running Linux environment. </li> <li>The command line environment. Knowing hardware of your machine Information - commands such as hwinfo, lshw, df, free etc. </li> <li>Diagnostics - commands to fetch hardware information such as battery state, memory modules etc., Knowing the OS and software of your machine Commands to get details about operating system, versions etc. </li> <li>Packages - installed / available Input / output redirection.</li> </ul>"},{"location":"system-commands/notes/Week-1/#launching-a-gnu-linux-os-using-virtual-machine","title":"Launching a GNU-Linux OS using Virtual Machine","text":""},{"location":"system-commands/notes/Week-1/#requirements","title":"Requirements","text":"<ul> <li>ISO image of the GNU-Linux OS.</li> </ul> <p>Ubuntu 20.04 LTS for x86_64 platform or Ubuntu 22.04 LTS for x86_64 platform</p> <ul> <li> <p>Hosted Hypervisor</p> <ul> <li>Virtualization helps to run different operating systems using same physical resources.</li> <li>Hypervisor is a software which makes virtualization possible.</li> <li>If your machine does not support dual boot, you may need a hosted hypervisor to run the GNU-Linux operating system. </li> <li>Hosted hypervisors runs within another operating system known as host operating system. The operating system installed within hypervisor is called guest operating system.</li> <li>e.g.<ul> <li>Oracle VM VirtualBox</li> <li>VMware Workstation Player</li> </ul> </li> </ul> </li> <li> <p>Adequate space on hard disk. (20 GB - 50 GB, depending on requirement.)</p> </li> </ul>"},{"location":"system-commands/notes/Week-1/#steps","title":"Steps","text":"<ul> <li>Download Ubuntu ISO file. </li> <li>Download hypervisor.</li> <li>Install the hypervisor</li> <li>Launch the hypervisor and configure a virtual machine.</li> <li>Launch the virtual machine.</li> </ul>"},{"location":"system-commands/notes/Week-1/#launching-a-gnulinux-os-using-wsl-windows-subsystem-for-linux","title":"Launching a GNU/Linux OS using WSL (Windows Subsystem for Linux).","text":"<ul> <li>Run powershell as an administrator.</li> <li>Run command <code>wsl --install</code></li> <li>Reboot the machine.</li> </ul>"},{"location":"system-commands/notes/Week-1/#other-command-line-environments","title":"Other command line environments.","text":""},{"location":"system-commands/notes/Week-1/#on-cloud","title":"On Cloud","text":"<ul> <li>https://replit.com/</li> <li>https://cocalc.com/</li> </ul>"},{"location":"system-commands/notes/Week-1/#on-phone","title":"On Phone","text":"<ul> <li>Termux app from Fredrick Fornwall <ul> <li>GitHub</li> <li>F-Droid (Direct link. No need to download F-Droid)</li> <li>Google Play Store (deprecated)</li> </ul> </li> </ul> <p>Now we are ready! Let\u2019s dive into terminal to be <code>su</code>! :)</p>"},{"location":"system-commands/notes/Week-1/#command-line-environment","title":"Command line environment","text":""},{"location":"system-commands/notes/Week-1/#terminal-emulators","title":"Terminal emulators","text":"<ul> <li>GNOME Terminal - Default terminal for GNOME</li> <li>Terminal - Default terminal for macOS</li> <li>GNU Screen - Terminal multiplexer</li> <li>guake - Drop down terminal for GNOME</li> <li>konsole - Default terminal for KDE</li> <li>xfce4-terminal - Default terminal for Xfce</li> <li>xterm - Standard terminal for X11</li> <li>Termux - Terminal emulator for Android</li> </ul>"},{"location":"system-commands/notes/Week-1/#command-prompt","title":"Command Prompt","text":"<pre><code>username@hostname:~$ \n</code></pre> <p><code>~</code> : Symbolic representation for home directory. This is working directory. Terminal opens this directory after launch. </p> <p><code>@</code>,  <code>:</code>, and <code>$</code> : command prompt decorators.</p> <p>A command prompt can be empty.</p>"},{"location":"system-commands/notes/Week-1/#simple-commands-overview","title":"Simple Commands Overview","text":"<code>Command</code> Description <code>pwd Prints path of current/working directory. <code>ls</code> Lists the files and directories. <code>wildcards <code>?</code> matches single character. <code>*</code> matches 0 or more characters. <code>cd</code> Change the working directory. <code>man</code> See the mannual page for a command. <code>uname</code> Print the operating system name. <code>ps</code> The users currently running processes. <code>mkdir</code> Create directory or directories <code>chmod</code> Change permissions. <code>touch</code> Create a file / modify timestamp. <code>cp</code> Copy file(s) <code>mv</code> Move file(s) / rename a file. <code>rm</code> Remove a file. <code>alias</code> Create alias for a command. <code>whoami</code> Print current user name. <code>less</code> View files page by page. <code>date</code> Utility for date and time <code>ncal</code> and <code>cal</code> Utility for calendar <code>free</code> Memory statistics. <code>groups</code> Groups to which user belongs. <code>file</code> What type of file it is? <code>clear</code> Clears the screen for whole session.  Not possible to navigate the screen by scrolling. <code>exit</code> Exit shell/shell script."},{"location":"system-commands/notes/Week-1/#syntax","title":"Syntax","text":"<p><code>root@localhost:~$ command [[options] [arguments]]</code></p>"},{"location":"system-commands/notes/Week-1/#pwd","title":"<code>pwd</code>","text":"<pre><code>~$ pwd\n/home/groot\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#ls","title":"<code>ls</code>","text":"<pre><code>~$ ls\nDesktop  Documents \n</code></pre> <ul> <li>Include hidden files while listing files. <code>.</code> is a prefix for hidden files.</li> <li><code>ls -a &lt;name&gt;</code></li> </ul> <pre><code>~$ ls -a\n.            .cache         Documents                                   \n..           .config        Desktop                                   \n</code></pre> <p><code>.</code> and <code>..</code> are special files</p> <ul> <li>Lists the files and directories in long listing format</li> <li><code>ls -l &lt;name&gt;</code></li> </ul> <pre><code>~$ ls -l\ndrwxrwxr-x 5 groot groot 21 Dec 12 18:52 Desktop  \ndrwxrwxr-x 2 groot groot  3 Nov 19 19:41 Downloads\n</code></pre> <ul> <li>Print the inode number. More on inode</li> <li><code>ls -i &lt;name&gt;</code></li> </ul> <pre><code>~$ ls -i ~\n260 Desktop \n268 Documents\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#long-listing-format","title":"Long Listing Format","text":"<ul> <li><code>drwxrwxrwx 5 groot groot 3488 Dec 15 10:57 Downloads</code><ul> <li><code>d</code> : file type, <code>d</code> for directory. More on file type</li> <li><code>rwxrwxrwx</code> : Owner, group and other permissions. More</li> <li><code>5</code> : number of hard links.</li> <li><code>groot</code> : Owner of the file.</li> <li><code>groot</code> : Group of the owner.</li> <li><code>3488</code> : Size of the file in Bytes.</li> <li><code>Dec 15 10:57</code> : Last modified timestamp for file (considered here as separate columns).</li> <li><code>Downloads</code> : file name.</li> <li>( <code>-&gt; /storage/shared/Documents/</code> ) : Optional column for symbolic links.</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-1/#file-types","title":"File Types","text":"<ul> <li><code>-</code> : Regular file</li> <li><code>d</code> : Directory / Folder</li> <li><code>l</code> : Symbolic link</li> <li><code>c</code> : Character file (e.g. terminal <code>tty</code>)</li> <li><code>b</code> : Block file (e.g. Hard Disk (<code>sda</code>))</li> <li><code>s</code> : Socket file</li> <li><code>p</code> : Named pipe</li> </ul>"},{"location":"system-commands/notes/Week-1/#file-permission-string","title":"File Permission String","text":"<ul> <li>It is a 9 character string, starting after file type.</li> <li>Each character is switch to binary digit 0 or 1.</li> <li>Order : <code>r</code> - read (4), <code>w</code> - write (2), <code>x</code> - execute (1). Numbers in parenthesis are binary place values in decimal.</li> <li>Sum of bit values gives octal representations for permissions specific to user, group or other.</li> <li><code>w</code> : Permission required to create, modify or delete a file within a directory.</li> <li><code>x</code> : When set on directories, a user can search or change to them. </li> <li><code>-</code> : off</li> <li><code>?</code> : unknown</li> <li>e.g. <code>rwxrwx---</code> or <code>770</code><ul> <li>Owner permissions, character [1-3] (7)</li> <li>Group permissions, character [4-6] (7)</li> <li>Other permissions, character [7-9] (0)</li> </ul> </li> </ul> characters octal <code>---</code> 0 <code>--x</code> 1 <code>r--</code> 4 <code>r-x</code> 5 <code>rw-</code> 6 <code>rwx</code> 7 <p> back </p>"},{"location":"system-commands/notes/Week-1/#cd","title":"<code>cd</code>","text":"<p><code>cd &lt;dirname&gt;</code> * Without any argument or <code>~</code> as argument this command makes user\u2019s home directory as working directory.</p> <pre><code>~$ cd\n~$ cd ~\n~$ cd Desk*\n~/Desktop$  \n</code></pre> <ul> <li><code>-</code> is used to navigate to previous working directory if <code>OLDPWD</code> environment variable is set.</li> </ul> <pre><code>~$ cd -\nbash: cd: OLDPWD not set\n~$ cd /\n/$ cd -\n~$ \n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#man","title":"<code>man</code>","text":"<ul> <li>See man pages. Exit man page using <code>q</code>.</li> <li><code>man [option] command</code></li> <li>To see the man page for <code>ls</code>.</li> </ul> <pre><code>~$ man ls \n</code></pre> <ul> <li><code>man</code> takes numbers 1-9 as argument. These numbers denote section. </li> <li>To see the first section of <code>ls</code> command.<ul> <li><code>man section command</code></li> </ul> </li> </ul> <pre><code>~$ man 1 ls \n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#uname","title":"<code>uname</code>","text":"<ul> <li>Prints the operating system name.</li> </ul> <pre><code>~$ uname\nLinux\n</code></pre> <ul> <li>Print the system information.</li> </ul> <pre><code>~$ uname -a\nLinux rich-linux 5.15.0-56-generic #62-Ubuntu SMP Tue Nov 22 19:54:14 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#ps","title":"<code>ps</code>","text":"<ul> <li>List the processes by current user.</li> <li>Output is unsorted by default.</li> <li>It displays <ol> <li>the process ID (pid=PID)</li> <li>the terminal associated with the process (tname=TTY)</li> <li>the cumulated CPU time in [DD-]hh:mm:ss format (time=TIME)</li> <li>the executable name (ucmd=CMD).  - With options, other important columns include.</li> <li>User id (UID)</li> <li>Parent process ID</li> </ol> </li> </ul> <pre><code>~$ ps\n    PID TTY          TIME CMD\n   4172 pts/0    00:00:00 bash\n   4567 pts/0    00:00:00 ps\n</code></pre> <code>command</code> options Description <code>ps</code> The user\u2019s currently running processes <code>ps</code> <code>--forest</code> Pictorial view of which process launched which process <code>ps</code> <code>-f</code> Full listing of the user\u2019s currently running processes <code>ps</code> <code>-e</code> Listing of all processes, except kernel processes <code>ps</code> <code>-ef</code> Full listing of all processes, except kernel processes <code>ps</code> <code>-A</code> All processes, including kernel processes <code>ps</code> <code>auxw</code> Wide listing sorted by percentage of CPU usage, %CPU <p>back</p>"},{"location":"system-commands/notes/Week-1/#mkdir","title":"<code>mkdir</code>","text":"<ul> <li><code>mkdir &lt;dirname ...&gt;</code> : Create a directory/ directories.</li> </ul> <pre><code>~$ mkdir level1 level2\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#chmod","title":"<code>chmod</code>","text":"<ul> <li>Change permissions of a file ( only owners of a file can change permissions. )</li> <li><code>chmod MODE &lt;file-name&gt;</code></li> <li>MODE : [ugoa][+-=][perm]</li> <li>Multiple MODE can be separated by comma.</li> <li>Characters controlling which users\u2019 access to be changed <ul> <li><code>u</code> user, <code>g</code> group , <code>o</code> other and <code>a</code> all</li> </ul> </li> <li><code>+</code> : file mode bits are added to existing file mode bits.</li> <li><code>-</code> : file mode bits are removed from existing file mode bits. If used as <code>-[ugoa]</code>, removes all permissions for <code>u</code>, <code>g</code>, <code>o</code> or <code>a</code>.</li> <li><code>=</code> : only specified file mode bits are kept, all other bits are removed.</li> <li>Add <code>rw</code> permissions on file <code>hello.txt</code> for all. </li> </ul> <pre><code>~$ chmod a+rw hello.txt\n</code></pre> <ul> <li>Remove <code>w</code> permission on file <code>hello.txt</code> for users within group and other users.</li> </ul> <pre><code>~$ chmod go-w hello.txt\n</code></pre> <ul> <li>Remove all permissions on file <code>hello.txt</code> for others.</li> </ul> <pre><code>~$ chmod -o hello.txt\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#touch","title":"<code>touch</code>","text":"<ul> <li>Changes modified timestamp if the file exits.</li> <li>otherwise creates a new file.</li> <li><code>touch &lt;filename&gt;</code></li> <li>Create file <code>hello.py</code></li> </ul> <pre><code>~$ touch hello.py\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#cp","title":"<code>cp</code>","text":"<ul> <li>Create a copy of a file</li> <li><code>cp &lt;source&gt; &lt;destination&gt;</code> : Copy a source file to destination file.</li> <li>Make a copy of <code>hello.py</code> as <code>greeting.py</code>.</li> </ul> <pre><code>~$ cp hello.py greet.py\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#mv","title":"<code>mv</code>","text":"<ul> <li>Rename or move a file.</li> <li><code>mv &lt;source&gt; &lt;destination&gt;</code> : Move a file from source to destination. </li> <li><code>mv &lt;old name&gt; &lt;new name&gt;</code> : Rename a file</li> <li>Moving file <code>hello.py</code> to directory <code>level1</code>.</li> </ul> <pre><code>~$ mv hello.py level1\n</code></pre> <ul> <li>Rename <code>greet.py</code> as <code>greetings.py</code></li> </ul> <pre><code>~$ mv greet.py greetings.txt\n</code></pre> <ul> <li><code>\"file name\"</code> Using space in file name.</li> </ul> <pre><code>~$ mv level1 \"level 1\"\n</code></pre> <ul> <li>To refer to <code>'level 1'</code> use quotes around it.</li> </ul> <p>back</p>"},{"location":"system-commands/notes/Week-1/#rm","title":"<code>rm</code>","text":"<ul> <li><code>rm  &lt;file&gt;</code> : Remove file or files.</li> <li>Remove <code>greetings.txt</code></li> </ul> <pre><code>~$ rm greetings.txt\n</code></pre> <ul> <li><code>rm -r &lt;file&gt;</code> : Delete a directory and it\u2019s contents recursively (<code>-r</code>).</li> <li>Delete directory <code>'level 1'</code>.</li> </ul> <pre><code>~$ rm -r \"level 1\"\n</code></pre> <ul> <li><code>rm -i &lt;file&gt;</code> : Ask before deletion. Interactive (<code>-i</code>). ((y/\u2019\u2018) - yes, n - no)</li> </ul> <pre><code>~$ rm -ir level2\nrm: remove directory 'level2'? n\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#alias","title":"<code>alias</code>","text":"<ul> <li><code>alias</code> : List all <code>alias</code>ed commands. More on <code>alias</code></li> <li><code>alias command=\"aliasing command\"</code> : Add an alias for <code>command</code> command.</li> <li>Add <code>alias</code> for <code>rm -i</code> as <code>rm</code> command. </li> </ul> <pre><code>~$ alias rm=\"rm -i\"\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#whoami","title":"<code>whoami</code>","text":"<ul> <li>Prints name of the current user.</li> </ul> <pre><code>~$ whoami\ngroot\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#less","title":"<code>less</code>","text":"<ul> <li><code>less &lt;filename&gt;</code> : open file for reading.</li> <li>Possible to <code>scroll</code> <code>up</code> or <code>down</code> through pages.</li> <li>To read a log file do</li> </ul> <pre><code>~$ less /var/log/alternatives.log\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#date","title":"<code>date</code>","text":"<ul> <li><code>date [option]... [+FORMAT]</code> : Current date and time.</li> <li>option <code>-R</code> : date and time RFC5322 standard format, used in email communications.</li> </ul> <pre><code>~$ date\nSaturday 17 December 2022 01:58:49 PM EET\n~$ date -R\nSat, 17 Dec 2022 13:59:05 +0200\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#ncal-and-cal","title":"<code>ncal</code> and <code>cal</code>","text":"<ul> <li><code>ncal [month] [year]</code> : Displays calendar of current month by default.</li> <li>Both belong to the same gnu utility <code>ncal</code>, orientation is the only difference.</li> <li><code>month</code> in long, short text (case-insensitive) or number (1-12, works only when year is specified.) format.</li> <li><code>year</code> in <code>YY</code> or <code>YYYY</code> format.</li> <li>Display calendar for November, 2022</li> </ul> <pre><code>~$ cal nov 2022\n   November 2022      \nSu Mo Tu We Th Fr Sa  \n       1  2  3  4  5  \n 6  7  8  9 10 11 12  \n13 14 15 16 17 18 19  \n20 21 22 23 24 25 26  \n27 28 29 30 \n</code></pre> <ul> <li>or</li> </ul> <pre><code>~$ ncal nov 2022\n    November 2022     \nSu     6 13 20 27   \nMo     7 14 21 28   \nTu  1  8 15 22 29   \nWe  2  9 16 23 30   \nTh  3 10 17 24      \nFr  4 11 18 25      \nSa  5 12 19 26\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#free","title":"<code>free</code>","text":"<ul> <li><code>free [option]</code> : Displays memory information (memory and swap).</li> <li>System utilizes swap memory when it runs out of memory (RAM).</li> <li>Swap memory is part of hard disk.</li> <li>option <code>-h</code> : human readable (typically Gi).</li> </ul> <pre><code>~$ free -h\n               total        used        free      shared  buff/cache   available\nMem:           1.9Gi       1.5Gi       101Mi       2.0Mi       279Mi       227Mi\nSwap:          1.4Gi        50Mi       1.3Gi\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#groups","title":"<code>groups</code>","text":"<ul> <li><code>groups</code> : Prints the group to which the current user belongs.</li> <li>Group with the name of current user is also created for privacy.</li> </ul> <pre><code>~$ groups\ngroot sudo\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#file","title":"<code>file</code>","text":"<ul> <li><code>file &lt;filename&gt;</code> : Prints the type of file.</li> <li>Checking file type of <code>znew</code></li> </ul> <pre><code>~$ file /usr/bin/znew\n/usr/bin/znew: POSIX shell script, ASCII text executable\n</code></pre> <p>back</p>"},{"location":"system-commands/notes/Week-1/#hard-links","title":"Hard Links","text":"<ul> <li>inode number : An entry in the filesystem table about the location in the storage media.</li> <li>Hard Links : <ul> <li>Files with same inode number. </li> <li>Regular file has 1 hard link</li> <li>Second entry in long listing format<ul> <li>number of hard links present for that file. </li> </ul> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-1/#man-page-sections","title":"<code>man</code> page sections","text":"Section Type of pages 1 Executable programs of shell commands 2 System calls provided by kernel 3 Library calls 4 Special files usually found in <code>/dev</code> 5 File formats and conventions 6 Games 7 Miscellaneous: macro packages, conventions 8 System administration commands 9 Kernel routines <p>back</p>"},{"location":"system-commands/notes/Week-1/#filesystem-hierarchy-standard","title":"Filesystem Hierarchy Standard","text":"<ul> <li><code>/</code> is the root of the file system.</li> <li><code>/</code> is also the delimiter for sub-directories.</li> <li><code>.</code> is current directory.</li> <li><code>..</code> is parent directory.</li> <li> <p>Path for traversal can be absolute or relative.</p> </li> <li> <p><code>/</code> : Root directory</p> </li> <li><code>/root</code>  : Superuser\u2019s home directory</li> <li><code>/home</code>  : User specific profiles home directory<ul> <li><code>/home/groot</code> : groot\u2019s home directory</li> </ul> </li> <li><code>/boot</code> : Static files of the boot loader</li> <li><code>/dev</code> : Device files (Every device is represented as file.)</li> <li><code>/etc</code> : Host specific system configuration.</li> <li><code>/lib</code> : Essential shared libraries and kernel modules</li> <li><code>/media</code> : Mount points for removable devices</li> <li><code>/mnt</code> : Mount points</li> <li><code>/opt</code> : Add on application software packages</li> <li><code>/run</code> : Data relevant to running processes</li> <li><code>/sbin</code> : Essential system binaries</li> <li><code>/srv</code> : Data for ftp/http services</li> <li><code>/tmp</code> : Temporary files</li> <li><code>/usr</code> : Secondary hierarchy<ul> <li><code>/usr/bin</code> : User commands</li> <li><code>/usr/lib</code> : Libraries</li> <li><code>/usr/local</code> : Local hierarchy</li> <li><code>/usr/sbin</code> : Non-vital system binaries</li> <li><code>/usr/share</code> Architecture dependent data</li> <li><code>/usr/include</code> Header files included by C programs</li> <li><code>/usr/src</code> : Source code</li> </ul> </li> <li><code>/var</code> : Variable data<ul> <li><code>/var/cache</code> : Application cache data</li> <li><code>/var/lib</code> : Variable state information</li> <li><code>/var/local</code> : Variable data for /usr/local</li> <li><code>/var/lock</code> : Lock files</li> <li><code>/var/log</code> : Log files and directories</li> <li><code>/var/run</code> : Data relevant to running processes</li> <li><code>/var/tmp</code> : Temporary files preserved between reboots</li> </ul> </li> </ul> <p>back</p> sharable unsharable static <code>/usr</code> <code>/opt</code> <code>/etc</code> <code>/boot</code> variable <code>/var/mail</code> <code>/var/run</code> <code>/var/lock</code>"},{"location":"system-commands/notes/Week-1/#important-keyboard-keys","title":"Important Keyboard Keys","text":"<code>keys</code> Description <code>ctrl + L</code> Clear screen. Possible to scroll up to view previous commands. <code>ctrl + D</code> Exit the shell/shell script/interactive command. <code>tab</code> Autocomplete the file names if unique, else show multiple possibilities. <code>q</code> quit man page, pages opened by commands like <code>less</code>"},{"location":"system-commands/notes/Week-1/#problems-for-practice","title":"Problems for Practice","text":""},{"location":"system-commands/notes/Week-2/","title":"Simple Commands","text":"<p>In this section We cover the following topics:</p> <ul> <li>Introduction to packages and repositories. Using \u2018apt\u2019 commands to manage packages. </li> <li>File types and related commands. Understanding file permissions and access modes. </li> <li>Managing file permissions through symbolic and numeric mode. </li> <li>Concept of environment variables. Important environment variables such as $HOME, $USER and $PATH</li> </ul> <p>The root folder <code>/</code> is the parent of it\u2019s own.</p> <pre><code>/$ cd ..\n/$\n</code></pre> <ul> <li>Multiple uses of <code>/</code> is as good as one.</li> </ul> <pre><code>~$ cd ///usr///bin\n/usr/bin$\n</code></pre>"},{"location":"system-commands/notes/Week-2/#more-on-ls","title":"More on <code>ls</code>","text":"<ul> <li>Interpretation of directory as an argument<ul> <li><code>ls -l level1</code> will long list all the files of directory <code>level1</code>.</li> </ul> </li> </ul> <pre><code>~$ ls -l level1\ntotal 2\n-rw-rw-r-- 1 sanr sanr 0 Dec 18 17:06 f1\n-rw-rw-r-- 1 sanr sanr 0 Dec 18 17:06 f2\n</code></pre> <ul> <li>Multiple options<ul> <li><code>ls -ld level1</code> will long list the directory itself (not it\u2019s content).</li> <li><code>ls -ldi level1</code> will long list the directory itself along with inode number (not it\u2019s content).</li> </ul> </li> </ul> <pre><code>~$ ls -ld level1\ndrwxrwxr-x 2 sanr sanr 4 Dec 18 17:06 level1\n~$ ls -ldi level1\n79564 drwxrwxr-x 2 sanr sanr 4 Dec 18 17:06 level1\n</code></pre> <ul> <li>Recursive listing<ul> <li><code>ls -R</code></li> </ul> </li> </ul> <pre><code>~$ ls -R level1\nlevel1:\nf1  f2\n</code></pre> <ul> <li>Order of options for <code>ls</code> is immarterial.<ul> <li>But the standard practice is <code>command options... argument...</code></li> </ul> </li> </ul> <pre><code>~$ ls -ld level1 -i\n79564 drwxrwxr-x 2 sanr sanr 4 Dec 18 17:06 level1\n~$ ls -li level1 -d\n79564 drwxrwxr-x 2 sanr sanr 4 Dec 18 17:06 level1\n~$ ls -di level1 -l\n79564 drwxrwxr-x 2 sanr sanr 4 Dec 18 17:06 level1\n~$ ls level1 -ldi\n79564 drwxrwxr-x 2 sanr sanr 4 Dec 18 17:06 level1\n</code></pre> <ul> <li>Short and long forms of options <ul> <li><code>ls -a</code> and <code>ls --all</code> are equivalent.</li> <li>Not all options have long form, eg. <code>-l</code> for <code>ls</code></li> </ul> </li> </ul> <pre><code>~$ ls -l --directory --inode level1\n79564 drwxrwxr-x 2 sanr sanr 4 Dec 18 17:06 level1\n</code></pre>"},{"location":"system-commands/notes/Week-2/#utilities-for-knowing-files-better","title":"Utilities for Knowing Files Better","text":""},{"location":"system-commands/notes/Week-2/#less","title":"<code>less</code>","text":""},{"location":"system-commands/notes/Week-2/#cat","title":"<code>cat</code>","text":"<ul> <li><code>cat &lt;filename&gt;</code> : Dumps the file output on screen for reading.</li> <li>Abbr. for concatenate.</li> <li>Navigation is difficult.</li> <li>To see the <code>profile</code> file content</li> </ul> <pre><code>/etc$ cat profile\n</code></pre>"},{"location":"system-commands/notes/Week-2/#more","title":"<code>more</code>","text":"<ul> <li><code>more &lt;filename&gt;</code> : Open file filename for reading page by page.</li> <li>It beautifully combines the features of <code>less</code> and <code>cat</code>.</li> <li>Can not scroll <code>down</code> to see content.</li> <li>Shows percentage of file read.</li> <li>To view the <code>profile</code> file content</li> </ul> <pre><code>/etc$ more profile\n</code></pre>"},{"location":"system-commands/notes/Week-2/#head","title":"<code>head</code>","text":"<ul> <li><code>head &lt;filename&gt;</code> : Print the first 10 lines of the file.</li> <li>Can also specify number of lines using <code>-n</code> option.</li> <li>To print first 5 lines.</li> </ul> <pre><code>/etc$ head -n 5 profile\n</code></pre>"},{"location":"system-commands/notes/Week-2/#tail","title":"<code>tail</code>","text":"<ul> <li><code>tail &lt;filename&gt;</code> : Print the last 10 lines of the file.</li> <li>Can also specify number of lines using <code>-n</code> option.</li> <li>To print last 5 lines.</li> </ul> <pre><code>/etc$ head -n 5 profile\n</code></pre>"},{"location":"system-commands/notes/Week-2/#wc","title":"<code>wc</code>","text":"<ul> <li><code>wc &lt;filename&gt;</code> - Print number of newline, word and byte for each file</li> <li>To print newline (<code>-l</code>), word (<code>w</code>) an byte (<code>-c</code>) count of <code>profile</code></li> </ul> <pre><code>/etc$ wc profile\n 27  97 582 profile\n</code></pre> <ul> <li>To print newline (<code>-l</code>) count of <code>profile</code></li> </ul> <pre><code>/etc$ wc -l profile\n 27 profile\n</code></pre>"},{"location":"system-commands/notes/Week-2/#knowing-more-commands","title":"Knowing More Commands","text":""},{"location":"system-commands/notes/Week-2/#man","title":"<code>man</code>","text":""},{"location":"system-commands/notes/Week-2/#which","title":"<code>which</code>","text":"<ul> <li><code>which  &lt;command&gt;</code> - Print the path of <code>command</code> or check if a package exists or not.</li> <li>To print path of commands <code>less</code> and <code>more</code> </li> </ul> <pre><code>/etc$ which less\n/usr/bin/less\n/etc$ which more\n/usr/bin/more\n</code></pre> <ul> <li>Actually the size of <code>less</code> is <code>more</code></li> </ul> <pre><code>/etc$ ls -l /usr/bin/less\n-rwxr-xr-x 1 root root 199048 Mar 24  2022 /usr/bin/less\n/etc$ ls -l /usr/bin/more\n-rwxr-xr-x 1 root root 43392 Feb 21  2022 /usr/bin/more\n</code></pre> <ul> <li>To print the path of command <code>which</code>!</li> </ul> <pre><code>/etc$ which which\n/usr/bin/which\n</code></pre> <ul> <li><code>which</code> is kind of reflexive!</li> </ul>"},{"location":"system-commands/notes/Week-2/#whatis","title":"<code>whatis</code>","text":"<ul> <li><code>whatis &lt;command&gt;</code> - Print brief description of <code>command</code> as the first line in <code>man</code> page</li> <li>To print the description of <code>which</code></li> </ul> <pre><code>/etc$ whatis which\nwhich (1)            - locate a command\n</code></pre>"},{"location":"system-commands/notes/Week-2/#apropos","title":"<code>apropos</code>","text":"<ul> <li><code>apropos &lt;command | word&gt;</code> - Search the manual page names and descriptions.</li> </ul> <pre><code>~$ apropos who\nw (1)                - Show who is logged on and what they are doing.\nwho (1)              - show who is logged on\nwhoami (1)           - print effective userid\n</code></pre> <ul> <li><code>apropos</code> is equivalent to <code>man -k</code> i.e <code>man -k who</code> will give the same result above as given by <code>apropos who</code></li> <li>As shown below, <code>apropos</code> is the symbolic link for <code>whatis</code>, but why the outputs are different?</li> </ul> <pre><code>~$ ls -l /usr/bin/apropos\nlrwxrwxrwx 1 root root 6 Nov  3 19:18 /usr/bin/apropos -&gt; whatis\n~$ ls -l /usr/bin/whatis\n-rwxr-xr-x 1 root root 48416 Mar 17  2022 /usr/bin/whatis\n</code></pre> <ul> <li>In GNU-Linux, every executable will know by which name it is invoked which results in different behaviour.</li> </ul>"},{"location":"system-commands/notes/Week-2/#help","title":"<code>help</code>","text":"<ul> <li>Print the help for currently running shell. More on shell</li> <li>It includes keywords, syntax for commands, loops and symbolic expressions.  </li> </ul>"},{"location":"system-commands/notes/Week-2/#info","title":"<code>info</code>","text":"<ul> <li><code>info</code> - Prints documentation for commands.</li> <li><code>info &lt;command&gt;</code> - Documentation of specific command <code>command</code>.</li> <li>It is highly navigatable, just like a webpage.</li> <li>Links are marked in * and underline and can be navigated using arrow keys.</li> </ul> <code>keys</code> Description <code>enter</code> Open a link <code>&lt;</code> <code>shift + ,</code> Go back or previous <code>&gt;</code> Go forward or next <code>M</code> <code>m</code> Search menu, similar to seach box <code>S</code> <code>s</code> Regex search <code>Q</code> <code>q</code> Quit"},{"location":"system-commands/notes/Week-2/#type","title":"<code>type</code>","text":"<ul> <li><code>type &lt;command&gt;</code> - Prints the type of the command.</li> <li>Is it<ul> <li>offered by shell?</li> <li>offered by operating system?</li> <li>alias?</li> </ul> </li> <li>To print the type of commands <code>type</code> and <code>ls</code></li> </ul> <pre><code>~$ type type\ntype is a shell builtin\n~$ type ls\nls is aliased to `ls --color=auto'\n</code></pre> <ul> <li>Note : commands displayed by <code>help</code> are all shell builtins. </li> </ul>"},{"location":"system-commands/notes/Week-2/#more-on-alias","title":"More on <code>alias</code>","text":"<ul> <li>To create alias for <code>ls -l</code></li> </ul> <pre><code>~$ alias ll=\"ls -l\"\n~$ ll\ndrwxrwxr-x 5 groot groot 21 Dec 12 18:52 Desktop  \ndrwxrwxr-x 2 groot groot  3 Nov 19 19:41 Downloads\n~$ type ll\nll is aliased to `ls -l'\n</code></pre>"},{"location":"system-commands/notes/Week-2/#unalias","title":"<code>unalias</code>","text":"<ul> <li><code>unalias &lt;alias_command&gt;</code> - Remove the alias command.</li> <li>To remove alias <code>ll</code></li> </ul> <pre><code>~$ unalias ll\n~$ ll\nll: command not found\n</code></pre>"},{"location":"system-commands/notes/Week-2/#rmdir","title":"<code>rmdir</code>","text":"<ul> <li><code>rmdir &lt;dirname&gt;</code> - Remove an empty directory.</li> <li>To remove empty directory <code>level2</code></li> </ul> <pre><code>~$ rmdir level2\n</code></pre>"},{"location":"system-commands/notes/Week-2/#multiple-arguments","title":"Multiple Arguments","text":"<ul> <li>Let\u2019s create some files using <code>touch</code> and multiple arguments and a directory using <code>mkdir</code>.</li> </ul> <pre><code>~$ touch file1 file2 file3\n~$ mkdir mydir\n</code></pre>"},{"location":"system-commands/notes/Week-2/#second-argument","title":"Second argument","text":"<ul> <li>First argument is a file and second argument is directory.</li> <li><code>file1</code> is copied to <code>mydir</code> </li> </ul> <pre><code>~$ cp file1 mydir\n</code></pre> <ul> <li>Both arguments are files.</li> <li><code>file2</code> is overridden by contents of <code>file2</code></li> </ul> <pre><code>~$ cp file1 file2\n</code></pre> <ul> <li> <p>Note</p> <ul> <li>Here the alias is not set for <code>cp</code>, hence the command is not interactive.</li> <li>See the <code>man</code> command to figure out interactive option for <code>cp</code>. </li> </ul> </li> <li> <p><code>rmdir</code> is not meant to handle non empty directories.</p> </li> </ul> <pre><code>~$ rmdir mydir\nrmdir: failed to remove 'mydir': Directory not empty\n</code></pre> <ul> <li>We can use <code>rm</code> and <code>rmdir</code> and delete directory by explicitly navigating into them.</li> <li>But, can we do something better? as this process might be cumbersome.</li> <li>To force the deletion <code>rm</code> has one option <code>-r</code></li> </ul> <pre><code>~$ rm -r mydir\n</code></pre> <ul> <li>As you can see the file deletion happens without any noise.</li> <li>Note <ul> <li>Interactive mode is not set here.</li> <li>Now you know what to do to enable it.</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-2/#interpretation-of-last-argument","title":"Interpretation of last argument","text":""},{"location":"system-commands/notes/Week-2/#recursion-assumed-for-mv-and-not-cp","title":"Recursion assumed for <code>mv</code> and not <code>cp</code>","text":"<ul> <li>Some commands assume recursion while some don\u2019t.</li> <li>Let\u2019s setup our directory structure.</li> </ul> <pre><code>~$ mkdir mydir\n~$ cp file1 mydir\n</code></pre> <ul> <li>Let\u2019s check for <code>cp</code></li> </ul> <pre><code>~$ cp mydir mydir2\ncp: -r not specified; omitting directory 'mydir'\n~$ cp -r mydir mydir2\n</code></pre> <ul> <li>Note that most commands tell you what to do.</li> <li> <p>To take home, recursion is not assumed for <code>cp</code>.</p> </li> <li> <p>Let\u2019s check for <code>mv</code></p> </li> </ul> <pre><code>~$ mv mydir mydir3\n</code></pre> <ul> <li>As you can see no error is generated.</li> <li>That means <code>mydir</code> is successfully renamed as <code>mydir3</code></li> </ul>"},{"location":"system-commands/notes/Week-2/#links","title":"Links","text":""},{"location":"system-commands/notes/Week-2/#ln","title":"<code>ln</code>","text":"<ul> <li><code>ln [-s] &lt;source&gt; &lt;linkname&gt;</code> : Create link for <code>source</code> as <code>linkname</code></li> </ul>"},{"location":"system-commands/notes/Week-2/#symbolic-links","title":"Symbolic Links","text":"<ul> <li>Inode number of source file and linkname are different.</li> <li><code>l</code>, the first character in long format of file denotes the file is symbolic link.</li> <li><code>-s</code> option is used to create symbolic link.</li> <li>To create a symbolic link (same as shortcut in Windows) for <code>file1</code> as <code>file0</code></li> </ul> <pre><code>~$ ln -s file1 file0\n</code></pre> <ul> <li>Long list the <code>file0</code> to see the output.</li> </ul> <pre><code>~$ ls -l file0\nlrwxrwxrwx 1 sanr sanr 5 Dec 19 08:28 file0 -&gt; file1\n</code></pre> <ul> <li>Print the inode numbers of <code>file1</code> and <code>file0</code></li> </ul> <pre><code>~$ ls -i file1 file0\n66488 file0  80500 file1\n</code></pre>"},{"location":"system-commands/notes/Week-2/#hard-links","title":"Hard Links","text":"<ul> <li><code>ln &lt;source&gt; &lt;linkname&gt;</code> - Create hard link</li> <li>We have already come across this in Week 1.</li> <li>Let\u2019s take an example.</li> <li>To create a hard link for <code>file1</code> as <code>file11</code></li> </ul> <pre><code>~$ ln file1 file11\n</code></pre> <ul> <li>See the long listing along with inode numbers.</li> </ul> <pre><code>~$ ls -li file1 file11\n80500 -rw-rw-r-- 2 sanr sanr 0 Dec 18 20:20 file1\n80500 -rw-rw-r-- 2 sanr sanr 0 Dec 18 20:20 file11\n</code></pre> <ul> <li>As you can see here, number of hard links are two for <code>file1</code> and <code>file2</code> as both are same which contrasts with symbolic link.</li> <li>As long as number of hard links for a file &gt; 1 you can delete any file which points to the same hard link as file.</li> <li>X-device/X-cross storage hard links are forbidden.</li> <li>It is typically forbidden to create hard link for a directory.</li> </ul>"},{"location":"system-commands/notes/Week-2/#file-sizes","title":"File Sizes","text":""},{"location":"system-commands/notes/Week-2/#ls-s","title":"<code>ls -s</code>","text":"<ul> <li><code>ls -s &lt;file&gt;</code> - Print the size of <code>file</code>.</li> <li>Combine with <code>-h</code> to print in human readable format.</li> </ul>"},{"location":"system-commands/notes/Week-2/#stat","title":"<code>stat</code>","text":"<ul> <li><code>stat &lt;file&gt;</code> - Shows statistics (file or file system status) on <code>file</code>.</li> <li>Typical output of <code>stat</code> for file <code>znew</code>.</li> </ul> <pre><code>/usr/bin$ stat znew\n  File: znew\n  Size: 4577        Blocks: 10         IO Block: 4608   regular file\nDevice: 1bh/27d Inode: 225090      Links: 1\nAccess: (0755/-rwxr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2022-12-18 15:12:06.475640237 +0200\nModify: 2022-09-05 15:33:59.000000000 +0200\nChange: 2022-11-03 19:51:25.078671510 +0200\n Birth: 2022-11-03 19:51:25.014673255 +0200\n</code></pre> <ul> <li>You can get the atomic output using <code>-c</code> option using <code>FORMAT</code>.</li> <li>For example, get textual and octal permissions on file <code>znew</code></li> </ul> <pre><code>/usr/bin$ stat  -c \"%a %A\" znew\n755 -rwxr-xr-x\n</code></pre> <ul> <li>To know more visit the <code>man</code> pages.</li> </ul>"},{"location":"system-commands/notes/Week-2/#du","title":"<code>du</code>","text":"<ul> <li><code>du &lt;file&gt;</code> - Estimate file space usage.</li> <li>To see the disk usage of <code>znew</code> file.</li> </ul> <pre><code>/usr/bin$ du znew\n5       znew\n/usr/bin$ du -h znew\n5.0K    znew\n</code></pre> <ul> <li>Try to figure out the difference between output by <code>stat</code> and <code>du</code>. </li> </ul>"},{"location":"system-commands/notes/Week-2/#roll-of-block-size","title":"Roll of block size","text":""},{"location":"system-commands/notes/Week-2/#df","title":"<code>df</code>","text":"<ul> <li><code>df [-h]</code> - shows filesystem information in format [human readable] below. <p>Filesystem   1K-blocks    Used Available Use% Mounted on</p> </li> </ul>"},{"location":"system-commands/notes/Week-2/#in-memory-filesystems","title":"In-memory Filesystems","text":"<ul> <li>These are special read-only filesytems, available in memory and not on hard disk.</li> <li>You can view these filesystems.</li> <li>These are directory structures to know more about the system.</li> </ul>"},{"location":"system-commands/notes/Week-2/#proc","title":"<code>/proc</code>","text":"<ul> <li>Older filesystem, but still useful.</li> <li>Used to store different processes.</li> <li>These file are just representaions, so file sizes it contains are zero.</li> <li>Useful files<ul> <li><code>cpuinfo</code> - stores cpu information.</li> <li><code>version</code> - stores system information, content similar to <code>uname</code> -a ` command.</li> <li><code>meminfo</code> - Diagnostic information about memory. Check <code>free</code> command.</li> <li><code>partitions</code> - Disk partition information. Check <code>df</code> </li> <li><code>kcore</code> - The astronomical size ( 2 ^ 47 bits)  tells the maximum virtual memory (47 bits) the current Linux OS is going to handle.</li> </ul> </li> <li>Directories named by <code>number</code><ul> <li>Each of these correspond to running processes. </li> <li>The <code>number</code> corresponds to the process id. </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-2/#sys","title":"<code>/sys</code>","text":"<ul> <li>In use since Kernel 2.6+.</li> <li>It\u2019s a well organized filesystem.</li> <li>Explore usb devices used in the machine.</li> </ul> <pre><code>/sys/bus/usb/devices$ ls\n1-0:1.0  2-0:1.0  2-1  2-1:1.0  2-2  2-2:1.0  usb1  usb2\n</code></pre> <ul> <li>Each number corresponds to a device.</li> <li>Let\u2019s check the <code>product</code> and <code>manufactures</code> of the usb device <code>2-1</code></li> </ul> <pre><code>/sys/bus/usb/devices/2-1$ cat product\nVMware Virtual USB Mouse\n/sys/bus/usb/devices/2-1$ cat manufacturer\n</code></pre> <ul> <li>The VMWare is using its virtual USB mouse to connect the host machine mouse (touch pad) to the guest machine.</li> <li>Thus, these two commands help us to explore hardware attached to the machine.</li> </ul>"},{"location":"system-commands/notes/Week-2/#type-of-options","title":"Type of Options","text":"<ol> <li>UNIX options, which may be grouped and must be preceded by a dash.</li> <li>BSD options, which may be grouped and must not be used with a dash.</li> <li>GNU long options, which are preceded by two dashes.</li> </ol>"},{"location":"system-commands/notes/Week-2/#hell-variables","title":"$HELL Variables","text":"<ul> <li>The variables defined within shell in the command line environment.</li> <li>$hell variables are efficient medium of communication for two processes.</li> <li>They can also be made available to it\u2019s child processes.</li> <li>They are private to the shell they are defined in.</li> <li>$hell variables can also be used to store information in an intermediate form during processes.</li> <li>Commercial softwares can use shell variables to to know ports for which license is available.</li> <li>Hence, it is important to study them.</li> <li>Let\u2019s start.</li> <li>Before going ahead look at command below.</li> </ul>"},{"location":"system-commands/notes/Week-2/#echo","title":"<code>echo</code>","text":"<ul> <li>Display a line of text or value of a variable.</li> <li>Ignores multiple spaces when string is without quotes.</li> <li>Use quotes for string with multiple spaces.</li> <li>Use double quotes for variables.</li> <li>Accepts multi-line input.</li> <li>Print strings to screen.</li> </ul> <pre><code>~$ echo hello, world\nhello, world\n</code></pre> <ul> <li>Print values of variables.</li> </ul> <pre><code>~$ echo $HOME\n/home/groot\n~$ echo \"$HOME\"\n/home/groot\n</code></pre> <ul> <li>To suppress trailing newline, use <code>-n</code> option.</li> </ul> <pre><code>~$ echo -n \"Hello\"\nHello~$\n</code></pre> <ul> <li>To enable interpretation of backslash escapes use <code>-e</code> option.</li> </ul> <ul> <li>Conventionally shell variables are defined in uppercase.</li> <li>To refer to a shell variable use <code>$</code>.</li> </ul>"},{"location":"system-commands/notes/Week-2/#frequently-used-shell-variables","title":"Frequently Used Shell Variables","text":"<ul> <li><code>$USERNAME</code>  or <code>$USER</code><ul> <li>Stores username of the logged in user.</li> </ul> </li> </ul> <pre><code>~$ echo $USERNAME\ngroot\n~$ echo \"User logged into the shell is: $USER\"\nUser logged into the shell is: groot\n</code></pre> <ul> <li><code>$HOME</code> <ul> <li>Stores the path of the home directory.</li> </ul> </li> </ul> <pre><code>~$ echo $HOME\n/home/groot\n</code></pre> <ul> <li><code>$HOSTNAME</code><ul> <li>Stores host name or name of the machine given in the file <code>/etc/hostname</code>.</li> <li>This a static file, if configured the network setting the file can be made dynamic. </li> </ul> </li> </ul> <pre><code>~$ echo $HOSTNAME\nrich-linux\n</code></pre> <ul> <li><code>$PWD</code> <ul> <li>Stores the path of current directory. Same as <code>pwd</code></li> </ul> </li> </ul> <pre><code>~$ echo $PWD\n/home/groot\n</code></pre> <ul> <li><code>$PATH</code> <ul> <li>Stores the path of commands used.</li> <li>Value is list of directories with <code>:</code> as delimiter.</li> </ul> </li> </ul> <pre><code>~$ echo $PATH\n/home/sanr/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin\n</code></pre> <ul> <li>Escaping <code>$</code> <ul> <li>make <code>$</code> an ordinary character using <code>\\</code></li> </ul> </li> </ul> <pre><code>~$ echo  \"hostname is \\$HOSTNAME and user is $USERNAME\"\nhostname is $HOSTNAME and user is groot\n</code></pre>"},{"location":"system-commands/notes/Week-2/#commands-to-inspect-shell-variables","title":"Commands to Inspect Shell Variables","text":""},{"location":"system-commands/notes/Week-2/#printenv","title":"<code>printenv</code>","text":"<ul> <li>Print all o part of environment.</li> </ul> <pre><code>~$ printenv HOME\n/home/groot\n</code></pre>"},{"location":"system-commands/notes/Week-2/#env","title":"<code>env</code>","text":"<ul> <li>Print the variables defined in shell</li> </ul>"},{"location":"system-commands/notes/Week-2/#set","title":"<code>set</code>","text":"<ul> <li>Display the names and values of shell variables.</li> <li>set or unset values of set variables.</li> </ul>"},{"location":"system-commands/notes/Week-2/#different-ways-of-executing-a-command","title":"Different Ways of Executing a Command","text":"<ul> <li>Using command itself </li> </ul> <pre><code>~$ date\nWednesday 21 December 2022 06:20:23 PM EET\n~$ date -R\nWed, 21 Dec 2022 18:21:43 +0200\n</code></pre> <ul> <li>Using commads binary path.</li> </ul> <pre><code>~$ /usr/bin/date\nWednesday 21 December 2022 06:23:34 PM EET\n</code></pre> <ul> <li>Executing from <code>/usr/bin</code></li> </ul> <pre><code>/usr/bin$ ./date\nWednesday 21 December 2022 06:25:50 PM EET\n</code></pre> <ul> <li>Using alias</li> </ul> <pre><code>~$ alias date=\"date -R\"\n~$ date\nWed, 21 Dec 2022 18:22:10 +0200\n</code></pre> <ul> <li>Escaping alias using <code>\\</code></li> </ul> <pre><code>~$ \\date\nWednesday 21 December 2022 06:26:10 PM EET\n</code></pre>"},{"location":"system-commands/notes/Week-2/#special-shell-variables","title":"Special Shell Variables","text":"VARIABLE description <code>$0</code> name of the shell <code>$$</code> process ID of the shell <code>$?</code> exit/return code of previously run command/program <code>$-</code> flags set in the bash shell"},{"location":"system-commands/notes/Week-2/#0","title":"<code>$0</code>","text":"<pre><code>~$ echo $0\nbash\n</code></pre>"},{"location":"system-commands/notes/Week-2/#_1","title":"<code>$$</code>","text":"<ul> <li>see ps</li> </ul> <pre><code>~$ echo $$\n3423\n</code></pre>"},{"location":"system-commands/notes/Week-2/#process-control","title":"Process Control","text":""},{"location":"system-commands/notes/Week-2/#_2","title":"<code>&amp;</code>","text":"<ul> <li>Use to run a program in the background.</li> </ul>"},{"location":"system-commands/notes/Week-2/#fg","title":"<code>fg</code>","text":"<ul> <li>Bring the program to the foreground.</li> </ul>"},{"location":"system-commands/notes/Week-2/#coproc","title":"<code>coproc</code>","text":"<ul> <li>Run a program while also being able to use the shell.</li> </ul>"},{"location":"system-commands/notes/Week-2/#jobs","title":"<code>jobs</code>","text":"<ul> <li>List all background jobs.</li> </ul>"},{"location":"system-commands/notes/Week-2/#top","title":"<code>top</code>","text":"<ul> <li>Live view of all running processes.</li> </ul>"},{"location":"system-commands/notes/Week-2/#kill","title":"<code>kill</code>","text":"<ul> <li>Kill running/stopped process or processes.</li> </ul>"},{"location":"system-commands/notes/Week-2/#program-exit-codes","title":"Program Exit Codes","text":"<ul> <li><code>0</code> - success</li> <li><code>1</code> - failure</li> <li><code>2</code> - misuse of shell builtins when the permissions are not adequate</li> <li><code>126</code> - command can not be executed</li> <li><code>127</code> - command not found</li> <li><code>130</code> - processes killed using <code>ctrl + C</code> or <code>^C</code></li> <li><code>137</code> - processes killed using <code>kill -9 &lt;pid&gt;</code></li> <li>Exit codes have values between <code>0</code> and <code>255</code>.</li> </ul>"},{"location":"system-commands/notes/Week-2/#_3","title":"<code>$?</code>","text":"<pre><code>~$ true\n~$ echo $?\n0\n~$ false\n~$ echo $?\n1\n</code></pre>"},{"location":"system-commands/notes/Week-2/#flags-set-in-bash","title":"Flags set in bash","text":"<ul> <li><code>h</code> - locate and hash commands</li> <li><code>B</code> - brace expansion enabled</li> <li><code>i</code> - interactive mode</li> <li><code>m</code> - job control enabled (jobs can be taken foreground or background)</li> <li><code>H</code> - <code>!</code> style history substitution enabled</li> <li><code>s</code> - commands are read from stdin</li> <li><code>c</code> - commands are read from arguments <code>echo $-</code></li> </ul>"},{"location":"system-commands/notes/Week-2/#shell-variables-part-1","title":"Shell Variables Part - 1","text":"<ul> <li>Creation, inspection, modifictaion, lists\u2026</li> </ul>"},{"location":"system-commands/notes/Week-2/#creating-a-variable","title":"Creating a Variable","text":"<ul> <li><code>myvar=\"value string\"</code></li> <li>Variable name can have mix of alpha-numeric chars and _. <ul> <li><code>myvar</code>, <code>MyVar</code>, <code>My10Var</code> and <code>MyVar_1</code> are valid</li> </ul> </li> <li>It does not start with a number.<ul> <li><code>10myvar</code> is invalid</li> </ul> </li> <li>There are no spaces around <code>=</code> (assignment operator).<ul> <li><code>myvar = 10</code> is invalid</li> </ul> </li> <li>A value can be number, string or a <code>`command`</code> (command substitution).</li> <li>Safer to enclose string value within double quotes.</li> <li><code>${myvar}</code> is more convenient for string concatenation than <code>$myvar</code></li> </ul>"},{"location":"system-commands/notes/Week-2/#examples","title":"Examples","text":"<ul> <li>Create and display variable <code>myvar</code> with value <code>10</code></li> </ul> <pre><code>~$ myvar=10\n~$ echo $myvar\n10\n</code></pre> <ul> <li>Change value of variable <code>myvar</code></li> </ul> <pre><code>~$ myvar=\"hello world\"\n~$ echo $myvar\nhello world\n</code></pre> <ul> <li>Effect when value not within quotes.<ul> <li>variable is assigned a value null</li> </ul> </li> </ul> <pre><code>~$ myvar=hello world\nCommand 'world' not found.\n~$ echo $?\n127\n</code></pre> <ul> <li><code>command</code> as value of a variable. (<code>command</code> is any valid command)<ul> <li>store value of <code>date</code> in variable <code>myvar</code></li> </ul> </li> </ul> <pre><code>~$ mydate=` date ` \n~$ echo $myvar\nThursday 22 December 2022 12:23:07 PM EET\n~$ myvar=` echo Today is Thursday `\nToday is Thursday\n</code></pre>"},{"location":"system-commands/notes/Week-2/#exporting-a-variable","title":"Exporting a Variable","text":"<ul> <li>Make variable available to the subshell.</li> <li>It can be done in following ways<ul> <li><code>export myvar=\"value string\"</code></li> <li><code>myvar=\"value string\" ;</code> <code>export myvar</code></li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-2/#examples_1","title":"Examples","text":"<ul> <li>By default variable is not available for child shell</li> </ul> <pre><code>~$ myvar=3.14\n~$ bash\n~$ echo $myvar\n\n</code></pre> <ul> <li>Make the variable available in child shell<ul> <li>Changing the value of variable in child shell does not affect it\u2019s value in parent shell</li> </ul> </li> </ul> <pre><code>~$ export myvar=3.14\n~$ bash\n~$ echo $myvar\n3.14\n</code></pre>"},{"location":"system-commands/notes/Week-2/#using-variable-values","title":"Using Variable Values","text":"<ul> <li>Refering by variable name using <code>$</code>.<ul> <li><code>echo $myvar</code></li> <li><code>echo ${myvar}</code></li> <li><code>echo \"${myvar}_something\"</code></li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-2/#example","title":"Example","text":"<ul> <li>Accessing variable as <code>${myvar}</code> and without <code>$myvar</code><ul> <li>As stated above <code>_</code> can be part of variable name.</li> </ul> </li> </ul> <pre><code>~$ myvar=FileName\n~$ echo \"$myvar.txt\"\nFileName.txt\n~$ echo \"$myvar_txt\"\n\n~$ echo ${myvar}_txt\nFileName_txt\n</code></pre>"},{"location":"system-commands/notes/Week-2/#removing-a-variable","title":"Removing a Variable","text":"<ul> <li>Delete the variable.<ul> <li><code>unset myvar</code></li> </ul> </li> <li>Example</li> </ul> <pre><code>~$ unset myvar\n~$ echo $myvar\n\n</code></pre>"},{"location":"system-commands/notes/Week-2/#removing-value-of-a-variable","title":"Removing Value of a Variable","text":"<ul> <li>Set the value of variable as  <code>null</code><ul> <li><code>myvar=</code></li> </ul> </li> <li>Example</li> </ul> <pre><code>~$ myvar=\n~$ echo $myvar\n\n</code></pre> <p>.............................................................</p>"},{"location":"system-commands/notes/Week-2/#test-if-a-variable-is-set","title":"Test if a Variable is Set","text":"<ul> <li><code>-v varname</code><ul> <li>True if the shell variable <code>varname</code> is set and is name reference. </li> </ul> </li> </ul> <pre><code>[[ -v myvar ]];\necho $?\n</code></pre> <ul> <li>Return codes:<ul> <li><code>0</code> : success (variable <code>myvar</code> is set)</li> <li><code>1</code> : failure (variable <code>myvar</code> is not set) </li> </ul> </li> <li>Example</li> </ul> <pre><code>~$ unset myvar\n~$ [[ -v myvar ]];\n~$ echo $?\n1\n~$ myvar=10\n~$ [[ -v myvar ]];\n~$ echo $?\n0\n</code></pre>"},{"location":"system-commands/notes/Week-2/#test-if-a-variable-is-not-set","title":"Test if a Variable is Not Set","text":"<ul> <li><code>-z string</code> <ul> <li>True if the length of the string is zero.</li> </ul> </li> </ul> <pre><code>[[ -z ${myvar} ]];\necho $?\n</code></pre> <ul> <li>Return codes:<ul> <li><code>0</code> : success (If the length of the string <code>${myvar}</code> is zero.)</li> <li><code>1</code> : failure (If the length of the string <code>${myvar}</code> is not zero.) </li> </ul> </li> <li>Example</li> </ul> <pre><code>~$ unset myvar\n~$ [[ -z ${myvar} ]];\n~$ echo $?\n0\n~$ myvar=10\n~$ [[ -z ${myvar} ]];\n~$ echo $?\n1\n</code></pre>"},{"location":"system-commands/notes/Week-2/#substitute-default-value","title":"Substitute Default Value","text":"<ul> <li>If the variable <code>myvar</code> is not set (<code>:-</code>), use <code>\"default\"</code> as temporary value.</li> </ul> <pre><code>echo ${myvar:-\"default\"}\n</code></pre> <ul> <li>There are no spaces around <code>:-</code></li> <li>Pseudocode :  <p>if <code>myvar</code> is set:</p> <p>display its value</p> <p>else:</p> <p>display \u201cdefault\u201d</p> </li> </ul>"},{"location":"system-commands/notes/Week-2/#examples_2","title":"Examples","text":"<pre><code>~$ myvar=\n~$ echo ${myvar:-hello}\nhello\n~$ echo ${myvar:-\"myvar is not set\"}\nmyvar is not set\n~$ echo ${myvar}\n\n~$ myvar=\"HELLO\"\n~$  ${myvar:-hello}\nHELLO\n</code></pre>"},{"location":"system-commands/notes/Week-2/#set-default-value","title":"Set Default Value","text":"<ul> <li>If the variable <code>myvar</code> is not set, then set <code>\"default\"</code> as it\u2019s value.</li> </ul> <pre><code>echo ${myvar:=\"default\"}\n</code></pre> <ul> <li>There are no spaces around <code>:=</code></li> <li>Pseudocode :  <p>if <code>myvar</code> is set:</p> <p>display its value</p> <p>else:</p> <p>set \u201cdefault\u201d as its value</p> <p>display its new value</p> </li> </ul>"},{"location":"system-commands/notes/Week-2/#examples_3","title":"Examples","text":"<pre><code>~$ myvar=\n~$ echo ${myvar:=hello}\nhello\n~$ echo ${myvar:=HELLO}\nhello\n~$ echo ${myvar}\nhello\n</code></pre>"},{"location":"system-commands/notes/Week-2/#reset-value-if-variable-is-set","title":"Reset Value if Variable is Set","text":"<ul> <li>If the variable <code>myvar</code> is set, then set \u201cdefault\u201d as its temporary value.</li> </ul> <pre><code>echo ${myvar:+\"default\"}\n</code></pre> <ul> <li>There are no spaces around <code>:+</code></li> <li>Pseudocode :  <p>if <code>myvar</code> is set:</p> <p>display \u201cdefault\u201d   </p> <p>else:</p> <p>display \u201c\u201d</p> </li> </ul>"},{"location":"system-commands/notes/Week-2/#example_1","title":"Example","text":"<pre><code>~$ myvar=apple\n~$ echo ${myvar:+APPLE}\nAPPLE\n~$ echo $myvar\napple\n~$ unset myvar\necho ${myvar:+APPLE}\n\n</code></pre>"},{"location":"system-commands/notes/Week-2/#user-defined-error-message-alert","title":"User Defined Error Message (Alert)","text":"<ul> <li>Display user defined error when variable is not set.</li> </ul> <pre><code>echo ${myvar:?\"myvar is not set\"}\n</code></pre>"},{"location":"system-commands/notes/Week-2/#example_2","title":"Example","text":"<pre><code>~$ unset myvar\n~$ echo ${myvar:?\"myvar is not set\"}\nbash: myvar: myvar is not set\n</code></pre>"},{"location":"system-commands/notes/Week-2/#list-of-variable-names","title":"List of Variable Names","text":"<ul> <li>Print the environment variable names matching init_chars.</li> <li>We can access these variables using the methods we have seen already.</li> </ul> <pre><code>echo ${!init_chars*}\n</code></pre>"},{"location":"system-commands/notes/Week-2/#example_3","title":"Example","text":"<ul> <li>List of names of shell variables that start with <code>H</code> and <code>HI</code>.</li> </ul> <pre><code>~$ echo ${!H*}\nHISTCMD HISTCONTROL HISTFILE HISTFILESIZE HISTSIZE HOME HOSTNAME HOSTTYPE\n~$ echo ${!HI*}\nHISTCMD HISTCONTROL HISTFILE HISTFILESIZE HISTSIZE\n~$ echo ${HISTFILE}\n/home/groot/.bash_history\n</code></pre>"},{"location":"system-commands/notes/Week-2/#length-of-string-value","title":"Length of String Value","text":"<ul> <li>Display length of the string value of the variable <code>myvar</code>.</li> <li>If <code>myvar</code> is not set, display <code>0</code>.</li> </ul> <pre><code>echo ${#myvar}\n</code></pre>"},{"location":"system-commands/notes/Week-2/#example_4","title":"Example","text":"<ul> <li>Getting length of string returned by <code>date</code> command stored in a variable.</li> </ul> <pre><code>~$ mydate=` date `\n~$ echo ${mydate}\nThursday 22 December 2022 04:50:31 PM EET\n~$ echo ${#mydate}\n41\n~$ myvar=\n~$ echo ${#myvar}\n0\n</code></pre>"},{"location":"system-commands/notes/Week-2/#string-operations","title":"String Operations","text":""},{"location":"system-commands/notes/Week-2/#slice-of-string-value","title":"Slice of String Value","text":"<ul> <li>Provide offset and slice_length separated by <code>:</code>.</li> <li><code>${varname:offset:slice_length}</code></li> <li>Display 4 chars of the string value of the variable <code>myvar</code> skipping first 5 chars.</li> <li>If slice_length &gt; ${#varname}, slice_length = ${#varname}.</li> <li>Offset value can be negative.</li> </ul> <pre><code>echo ${myvar:5:4}\n</code></pre>"},{"location":"system-commands/notes/Week-2/#examples_4","title":"Examples","text":"<ul> <li>Extract part of string by using offset from the beginning.</li> </ul> <pre><code>~$ myvar=abcdefgh12345678\n~$ echo ${myvar:3:3}\ndef\n~$ echo ${mydate:0:6}\nSunday\n</code></pre> <ul> <li>Extract part of string by using offset from the end.<ul> <li>notice <code>&lt;space&gt;</code> between operator <code>:</code> and <code>-</code> sign.</li> </ul> </li> </ul> <pre><code>~$ myvar=abcdefgh12345678\n~$ echo ${myvar: -3:3}\n678\n~$ echo ${mydate: -3:2}\n67\n</code></pre> <ul> <li>Using command and variable to obtain the same result. </li> </ul> <pre><code>~$ date\nThursday 22 December 2022 05:10:53 PM EET\n~$ date +\"%d %B %Y\"\n22 December 2022\n~$ mydate=` date `\n$ echo ${mydate:9:16}\n22 December 2022\n</code></pre>"},{"location":"system-commands/notes/Week-2/#remove-prefix-matching-a-pattern","title":"Remove Prefix Matching a Pattern","text":"<ul> <li>Match the string from the beginning.</li> <li>Pattern is regex (later)</li> <li><code>*</code> matches any number of characters.</li> <li>Match once using <code>##</code></li> </ul> <pre><code>echo ${myvar#pattern}\n</code></pre> <pre><code>~$ myvar=MyFile.tar.gz\n~$ echo ${myvar#*.}\ntar.gz\n~$ echo ${myvar#*.*.}\ngz\n</code></pre> <ul> <li>Match max possible using <code>###</code></li> </ul> <pre><code>echo ${myvar##pattern}\n</code></pre> <pre><code>~$ myvar=MyFile.tar.gz\n~$ echo ${myvar##*.}\ngz\n</code></pre>"},{"location":"system-commands/notes/Week-2/#remove-suffix-matching-a-pattern","title":"Remove Suffix Matching a Pattern","text":"<ul> <li>Match the string from the end.</li> <li>Match once using <code>%</code></li> </ul> <pre><code>echo ${myvar%pattern}\n</code></pre> <pre><code>~$ myvar=MyFile.tar.gz\n~$ echo ${myvar%.*}\nMyFile.tar\n~$ echo ${myvar%.*.*}\nMyFile\n</code></pre> <ul> <li>Match max possible using <code>%%</code></li> </ul> <pre><code>echo ${myvar%%pattern}\n</code></pre> <pre><code>~$ myvar=MyFile.tar.gz\n~$ echo ${myvar%%.*}\nMyFile\n~$ echo ${myvar%%.*}.${myvar##*.}\nMyFile.gz\n~$ echo ${myvar%%.*}.zip\nMyFile.zip\n</code></pre>"},{"location":"system-commands/notes/Week-2/#replace-matching-pattern","title":"Replace Matching Pattern","text":"<ul> <li>Replace matching pattern from anywhere in the string.</li> <li>pattern and string are separated with <code>/</code></li> <li>Match pattern once (<code>/</code>) and replace with string.</li> </ul> <pre><code>echo ${myvar/pattern/string}\n</code></pre> <ul> <li>Example 1 - Change only first occurrence of pattern with string</li> </ul> <pre><code>~$ myvar=MyFile.SomeThing.jpeg\n~$ echo ${myvar/e/E}\nMyFilE.SomeThing.jpeg\n</code></pre> <ul> <li>Match pattern max possible (<code>//</code>) and replace with string.</li> </ul> <pre><code>echo ${myvar//pattern/string}\n</code></pre> <pre><code>~$ echo ${myvar//e/E}\nMyFilE.SomEThing.jpEg\n~$ myvar=MyjpegFile.Something.jpeg\n~$ echo ${myvar//jpeg/jpg}\nMyjpgFile.Something.jpg\n~$ myfname=` echo ${myvar//jpeg/jpg} `\n~$ echo $newfname\nMyjpgFile.Something.jpg\n</code></pre>"},{"location":"system-commands/notes/Week-2/#replace-matching-pattern-by-location","title":"Replace Matching Pattern by Location","text":"<ul> <li>Match and replace the prefix (<code>/##</code>)<ul> <li>match at the beginning</li> </ul> </li> </ul> <pre><code>echo ${myvar/#pattern/string}\n</code></pre> <pre><code>~$ echo ${myvar/#M/m}\nmyFile.SomeThing.jpeg\n~$ mydate=`date`\n~$ newdate=` echo ${mydate/#*day }`\n~$ echo $newdate\n22 December 2022 05:10:53 PM EET\n</code></pre> <ul> <li>Match and replace the suffix (<code>/%</code>)<ul> <li>match at the end</li> </ul> </li> </ul> <pre><code>echo ${myvar/%pattern/string}\n</code></pre> <pre><code>~$ echo ${myvar/%jpeg/jpg}\nMyFile.SomeThing.jpg\n</code></pre>"},{"location":"system-commands/notes/Week-2/#changing-case-to-lower-case","title":"Changing Case to Lower Case","text":"<ul> <li>Uses <code>,</code> (comma) symbol.</li> <li>Changes only view and not the value.</li> <li>Change first character to lower case using <code>,</code></li> </ul> <pre><code>echo ${myvar,}\n</code></pre> <pre><code>~$ mymonth=\"MARGALI\"\n~$ echo ${mymonth,}\nmARGALI\n</code></pre> <ul> <li>Change all character to lower case using <code>,,</code></li> </ul> <pre><code>echo ${myvar,,}\n</code></pre> <pre><code>~$ echo ${mymonth,,}\nmargali\n</code></pre>"},{"location":"system-commands/notes/Week-2/#changing-case-to-upper-case","title":"Changing Case to Upper Case","text":"<ul> <li>Uses <code>^</code> (caret) symbol.</li> <li>Changes only view and not the value.</li> <li>Change first character to Upper case using <code>^</code></li> </ul> <pre><code>echo ${myvar^}\n</code></pre> <pre><code>~$ mymonth=\"margali\"\n~$ echo ${mymonth^}\nMargali\n</code></pre> <ul> <li>Change all characters to UPPER case using <code>^^</code></li> </ul> <pre><code>echo ${myvar^^}\n</code></pre> <pre><code>~$ mymonth=\"margali\"\n~$ echo ${mymonth^^}\nMARGALI\n</code></pre>"},{"location":"system-commands/notes/Week-2/#set-or-unset-attributes-on-value-types","title":"Set or Unset Attributes on  Value Types","text":"<ul> <li>Attributes are some restrictions.</li> <li><code>declare [option] varname</code></li> <li><code>declare [option] varname=value...</code></li> <li><code>-</code> is used to set attribute and <code>+</code> is used to remove attribute.</li> </ul>"},{"location":"system-commands/notes/Week-2/#options-which-set-and-unset-attributes","title":"Options which set and unset attributes:","text":"<ul> <li><code>-i</code> : Can only assign <code>integer</code> values, strings converted to integer 0.</li> </ul> <pre><code>declare -i myvar\n</code></pre> <pre><code>~$ declare -i mynum=1729\n~$ echo $mynum\n1729\n~$ mynum=\"hello world\"\n~$ echo $mynum\n0\n</code></pre> <ul> <li><code>+i</code> : Remove integer attribute/restriction</li> </ul> <pre><code>declare +i myvar\n</code></pre> <pre><code>~$ declare +i mynum\n~$ mynum=\"hello world\"\n~$ echo $mynum\nhello world\n</code></pre> <ul> <li><code>-l</code> : Convert value to lower case on assignment.</li> </ul> <pre><code>declare -l myvar\n</code></pre> <pre><code>~$ declare -l myvar=\"HELLO WORLD\"\n~$ echo ${myvar}\nhello world\n</code></pre> <ul> <li><code>+l</code> : Remove lower case restriction.</li> </ul> <pre><code>declare +l myvar\n</code></pre> <ul> <li><code>-u</code> : Convert value to upper case on assignment.</li> </ul> <pre><code>declare -u myvar\n</code></pre> <pre><code>~$ declare -u MYVAR=\"hello world\"\n~$ echo ${MYVAR}\nHELLO WORLD\n</code></pre> <ul> <li><code>+u</code> : Remove upper case restriction.</li> </ul> <pre><code>declare +u myvar\n</code></pre> <ul> <li><code>-r</code> : Make the variable read only. <code>+</code> can not be used to remove this attribute.</li> </ul> <pre><code>declare -r myvar\n</code></pre> <pre><code>~$ declare -r PI=3.142\n~$ echo $PI\n3.142\n~$ PI=2.142\nbash: PI: readonly variable\n~$ declare +r PI\nbash: declare: PI: readonly variable\n</code></pre>"},{"location":"system-commands/notes/Week-2/#indexed-arrays","title":"Indexed Arrays","text":"<ul> <li>Declare an indexed array <code>arr</code> using <code>-a</code> </li> </ul> <pre><code>declare -a arr\n</code></pre> <pre><code>~$ declare -a arr\n</code></pre>"},{"location":"system-commands/notes/Week-2/#indexed-array-operations","title":"Indexed Array Operations","text":"<ul> <li>Set value of element with some index in the array.</li> </ul> <pre><code>arr[0]=\"value\"\n</code></pre> <pre><code>~$ arr[0]=Sunday\n~$ arr[1]=Monday\n</code></pre> <ul> <li>Access value of element with index 0 in the array.</li> </ul> <pre><code>echo ${arr[0]}\n</code></pre> <pre><code>~$ echo ${arr[0]}\nSunday\n~$ echo $arr\nSunday\n~$ \n</code></pre> <ul> <li>Number of elements in the array (<code>@</code> : all elements).</li> </ul> <pre><code>echo ${#arr[@]}\n</code></pre> <pre><code>~$ echo ${#arr[@]}\n2\n</code></pre> <ul> <li>Display all indices used. (Indices in bash array can be sparse.)</li> </ul> <pre><code>echo ${!arr[@]}\n</code></pre> <pre><code>~$ echo ${!arr[@]}\n0 1\n</code></pre> <ul> <li>Diplay values of all elements in the array.</li> </ul> <pre><code>echo ${arr[@]}\n</code></pre> <pre><code>~$ echo ${arr[@]}\nSunday Monday\n</code></pre> <ul> <li>Array indices are sparse<ul> <li>indices are sorted in natural order.</li> </ul> </li> </ul> <pre><code>~$ arr[100]=NotToBeDay\n~$ echo ${arr[@]}\nSunday Monday NotToBeDay\n$ echo ${!arr[@]}\n0 1 100\n</code></pre> <ul> <li>Delete element with index 100 in the array</li> </ul> <pre><code>unset 'arr[100]'\n</code></pre> <pre><code>~$ unset 'arr[100]'\n~$ echo ${arr[@]}\nSunday Monday\n</code></pre> <ul> <li>Append an element with a value to the end of the array.<ul> <li>Multiple elements can be separated with space</li> </ul> </li> </ul> <pre><code>arr+=(\"value\")\n</code></pre> <pre><code>~$ arr+=(Tuesday)\n~$ echo ${arr[@]}\nSunday Monday Tuesday\n</code></pre> <ul> <li>Array declaration and initialization<ul> <li><code>&lt;space&gt;</code> as separator.</li> <li>indices start with 0</li> </ul> </li> </ul> <pre><code>~$ declare -a weekdays=(Sunday Monday Tuesday Wednesday Thursday Friday Saturday)\n~$ echo ${!weekdays[@]}\n0 1 2 3 4 5 6\n~$ echo ${weekdays[@]}\nSunday Monday Tuesday Wednesday Thursday Friday Saturday\n</code></pre> <ul> <li><code>ls</code> command output into array</li> </ul> <pre><code>~$ declare -a arr\n~$ arr=(` ls `)\n</code></pre>"},{"location":"system-commands/notes/Week-2/#associative-arrays","title":"Associative Arrays","text":"<ul> <li>Declare an associative array or hash using <code>-A</code></li> </ul> <pre><code>declare -A hash\n</code></pre> <pre><code>~$ declare -A hash\n</code></pre>"},{"location":"system-commands/notes/Week-2/#associative-arrays-operations","title":"Associative Arrays Operations","text":"<ul> <li>set value of element with index <code>\"a\"</code> in the array.</li> </ul> <pre><code>hash[\"a\"]=\"value\"\n</code></pre> <pre><code>~$ hash[0]=\"Amul\"\n~$ hash[1]=\"Gokul\"\n~$ hash[\"city\"]=\"Madras\"\n</code></pre> <ul> <li>Access value of element with index <code>\"a\"</code> in the array.</li> </ul> <pre><code>echo ${hash[\"a\"]}\n</code></pre> <pre><code>~$ echo ${hash[\"city\"]}\nMadras\n</code></pre> <ul> <li>Number of elements in the array (<code>@</code> : all elements).</li> </ul> <pre><code>echo ${#hash[@]}\n</code></pre> <pre><code>~$ echo ${#hash[@]}\n3\n</code></pre> <ul> <li>Display all indices used. (Indices in bash array can be sparse.)</li> </ul> <pre><code>echo ${!hash[@]}\n</code></pre> <pre><code>~$ echo ${!hash[@]}\n0 1 city\n</code></pre> <ul> <li>Diplay values of all elements in the array.</li> </ul> <pre><code>echo ${hash[@]}\n</code></pre> <pre><code>~$ echo ${hash[@]}\nAmul Gokul Madras\n</code></pre> <ul> <li>Delete element with index <code>\"a\"</code> in the array</li> </ul> <pre><code>unset 'hash[\"a\"]'\n</code></pre> <pre><code>~$ unset 'hash[\"city\"]'\n~$ echo ${hash[@]}\nAmul Gokul\n</code></pre> <p>Shell Variable Manipulations are FAST!  </p>"},{"location":"system-commands/notes/Week-2/#linux-process-management","title":"Linux Process Management","text":"<ul> <li>Helps to switch between tasks while we are in the command line environment.</li> </ul>"},{"location":"system-commands/notes/Week-2/#sleep","title":"<code>sleep</code>","text":"<ul> <li>Delay for a specified amount (<code>NUMBER</code>) of time.</li> </ul> <pre><code>sleep NUMBER\n</code></pre> <ul> <li>To <code>sleep</code> for 10 seconds.</li> </ul> <pre><code>~$ sleep 10\n\n</code></pre> <p>We will use <code>sleep</code> a simple process to demonstrate Linux process management.</p>"},{"location":"system-commands/notes/Week-2/#_4","title":"<code>&amp;</code>","text":"<ul> <li>A process is run in the background.</li> </ul> <pre><code>command &amp;\n</code></pre> <pre><code>~$ sleep 30 &amp;\n[1] 5477\n</code></pre> <ul> <li><code>[1]</code> denotes the command number that is pushed to background. Not to be confused with <code>5477</code> which is <code>PID</code></li> </ul>"},{"location":"system-commands/notes/Week-2/#coproc_1","title":"<code>coproc</code>","text":"<ul> <li>Bash builtin command to create interactive asynchronous process.</li> <li> <p>The program runs asynchronously and can listen to standard input and give back standard output on need.</p> </li> <li> <p>Run command(s) in an executing shell. <code>NAME</code> is optional, default name is <code>COPROC</code></p> </li> </ul> <pre><code>coproc [NAME] { command; }\n</code></pre> <ul> <li>Write to a specific coprocess stdin</li> </ul> <pre><code>echo \"input\" &gt;&amp;\"${NAME[1]}\"\n</code></pre> <ul> <li>Read from a specific coprocess stdout</li> </ul> <pre><code>read varname &lt;&amp;\"${NAME[0]}\"\n</code></pre> <ul> <li>Create a coprocess running <code>bc</code></li> </ul> <pre><code>~$ coproc BC { bc --mathlib; }; ## creates a coprocess\n[1] 3820\n~$ echo \"22/7\" &gt;&amp;\"${BC[1]}\"     ## write input to coprocess  \n~$ read output &lt;&amp;\"${BC[0]}\" ## read output from coprocess\n~$ echo $output ## echo the read output.\n3.14285714285714285714\n</code></pre> <ul> <li> <p>run <code>ps --forest</code> to see the process tree.</p> </li> <li> <p>Run command <code>sleep 10</code> as a coprocess.</p> <ul> <li>command run within the same shell.</li> <li>process name can not be given.</li> <li>default name is used.</li> </ul> </li> </ul> <pre><code>~$ coproc sleep 10\n[1] 5499\n~$ \n[1]+    Done                coproc COPROC sleep 10\n</code></pre>"},{"location":"system-commands/notes/Week-2/#fg_1","title":"<code>fg</code>","text":"<ul> <li>Bring a recent process running in the background to the foreground.</li> </ul> <pre><code>~$ sleep 30 &amp;\n[1] 5510\n~$ fg\nsleep 30\n\n</code></pre>"},{"location":"system-commands/notes/Week-2/#jobs_1","title":"<code>jobs</code>","text":"<ul> <li>List the processes running in the background by the user.</li> </ul> <pre><code>~$ coproc sleep 30\n[1] 5583\n~$ jobs\n[1]+  Running                 coproc COPROC sleep 30 &amp;\n</code></pre>"},{"location":"system-commands/notes/Week-2/#top_1","title":"<code>top</code>","text":"<ul> <li>Prints summary and live snapshots of processes running onto the screen.</li> <li>It is in decreasing order of CPU utilization <code>%CPU</code>.</li> <li>Use <code>q</code> key or <code>^C</code> to quit, <code>^Z</code> to suspend it (move to background).  </li> </ul> <pre><code>top\n</code></pre>"},{"location":"system-commands/notes/Week-2/#kill_1","title":"<code>kill</code>","text":"<ul> <li>Kill a command using it\u2019s process id.</li> </ul> <pre><code>kill -9 &lt;process id&gt;\n</code></pre> <pre><code>~$ coproc sleep 10\n[1] 5507\n~$ kill -9 5530\n~$\n[1]+    Killed              coproc COPROC sleep 10      \n</code></pre>"},{"location":"system-commands/notes/Week-2/#_5","title":"<code>$!</code>","text":"<ul> <li>It\u2019s an environment variable which stores the <code>PID</code> of the last process that is running/has run in the background.</li> <li>The value persits even if the process is finished.</li> </ul>"},{"location":"system-commands/notes/Week-2/#more-on-program-exit-codes","title":"More on Program Exit Codes","text":"<ul> <li>If a command is run successfully then error code is <code>0</code>.</li> </ul> <pre><code>~$ echo hello\nhello\n~$ echo $? \n0\n</code></pre> <ul> <li>If a program/command has failed (like permission error) then error code is <code>1</code>.</li> </ul> <pre><code>/$ touch file1\ntouch: cannot touch 'file1': Permission denied\n/$ echo $?\n1\n\n</code></pre> <ul> <li>If there is misuse of shell builtins, then error code is <code>2</code></li> </ul> <pre><code>~$ ls -w\nls: option requires an argument -- 'w'\nTry 'ls --help' for more information.\n~$ echo $?\n2\n~$ help -h\nbash: help: -h: invalid option\nhelp: usage: help [-dms] [pattern ...]\n~$ echo $?\n2\n</code></pre> <ul> <li>If the command can not be executed then error code is <code>126</code><ul> <li><code>file1</code> is not executable.</li> </ul> </li> </ul> <pre><code>~$ stat -c \"%A\" file1\n-rw-rw-r--\n~$ ./file1; echo $?\nbash: ./file1: Permission denied\n126\n</code></pre> <ul> <li>If the command is not found then the error code is <code>127</code></li> </ul> <pre><code>~$ daet\n</code></pre> <p>Very big output.</p> <pre><code>~$ echo $?\n127\n</code></pre> <ul> <li>If the command is killed/inturrupted with <code>^C</code>, then the error code is <code>130</code></li> </ul> <pre><code>~$ sleep 30\n^C\n~$ echo $?\n130\n</code></pre> <ul> <li>If the process in some other shell is killed using <code>kill -9</code> command, then the error code is <code>137</code> </li> </ul> <p>Terminal 1 : Iterative output of <code>top</code> command    </p> <pre><code>~$ top\n</code></pre> <p>Terminal 2 : Kill command <code>top</code> running in Terminal 1.</p> <pre><code>~$ kill -9 2267\n~$\n</code></pre> <p>Terminal 1 : Response</p> <pre><code>Killed\n~$ echo $?\n137\n</code></pre> <ul> <li>Other exit codes<ul> <li>Returns exit code modulo 256 on exit code greater than 255.</li> </ul> </li> </ul> <pre><code>~$ bash -c \"echo \\$$; exit 3243;\"\n6669\n~$ echo $?\n171\n</code></pre> <p>Exit codes are useful when in a program you want to run a process based on exit code of other process.</p>"},{"location":"system-commands/notes/Week-2/#more-on-flags-set-in-bash","title":"More on Flags Set in Bash","text":""},{"location":"system-commands/notes/Week-2/#-","title":"<code>$-</code>","text":"<ul> <li>Special variable to print the flags set in bash.</li> </ul> <pre><code>~$ echo $-\nhimBHs\n</code></pre> <ul> <li>Let\u2019s run a command to check if there can be less number of flags.<ul> <li><code>bash</code> : spawn a childshell</li> <li><code>-c</code>  : consider first non-option argument as command</li> <li><code>\\</code> : escape character to stop early interpretation of <code>$-</code></li> </ul> </li> </ul> <pre><code>~$ bash -c \"echo \\$-\"\nhBc\n</code></pre> <ul> <li>Check the pid of childshell and printing the forest view using <code>ps</code>. <ul> <li>Commands are separated with <code>;</code></li> </ul> </li> </ul> <pre><code>~$ bash -c \"echo \\$$; echo \\$-; ps --forest\"\n</code></pre>"},{"location":"system-commands/notes/Week-2/#history-command","title":"<code>history</code> command","text":"<ul> <li>Stores commands run so far as history.</li> <li><code>!NUMBER</code> (bang) is used to refer <code>NUMBER</code>th command. <ul> <li>This is enabled when <code>H</code> flag is set.</li> </ul> </li> </ul> <pre><code>history\n</code></pre> <ul> <li>To run <code>echo $0</code> at position <code>2023</code> </li> </ul> <pre><code>~$ !2023\necho $0\nbash\n</code></pre>"},{"location":"system-commands/notes/Week-2/#brace-expnasion","title":"Brace Expnasion","text":"<ul> <li>Enabled using <code>B</code> flag.</li> <li>Expand <code>{start..stop}</code> into list of values between <code>start</code> and <code>stop</code> inclusive.</li> </ul> <pre><code>~$ echo {a..d}\na b c d\n~$ echo {5..1}\n5 4 3 2 1\n</code></pre>"},{"location":"system-commands/notes/Week-2/#other-expansions","title":"Other Expansions","text":"<ul> <li>A wildcard <code>*</code> matches all files.</li> </ul> <pre><code>~$ echo *\nDesktop Documents Music Pictures Public snap Templates Videos\n~$ echo D*\nDesktop Documents Downloads\n</code></pre>"},{"location":"system-commands/notes/Week-2/#multiple-commands-on-a-line","title":"Multiple Commands on a Line","text":"<ul> <li>Use semicolon <code>;</code> to separate commands.</li> <li>Combining <code>ls</code>, <code>date</code> and <code>wc</code> commands on same line.</li> <li><code>;</code> in the end is optional.</li> </ul> <pre><code>~$ ls; date; wc -l /etc/profile;\nDesktop Documents Music Pictures Public snap Templates Videos\nFriday 23 December 2022 01:36:49 PM EET\n27 /etc/profile\n</code></pre>"},{"location":"system-commands/notes/Week-3/","title":"Combining Commands and Files","text":"<ul> <li>In GNU/Linux OS it is possible to combine multiple commands together a to achieve a task.</li> </ul>"},{"location":"system-commands/notes/Week-3/#executing-multiple-commands","title":"Executing Multiple Commands","text":"<ul> <li> <p><code>command1; command2; command3;</code></p> <ul> <li> <p>Command execution is independent of the exit status.</p> <p><code>terminal ~$ ls -d D* ; date; wc -l /etc/profile; Desktop  Documents  Downloads Saturday 24 December 2022 09:09:25 AM EET 27 /etc/profile</code></p> </li> <li> <p>If any command fails it will not affect execution of other command.</p> <ul> <li>here <code>ls /blah</code> fails.</li> </ul> <p><code>terminal ~$ ls /blah ; date; wc -l /etc/profile; ls: cannot access '/blah': No such file or directory Saturday 24 December 2022 09:11:04 AM EET 27 /etc/profile</code></p> </li> </ul> </li> <li> <p><code>command1 &amp;&amp; command2 &amp;&amp; command3</code></p> <ul> <li><code>&amp;&amp;</code> is logical AND operator. </li> <li>A command is executed if exit status of previous command is <code>true</code>.</li> <li><code>command2</code> will be executed only if <code>command1</code> succeeds.</li> <li> <p>If <code>command2</code> succeeds <code>command3</code> will be executed.</p> <p><code>terminal ~$ ls -d D* &amp;&amp; date Desktop  Documents  Downloads Saturday 24 December 2022 09:40:19 AM EET</code></p> </li> <li> <p>If a command fails subsequent commands will not execute.</p> <p><code>terminal /$ ls /blah &amp;&amp; date ls: cannot access '/blah': No such file or directory</code></p> </li> </ul> </li> <li> <p><code>command1 || command2 || command3</code></p> <ul> <li><code>||</code> is logical OR operator.</li> <li>A command is executed if exit status of previous command is <code>false</code></li> <li> <p>If <code>command1</code> succeeds, the execution will stop.</p> <p><code>terminal ~$ ls -d D* || date Desktop  Documents  Downloads</code></p> </li> <li> <p><code>command2</code> will be executed if <code>command1</code> fails. </p> </li> <li> <p><code>command3</code> will be executed if <code>command2</code> fails.</p> <p><code>terminal /$ ls /blah || date ls: cannot access '/blah': No such file or directory Saturday 24 December 2022 09:46:55 AM EET</code></p> </li> </ul> </li> <li> <p><code>( command1; command2; command3 )</code> </p> <ul> <li> <p>Execution of multiple commands by spawning subshells.</p> <p><code>terminal ~$ ( date; echo $BASH_SUBSHELL ) Saturday 24 December 2022 09:26:57 AM EET 1</code></p> </li> <li> <p>Nesting of the subshell commands</p> <ul> <li>Nesting increases the subshell level.</li> <li>It is useful when environment which runs a program needs to be closed.</li> <li>It is not a good practice to launch subshells indefinitely, as it is expensive to prepare environment, computationally.</li> </ul> <p><code>terminal ~$ echo $BASH_SUBSHELL; ( echo $BASH_SUBSHELL; (echo $BASH_SUBSHELL)) 0 1 2</code></p> </li> </ul> </li> <li> <p><code>&amp;&amp;</code> and <code>||</code> operators can be combined together to achieve fairly complex task.      </p> </li> </ul>"},{"location":"system-commands/notes/Week-3/#file-descriptors","title":"File Descriptors","text":"<p>File Descriptors can be used to redirect output to either a file or a command. The data is stream of characters. There are 3 standard file descriptors. * <code>stdin</code>     - Abbreviation for standard input.     - Reference Number : <code>0</code>     - By default is pointer to input stream coming from keyboard. * <code>stdout</code>     - Abbreviation for standard output.     - Reference Number : <code>1</code>     - By default refers to screen where the output is displayed. * <code>stderr</code>     - Abbreviation for standard error.     - Reference Number : <code>2</code>     - By default refers to screen the error is displayed.</p>"},{"location":"system-commands/notes/Week-3/#using-cat-to-listen-stdin-and-stdout","title":"Using <code>cat</code> to Listen <code>stdin</code> and <code>stdout</code>","text":"<ul> <li>When no option is given,  <ul> <li> <p><code>cat</code> reads from <code>stdin</code> (<code>0</code>) and writes to the <code>stdout</code> (<code>1</code>).</p> <p><code>terminal ~$ cat Hello, how are you? Hello, how are you? I am fine. I am fine. Press &lt;ctrl+D&gt; to send EOF and gracefully exit. Press &lt;ctrl+D&gt; to send EOF and gracefully exit. ~$</code></p> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#redirection-operators","title":"Redirection Operators","text":"<ul> <li> <p><code>command &gt; file1</code></p> <ul> <li><code>&gt;</code> is same as <code>1&gt;</code>.</li> <li> <p><code>&gt;</code> is used to create an empty file or to empty the existing file.</p> <p><code>terminal ~$ &gt; file.txt ~$ ls -l file.txt -rw-rw-r-- 2 groot groot 0 Dec 24 10:14 file.txt</code></p> </li> <li> <p><code>&gt;</code> operator is used to redirect the <code>stdout</code> of <code>command</code> to <code>file1</code>.</p> </li> <li> <p>New file1 will be created if it does not exist.</p> <p><code>terminal ~$ ls -1 /usr/bin &gt; file1 ~$ ls -l file1 -rw-rw-r-- 2 groot groot 13354 Dec 24 10:14 file1</code></p> </li> <li> <p>Contents of file1 will be overwritten.</p> </li> <li> <p>Standard error is printed to the screen.</p> <p><code>terminal ~$ ls -1 /usr/blah &gt; file1 ls: cannot access '/usr/blah': No such file or directory ~$ ls -l file1 -rw-rw-r-- 2 groot groot 0 Dec 24 10:14 file1</code></p> </li> <li> <p>Since, you are creating a file write permission to the directory is required.</p> <p><code>terminal /$ ls -1 /usr/bin &gt; file1 bash: file1: Permission denied</code></p> </li> <li> <p>Storing system hardware information in a file using <code>hwinfo</code> command.</p> <p><code>terminal ~$  hwinfo &gt; hwinfo.txt</code></p> </li> <li> <p>Using <code>cat</code> we can redirect the <code>stdout</code> (<code>1</code>) to write to (overwrite!) a file using <code>&gt;</code>.</p> <p><code>terminal ~$ cat &gt; file1 This is the first file I am creating on command line. We could use this feature to create text files on command line. You can exit using &lt;ctrl+D&gt; ~$ ls -l file1 -rw-rw-r-- 2 groot groot 146 Dec 24 11:50 file1</code></p> </li> <li> <p>Run <code>cat file1</code> to see the contents of file1.</p> </li> </ul> </li> <li> <p><code>command &gt;&gt; file1</code></p> <ul> <li><code>&gt;&gt;</code> is same as <code>1&gt;&gt;</code>.</li> <li> <p><code>&gt;&gt;</code> is used to create file if does not exist. If the file exists, it does nothing.</p> <p><code>terminal ~$ &gt;&gt; file1.txt ~$ ls -l file1.txt -rw-rw-r-- 2 groot groot 0 Dec 24 11:30 file1.txt ~$ &gt;&gt; file.txt -rw-rw-r-- 2 groot groot 0 Dec 24 10:14 file.txt</code></p> </li> <li> <p><code>&gt;&gt;</code> is used to append the <code>stdout</code> (<code>1</code>) of <code>command</code> to <code>file1</code>.</p> <p><code>terminal ~$ date &gt;&gt; file1 ~$ cat file1 Saturday 24 December 2022 11:39:38 AM EET ~$ date &gt;&gt; file1 ~$ cat file1 Saturday 24 December 2022 11:39:38 AM EET Saturday 24 December 2022 11:40:45 AM EET</code></p> </li> <li> <p>You can put multiple redirections on same line separated with <code>;</code></p> <p><code>terminal ~$ date &gt;&gt; file2; wc -l /etc/profile &gt;&gt; file2; file /usr/bin/znew &gt;&gt; file2; ~$ cat file2 Saturday 24 December 2022 11:44:57 AM EET 27 /etc/profile /usr/bin/znew: POSIX shell script, ASCII text executable</code></p> </li> <li> <p><code>cat</code> to append to the file using <code>&gt;&gt;</code>.</p> <ul> <li>Exit using <code>&lt;ctrl+D&gt;</code></li> </ul> <p><code>terminal ~$ cat &gt;&gt; file3 Attempt 1 : This is a way to create a new file and append text to it. ~$ cat &gt;&gt; file3 Attempt 2 : This is a way to append text to a file.         We can inspect the content using cat or less command.  ~$ cat file3 Attempt 1 : This is a way to create a new file and append text to it. Attempt 2 : This is a way to append text to a file.         We can inspect the content using cat or less command.</code></p> </li> </ul> </li> <li> <p><code>command 2&gt; file1</code></p> <ul> <li><code>2&gt;</code> is used to overwrite the  <code>file1</code> with <code>stderr</code> of <code>command</code>.</li> <li>New <code>file1</code> will be created if it does not exist.</li> <li><code>0</code> and <code>1</code> will have their default behaviour.<ul> <li><code>/blah</code> does not exist, hence <code>ls</code> will generate an error. <code>terminal ~$ ls /blash 2&gt; error.txt ~$ cat error.txt ls: cannot access '/blash': No such file or directory</code></li> </ul> </li> </ul> </li> <li> <p><code>command &gt; file1 2&gt; file2</code></p> <ul> <li><code>1&gt;</code> or <code>&gt;</code> redirects <code>stdout</code> of <code>command</code> to <code>file1</code>.</li> <li><code>2&gt;</code> redirects <code>stderr</code> of <code>command</code> to <code>file2</code>.</li> <li>This prevents any output to be on the screen.</li> <li>Contents of <code>file1</code> and <code>file2</code> will be overwritten. <code>terminal     ~$ ls $HOME /blah &gt; output.txt 2&gt; error.txt     ~$</code><ul> <li>see the output of both files using <code>cat</code>.</li> </ul> </li> <li>Try the following command and see the output in two files created. <code>bash     ls -R /etc &gt; output.txt 2&gt; error.txt</code></li> </ul> </li> <li> <p><code>command &lt; file1</code></p> <ul> <li><code>&lt;</code> (<code>0&lt;</code>) refers to <code>stdin</code>.</li> <li>Any command expecting input from keyboard can also read input from a file.</li> <li>Using <code>&lt;</code>, <code>command</code> reads input from <code>file1</code> instead of reading the default input stream.</li> <li>All other file descriptors have their default behaviour.<ul> <li><code>wc</code> reads from <code>file1</code></li> <li>understand the difference between <code>wc &lt;file&gt;</code> and <code>wc &lt; &lt;file&gt;</code> <code>terminal ~$ ls -l file1 -rw-rw-r-- 2 sanr sanr 236 Dec 25 07:58 file1 ~$ wc file1     6  43 236 file1 ~$ wc &lt; file1     6  43 236</code></li> </ul> </li> <li>Using <code>&lt;</code>, read (<code>cat</code>) and count lines, words and characters (<code>wc</code>) of the files <code>output.txt</code> and <code>error.txt</code>. </li> </ul> </li> <li> <p><code>command &gt; file1 2&gt;&amp;1</code></p> <ul> <li><code>stdout</code> of  <code>command</code> is redirected to the file <code>file1</code>.</li> <li>Then we have another redirection.<ul> <li><code>stderr</code>, specified by file descriptor <code>2</code>, of <code>command</code> is redirected to <code>stdout</code> using file descriptor <code>1</code>.</li> </ul> </li> <li>as a result <code>file1</code> contains output and error from <code>command</code>.</li> <li>Contents if any in <code>file1</code> will be overwritten. </li> <li>Note that there should be no space in string <code>2&gt;&amp;1</code></li> <li> <p>Run the commands below and see the output.</p> <p><code>bash ls $HOME /blah &gt; file1 2&gt; file1 cat file1</code></p> <ul> <li> <p>For commands above, the standard error is first written to file1 then it is overwritten by standard output.</p> <ul> <li>Now run the commands given below and see the output. <code>terminal ls $HOME /blah &gt; file1 2&gt;&amp;1 cat file1</code></li> </ul> </li> <li> <p>file1 constains both standard error and standard output.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#the-pipe-operator","title":"The pipe operator","text":"<ul> <li> <p><code>command1 | command2</code></p> <ul> <li><code>|</code> is called the pipe operator.</li> <li>This operator redirects the standard output of <code>command1</code> to the standard input of <code>command2</code></li> <li>If <code>command2</code> is expecting any input from keyboard or a file, <code>|</code> makes possible to take it also from <code>command1</code></li> <li>Thus, <code>command2</code> processes output from <code>command1</code> by taking it as input.</li> <li>By default, standard error from both commands go to the screen.</li> <li> <p>As an example let\u2019s count the number of files in <code>/usr/bin</code> directory.</p> <ul> <li>The following code creates <code>file1</code> and then counts. <code>terminal     ~$ ls /usr/bin &gt; file1; wc -l file1     1353 file1</code></li> <li>We can do it more efficiently by using <code>|</code> <code>terminal     ~$ ls /usr/bin | wc -l file1     1353</code></li> </ul> </li> <li> <p>There is no limit on using pipe operator in terms of numbers.</p> </li> <li>Try the command below and get familiarize with this operator<ul> <li>Read the content of <code>/usr/bin</code> directly without writing to a file. <code>bash     ls /usr/bin | less</code> We can combine the pipe operator with file descriptor redirectors.</li> </ul> </li> </ul> </li> <li> <p><code>command1 | command2 &gt; file1</code></p> <ul> <li>The standard output from <code>command1</code> is mapped to standard input of <code>command2</code>. </li> <li>The standard output of <code>command2</code> is written to the file <code>file1</code>.</li> <li>However, standard error from both commands is written to the screen.</li> <li>Example : Count the number of commands in <code>/usr/bin</code> directory and store it to a file in one go. <code>terminal     ~$ ls /usr/bin | wc -l &gt; file1     ~$ cat &lt; file1     1353</code></li> </ul> </li> </ul> <p>What if we don\u2019t want to store the error to a file, but instead discard it? * <code>/dev/null</code>      - It is a character special file.     - It acts as a sink when any output is redirected to it.     - Use: silent and clean scripts.</p> <ul> <li> <p><code>command1 &gt; file1 2&gt; /dev/null</code></p> <ul> <li>The standard output of <code>command</code> is written to the <code>file1</code>.</li> <li> <p>The standard error is redirected to <code>/dev/null</code> using file descriptor <code>2</code>, and it just disappears.</p> </li> <li> <p>Let\u2019s see an example</p> <ul> <li> <p>The code below prints standard error to the screen. <code>terminal ~$ ls $HOME /blah &gt; file1 ls: cannot access '/blah': No such file or directory</code> </p> </li> <li> <p>We can redirect the standard error to <code>/dev/null</code>. <code>terminal ~$ ls $HOME /blah &gt; file1 2&gt; /dev/null ~$</code></p> </li> <li>Inspect the contents of file1 using <code>cat</code> command.</li> <li>Try code below and see the contents of file1.</li> </ul> <p><code>ls -R /etc &gt; file1 2&gt; /dev/null</code></p> </li> </ul> </li> </ul> <p>What if we want to redirect the standard output to file and also display to the screen?</p>"},{"location":"system-commands/notes/Week-3/#tee-command","title":"<code>tee</code> command","text":"<ul> <li><code>tee [-a] file1</code><ul> <li>It reads the standard input and writes it to standard output as well as to the file <code>file1</code>.</li> <li><code>-a</code> option is used to append to <code>file1</code>.</li> <li>It can be used to write to multiple files at a time.</li> <li>Multiple file names can be separated by space.</li> <li>It does not write the error.</li> </ul> </li> <li> <p><code>command1 | tee file1 ...</code></p> <ul> <li> <p>It is used to redirect output from <code>command1</code> to the screen as well as write it to a file <code>file1</code>.</p> <p><code>terminal ~$ ls $HOME | tee file1 Desktop Documents Downloads file1 Music Pictures Public snap Templates Videos</code> + use <code>cat</code> to see the contents of <code>file1</code>.</p> </li> <li> <p>Writing to multiple files.</p> <p><code>terminal ~$ ls $HOME /blah | tee file1 file2 | wc -l ls: cannot access '/blah': No such file or directory 10</code> + Try the above command without <code>wc -l</code> + The content of <code>file1</code> and <code>file2</code> is identical. + This can be inspected using <code>diff</code> command. <code>diff file1 file2</code></p> </li> <li> <p>Handling errors - redirect the output to \u201csink\u201d for a command that raises error.</p> <ul> <li>here <code>ls</code> generates error as <code>/blah</code> file/directory is not found. <code>terminal ~$ ls $HOME /blah 2&gt; /dev/null | tee file1 file2 | wc -l 10</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#diff-command","title":"<code>diff</code> command","text":"<ul> <li><code>diff files</code></li> <li>It is used to compare files line by line.<ul> <li>Counting number of files in home directory and writing the directory contents to <code>file1</code> and <code>file2</code> <code>terminal      ~$ ls $HOME | tee file1 file2 | wc -l     10     ~$ diff file1 file2     ~$</code></li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#software-management","title":"Software Management","text":"<p>Using package management systems.</p>"},{"location":"system-commands/notes/Week-3/#need-for-a-package-manager","title":"Need for a Package Manager","text":"<ul> <li>Tools for installing, updating, removing, managing software.</li> <li>Install new / updated software across network.</li> <li>Package - File look up, both ways.</li> <li>Database of packages on the system including versions.</li> <li>Dependency checking.</li> <li>Signature verification tools.</li> <li>Tools for building packages.</li> </ul>"},{"location":"system-commands/notes/Week-3/#package-types","title":"Package Types","text":"<ul> <li>Package<ul> <li> <p>RPM     Used to manage packages of:                                             </p> <ul> <li> <p>Red Hat Enterprise                                            Derivatives:                                                </p> <ul> <li>CentOS                                                       </li> <li>Fedora                                                                      </li> <li>Oracle Linux                                                         </li> </ul> </li> <li> <p>SUSE Enterprise Linux                                                        Derivatives:                                                              </p> <ul> <li>openSUSE                                                             </li> <li>DEB                                                                                  Used to manage packages of:                                                          </li> </ul> </li> <li>Debian                                                                       Derivatives:                                                       <ul> <li>Ubuntu                                                                 Derivatives:                                                    -Mint                               </li> <li>Knoppix                                                         Run from live CD.                                                  </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Since, we are using Ubuntu OS, we should get familiar with Debian package type.</p>"},{"location":"system-commands/notes/Week-3/#lsb_release-command","title":"<code>lsb_release</code> command","text":"<ul> <li>To check the operating system, use the command below.<ul> <li>Codename is helpful while searching version specific packages. <code>terminal     ~$ lsb_release -a     No LSB modules are available.     Distributor ID: Ubuntu     Description:    Ubuntu 22.04.1 LTS     Release:    22.04     Codename:   jammy</code></li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#architectures","title":"Architectures","text":"<ul> <li>Linux OS is available for a wide variety of architectures, and hence the packages.</li> <li>Package<ul> <li>amd64 | x86_64</li> <li>i386 | x86</li> <li>arm : mobile devices.</li> <li>ppc64el | OpenPower : RISC-IV (Shakti Processor)</li> <li>all | noarch | src : source codes/ pieces of softwares.</li> </ul> </li> <li>It is important to install system compatible package to avoid any risk.</li> <li>But, thankfully package manager takes care of this.</li> <li>Use <code>uname -a</code> to check system architecture.</li> </ul>"},{"location":"system-commands/notes/Week-3/#package-management-tools","title":"Package Management Tools","text":"<ul> <li>Package Type<ul> <li>RPM : Yellowdog Updater Modifier (<code>yum</code>) <ul> <li>Red Hat Package Manager (<code>rpm</code>) : <code>yum</code> internally calls this package to update software.</li> <li>Dandified YUM (<code>dnf</code>) : modified version of <code>yum</code> </li> </ul> </li> <li>DEB <ul> <li><code>synaptic</code> : GUI based</li> <li><code>aptitude</code> : command line based<ul> <li>Advanced Package Tool (<code>apt</code>) is used by both <code>synaptic</code> and <code>aptitude</code> at the backend.<ul> <li><code>dpkg</code> : used by <code>apt</code> at the backend.<ul> <li><code>dpkg-deb</code> : used by <code>dpkg</code> at the backend.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#package-management-in-ubuntu-using-apt","title":"Package Management in Ubuntu Using <code>apt</code>","text":""},{"location":"system-commands/notes/Week-3/#inquiring-package-db","title":"Inquiring Package DB","text":"<ul> <li> <p><code>apt-cache</code> <code>search</code> <code>keyword</code></p> <ul> <li>Search packages for a <code>keyword</code></li> <li> <p>Run the commands below in terminal to see the output.</p> <p><code>bash apt-cache search fortune</code> In the output we are interested in line that starts with <code>fortunes</code> Click to see sample output More on the command <code>fortune</code>.</p> <p><code>bash apt-cache search nmap</code> In the output we are interested in nmap - The Network Mapper line. <code>bash apt-cache search wget</code> In the output we are interested in wget - retrieves files from the web line.</p> </li> </ul> </li> <li> <p><code>apt-cache</code> <code>pkgnames</code></p> <ul> <li>List of all packages installed</li> <li><code>pkgnames</code> is a keyword to list all packages in the system. <code>bash     apt-cache pkgnames | less</code></li> <li>get sorted output using <code>sort</code> command. <code>bash     apt-cache pkgnames | sort | less</code></li> <li>passing search key (nm) to <code>pkgnames</code> to search only for packages which start with nm. <code>bash     apt-cache pkgnames nm</code> </li> <li>Try commands above in terminal.</li> </ul> </li> <li> <p><code>apt-cache</code> <code>show [-a]</code> <code>package</code></p> <ul> <li>Display package records of a <code>package</code></li> <li> <p>To see the details of package <code>nmap</code></p> <p><code>bash apt-cache show nmap</code></p> <ul> <li>Sample Output</li> <li>Filename: pool/universe/n/nmap/nmap_7.91+dfsg1+really7.80+dfsg1-2build1_amd64.deb</li> <li>The text in italic has foramt that signifies special information, that can be seen here</li> <li>package name: nmap</li> <li>varsion: 7.91+dfsg1+really7.80+dfsg1</li> <li>revision: 2build1</li> <li>architecture: amd64</li> <li>The priority of <code>nmap</code> is extra. See Priorities</li> <li>Section: universe/net means that the package comes uder network utility. See Sections<ul> <li>Try commands below in terminal</li> </ul> </li> </ul> <p><code>bash apt-cache show wget</code> <code>bash apt-cache show fortunes</code></p> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#package-names","title":"Package Names","text":"<p>The filenames follow specific format, it includes package name, version, release/revision and architecture separated by some special characters. * Package     - RPM         + Format : <code>package-version-release.architecture.rpm</code>     - DEB         + Format : <code>package_version-revision_architecture.deb</code></p>"},{"location":"system-commands/notes/Week-3/#package-priorities","title":"Package Priorities","text":"<p>The <code>apt-cache show pkgname</code> command also lists the priority of the package. A user can decide about installing a package based on priority. * required     - essential to proper functioning of the system. * important     - provides functionality that enables the system to run well. * standard     - inluded in the standard system installation. * optional     - can omit if you do not have enough storage. * extra     - could conflict with packages with higher priority, has specialized requirements, install only if needed.  e.g. for <code>wget</code>, the priority is standard*, for <code>fortunes</code> the priority is <code>optional</code></p>"},{"location":"system-commands/notes/Week-3/#package-sections","title":"Package Sections","text":"<ul> <li>focal : https://packages.ubuntu.com/focal</li> <li>jammy : https://packages.ubuntu.com/jammy</li> <li>Package section signifies the use case of the package.</li> <li>There are a large number of package sections.</li> <li>e.g. <ul> <li>The package <code>fortunes</code> belongs to section <code>universe/games</code>. </li> <li>package <code>wget</code> belongs to section <code>web</code>.</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#checksums","title":"Checksums","text":"<ul> <li>It is important to know the packages we are installing are authentic.</li> <li>Checksums help in knowing if the package is authentic or not.</li> <li>This is important because while downloading the package (either from official/unofficial source) may get tampered.</li> <li>Even with small change in code, the checksum strings changes drastically.</li> <li>The following commands used to check for diffrent checksums.</li> </ul>"},{"location":"system-commands/notes/Week-3/#md5sum","title":"<code>md5sum</code>","text":"<pre><code>md5sum [filename]\n</code></pre> <ul> <li> <p>It gives 128 bit checksum string irrespective of size of file.</p> <p><code>terminal ~$ md5sum nmap_show.txt 2717ed2e8f6dd4a63a20c0317d695161  nmap_show.txt</code></p> </li> <li> <p>When no input file is given, it reads the standard input (<code>-</code> is the default filename for <code>stdin</code>).</p> <ul> <li>Write text and hit . <p><code>terminal ~$ md5sum Overflow on /dev/null, please empty the bit bucket. e67ef45f18ba7f8a6c339c08af30f72b  - ~$ md5sum Overglow on /dev/null, please empty the bit bucket. ea16952d936440cdddcb1a68cdbb7295  -</code></p>"},{"location":"system-commands/notes/Week-3/#sha1sum","title":"<code>sha1sum</code>","text":"<pre><code>sha1sum [filename]\n</code></pre> <ul> <li>It gives 160 bit SHA1 checksum string.</li> <li> <p>We will read the standard input, on same string given in <code>md5sum</code>.</p> <p><code>terminal ~$ sha1sum Overflow on /dev/null, please empty the bit bucket. 61d7ab21e9961d11640172e3183b86296c01874d  - ~$ sha1sum Overglow on /dev/null, please empty the bit bucket. b52111e02999a26af3ebb2cdef7f0893dbbb92b1  -</code></p> <ul> <li>Try this command with filename on any file you wish.</li> </ul> </li> </ul> <pre><code>sha256sum [filename]\n</code></pre> <ul> <li>It gives 256 bit SHA256 checksum string.</li> <li> <p>We will read the standard input, on same string given in <code>md5sum</code>.</p> <p><code>terminal ~$ sha256sum Overflow on /dev/null, please empty the bit bucket. 27983a23a8319160adc6b4e2cadfac29f4e445e50998e0a5b4888c0becf51ffe  - ~$ sha256sum Overglow on /dev/null, please empty the bit bucket. e2919763cc71cd324d29f96483c7f46eb3d6b64ab17ce3448aaca4da9b2e5b39  -</code></p> <ul> <li>Try this command with filename on any file you wish.</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#sha256sum","title":"<code>sha256sum</code>","text":""},{"location":"system-commands/notes/Week-3/#who-can-install-packages","title":"Who can install packages?","text":"<p>Only administrators called sudoers can install / upgrade / remove packages. * <code>/etc/sudoers</code>     - <code>su</code> : super user     - <code>do</code> : can execute     - This file constains list of sudoers.     - Only sudoers can read this file. <code>terminal         ~$ whoami         guest         ~$ sudo cat /etc/sudoers         [sudo] password for guest:         Sorry, try again.         [sudo] password for guest:         guest is not in the sudoers file. This incident will be reported.</code>         + When we run the command <code>sudo cat /etc/sudoers</code> it asks for password.         + For wrong password, the password is asked again.         + If the passwrod is correct, but the user is not listed in the file, it will notify in and report the login attempt to administrator.         + If <code>$USER</code> is listed in <code>/etc/sudoers</code>, the file content will be dumped on screen for right password.     - The failure if any is recorded in <code>/var/log/auth.log</code> file.     - To open this file you should have super user privilege.     - The file lists timestamps and corresponding session details.</p>"},{"location":"system-commands/notes/Week-3/#which-website-is-used-to-download-packages","title":"Which website is used to download packages?","text":"<p>The details of websites are given in the following hierarchy. * <code>/etc/apt</code> : directory     - <code>sources.list</code> : regular file <code>terminal         /etc/apt$ cat sources.list</code>         + The output is urls for repositories used for installing updates, upgrades and source code.         + It also has comments starting with <code>#</code> symbol.         + The comments describe the url, and it gives information about for what purpose the url is being used.</p> <pre><code>- ` sources.list.d ` : directory / folder\n    + This folder contains files which has information about the repositories of third-party softwares.\n</code></pre>"},{"location":"system-commands/notes/Week-3/#apt-get-and-apt","title":"<code>apt-get</code> and <code>apt</code>","text":""},{"location":"system-commands/notes/Week-3/#updating-and-installing-packages","title":"Updating and Installing Packages","text":"<ul> <li>This command is used to fetch updates and upgrades from repositories listed in <code>sources.list</code> and files in <code>sources.list.d</code>.</li> <li>This command should be run as <code>sudo</code>.</li> <li><code>update</code> : This option is used to fetch the update details.<ul> <li>The details fetched is saved as cache. <code>bash     sudo apt-get update</code>     or <code>bash     sudo apt update</code></li> </ul> </li> <li> <p><code>upgrade</code> : This option is used to upgrade all installed packages.</p> <ul> <li> <p>This option reads the details fetched by <code>apt-get update</code> command.</p> <p><code>bash sudo apt-get upgrade</code> or <code>bash sudo apt upgrade</code></p> </li> <li> <p>This lists how many updates are available and how much data needs to be downloaded.</p> </li> <li>This command asks for comformation to proceed the download.</li> </ul> </li> <li> <p><code>install</code> : It is used to install a package.</p> <ul> <li> <p>To install fortunes package. See fortune command.</p> <p><code>bash sudo apt-get install fortunes</code></p> </li> </ul> </li> <li> <p><code>reinstall</code> : It is used to download and install the new version of the package.</p> <ul> <li> <p>To reinstall fortunes package.</p> <p><code>bash sudo apt-get reinstall fortunes</code></p> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#removing-or-cleaning-up-packages","title":"Removing or Cleaning up Packages","text":"<ul> <li> <p><code>autoremove</code> : Remove packages that were automatically installed to satisfy a dependency and not needed.</p> <p><code>bash sudo apt autoremove</code>  - By removing these packages you can free some space.</p> </li> <li> <p><code>clean</code> : Clean local repository of retrieved packages.</p> <ul> <li><code>apt-get clean</code></li> <li>Usually, we may want to revert back to a particular version of a package, it may be ok to keep the retrieved package files.</li> </ul> </li> <li> <p><code>remove</code> : This option is used to remove a particular package</p> <p><code>bash sudo apt-get remove fortunes fortune-mod</code></p> <ul> <li>This command removes the fortunes package.</li> <li>fortune-mod contains fortune cookies, hence it also needs to be removed.</li> </ul> </li> <li> <p><code>purge</code> : Purge package files from the system.</p> <ul> <li><code>apt-get purge pkgname</code></li> <li>Removes package files and configuration files.</li> <li>Be careful while using this command.</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#dpkg-suite","title":"dpkg suite","text":""},{"location":"system-commands/notes/Week-3/#dpkg","title":"<code>dpkg</code>","text":"<p>Package management in Ubuntu using <code>dpkg</code>. The following filesystem contains text information about packages. * <code>/var/lib/dpkg</code>     - <code>arch</code> : regular file         + Architectures for which packages are installed on the system.     - <code>available</code> : regular file         + Contains all packages and it\u2019s full information.         + <code>apt-cache show nmap</code>      - <code>status</code> : regular file         + Information about the packages whether they are installed or not.     - <code>info</code> : directory / folder          + Set of files for each package.         + files for wget package. <code>terminal         ~$ ls wget*         wget.conffiles  wget.list  wget.md5sums</code>         + <code>wget.conffiles</code> : contains path of configuration file, which is <code>/etc/wgetrc</code>         + <code>wget.list</code> : contains list of files that are copied on the system during installation.         + <code>wget.md5sums</code> : contains md5sum of files used by wget package.         + This md5sum data can be used to check if the file is authentic or not.</p> <ul> <li> <p><code>dpkg -l  pattern</code></p> <ul> <li> <p>List all packages whose names match the pattern.</p> <p><code>bash dpkg -l nmap</code></p> </li> <li> <p>prints name, version, architecture and description of package nmap.</p> </li> <li><code>dpkg -L package</code></li> <li> <p>List installed files that came from package.</p> <p><code>bash dpkg -L nmap</code></p> </li> <li> <p>Prints list of directories and files added to the system and used by nmap package.</p> </li> <li><code>dpkg -s package</code></li> <li> <p>Report the status of package.</p> <p><code>bash dpkg -s nmap</code></p> </li> <li> <p>Prints the status of whether the package nmap is installed or not and other info.</p> </li> <li>The output is similar to <code>apt-cache show</code> command.</li> </ul> </li> <li> <p><code>dpkg -S pattern</code></p> <ul> <li>Search installed packages for a file using pattern.</li> <li> <p>Prints the name of the package that made the particular executable available.</p> <p><code>bash dpkg -S /usr/bin/perl</code></p> </li> <li> <p>Prints the name of the package that the executable <code>/usr/bin/perl</code> belongs to.</p> </li> <li>Perl is scripting language used specifically for text processing using regex.</li> </ul> </li> <li> <p><code>dpkg -i package_version-revision_architecture.deb</code></p> <ul> <li>You can directly install deb package using the command.</li> </ul> </li> <li> <p>By default use package management pointing to a reliable repository.</p> </li> <li>This will take care of compatibility and dependency if any for the package. </li> <li>Uninstalling packages using <code>dpkg</code> is not recommended!</li> <li>Other package management tools: apt, dpkg, snap, docker</li> </ul>"},{"location":"system-commands/notes/Week-3/#dpkg-query","title":"<code>dpkg-query</code>","text":"<p>It is a tool to query the dpkg database. Prints package names and section name to which the package belongs. * <code>dpkg-query -W [package-name-pattern...]</code>     - Show the list of packages</p> <ul> <li> <p><code>dpkg-query -f=format</code></p> <ul> <li>Specify <code>format</code> for the output.</li> <li>Some formats : <code>Section</code>, <code>binary:Package</code></li> <li> <p>Introduce escapes using <code>\\</code>.</p> <p>\u2019 \\n \u2019 : newline, \u2019 \\r \u2019 : carriage return, \u2019 \\t \u2019 : tab.</p> </li> </ul> </li> <li> <p>Examples</p> <ul> <li> <p>Prints name of the section and package of each package.</p> <p><code>bash dpkg-query -W -f=\"${Section} ${binary:Package}\\n\" | less</code></p> </li> <li> <p>Prints name of the section and package of each package in alphabetically sorted order.</p> <p><code>bash dpkg-query -W -f=\"${Section} ${binary:Package}\\n\" | sort | less</code>     - Using <code>grep</code> utility we are printing only those lines which contain the word shells.     - More on <code>grep</code> in next week (Week-4). </p> <p><code>bash dpkg-query -W -f=\"${Section} ${binary:Package}\\n\" | grep shells</code></p> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-3/#games","title":"Games","text":""},{"location":"system-commands/notes/Week-3/#fortune","title":"<code>fortune</code>","text":"<ul> <li><code>fortune</code>: print funny quotes, thoughts (Some quotes may be harsh, but it\u2019s just for fun.).</li> <li>package <code>fortunes</code> has data files containing fortune cookies.</li> </ul> <pre><code>~$ fortune\nAny circuit design must contain at least one part which is obsolete, two parts\nwhich are unobtainable, and three parts which are still under development.\n</code></pre>"},{"location":"system-commands/notes/Week-4/","title":"Pattern Matching","text":""},{"location":"system-commands/notes/Week-4/#posix-standard","title":"POSIX Standard","text":"<p>IEEE 1003.1-2001 IEEE Standard for  IEEE Information Technology - Portable Operating System Interface (POSIX (TM))</p> <p>Ref: https://standards.ieee.org/standard/1003_1-2001.html</p>"},{"location":"system-commands/notes/Week-4/#regex","title":"Regex","text":"<ul> <li>regex is a pattern matching template to filter text.</li> <li>BRE: POSIX Basic Regular Expression engine</li> <li>ERE: POSIX Extended Regular Expression engine</li> </ul>"},{"location":"system-commands/notes/Week-4/#why-learn-regex","title":"Why learn regex?","text":"<ul> <li>Process input from user.</li> <li>Perform string oprations based on pattern.</li> <li>Languages: Java, Perl, Python, Ruby, \u2026</li> <li>Tools: grep, sed, awk</li> <li>Applications: MySQL, PostgreeSQL, \u2026</li> <li>We will focus on grep here.</li> </ul>"},{"location":"system-commands/notes/Week-4/#special-characters-bre-and-ere","title":"Special Characters (BRE and ERE)","text":"<ul> <li>It is a good practice to enclose the pattern within single / double quotes.</li> </ul> Character(s) Description <code>.</code> Any single character except null or newline <code>*</code> Zero or more of preceding character / expression <code>[]</code> Any of the enclosed characters/ class; hyphen (<code>-</code>) indicates character range <code>^</code> Anchor for beginning of line or negation of enclosed characters when used as <code>[^]</code> <code>$</code> Anchor for end of line <code>\\</code> Escape special characters"},{"location":"system-commands/notes/Week-4/#special-characters-bre","title":"Special Characters (BRE)","text":"Character(s) Description <code>\\{n,m\\}</code> Range of occurrences of preceding pattern at least <code>n</code> and utmost <code>m</code> times <code>\\(\\)</code> Grouping of regular expressions"},{"location":"system-commands/notes/Week-4/#special-characters-ere","title":"Special Characters (ERE)","text":"Character(s) Description <code>{n,m}</code> Range of occurrences of preceding pattern at least <code>n</code> and utmost <code>m</code> times <code>()</code> Grouping of regular expressions <code>+</code> One of more of preceding character / expression <code>?</code> Zero of one of preceding character / expression <code>\\|</code> Logical OR over the patterns"},{"location":"system-commands/notes/Week-4/#character-classes","title":"Character Classes","text":"<ul> <li>Character classes follow specific structure, <code>[:class-name:]</code></li> <li>The classes should be used within character enclosure braces as <code>[character-class]</code></li> </ul> Class Represents <code>[[:print:]]</code> Printable <code>[[:alnum:]]</code> Alphanumeric <code>[[:alpha:]]</code> Alphabetic <code>[[:lower:]]</code> Lower case <code>[[:upper:]]</code> Upper case <code>[[:digit:]]</code> Decimal digits <code>[[:blank:]]</code> Space / Tab <code>[[:space:]]</code> Whitespace <code>[[:punct:]]</code> Punctuation <code>[[:xdigit:]]</code> Hexadecimal <code>[[:graph:]]</code> Non-space <code>[[:cntrl:]]</code> Control Characters"},{"location":"system-commands/notes/Week-4/#backreferences","title":"Backreferences","text":"<ul> <li>These are used to match previously matched pattern (subexpression).</li> <li><code>\\(\\)</code> (BRE) or <code>()</code> (ERE) can be used to enclose subexpression that can be used later for backreferencing.</li> <li><code>\\1</code> (reference to the first subexpression) through <code>\\9</code> (referenct to the ninth subexpression)</li> <li><code>\\n</code> matches whatever was matched by nth parenthesized subexpression.</li> <li>A line with two occurrences of hello will be matched using:<ul> <li><code>.*</code> : any arbitrary number of characters.</li> </ul> </li> </ul> <pre><code>\\(hello\\).*\\1\n</code></pre>"},{"location":"system-commands/notes/Week-4/#bre-operator-precedence","title":"BRE Operator Precedence","text":"<ul> <li>highest to lowest in this order.</li> </ul> Class Represents <code>[..]</code> <code>[==]</code> <code>[::]</code> Char collation <code>\\</code> Metachar <code>[ ]</code> Bracket expansion <code>\\(\\)</code> <code>\\n</code> subexpressions and backreferences <code>*</code> <code>\\{ \\}</code> Repetition of preceding regex Concatenation <code>^</code> <code>$</code> Anchors"},{"location":"system-commands/notes/Week-4/#ere-operator-precedence","title":"ERE Operator Precedence","text":"<ul> <li>highest to lowest in this order.</li> </ul> Class Represents <code>[..]</code> <code>[==]</code> <code>[::]</code> Char collation <code>\\</code> Metachar <code>[ ]</code> Bracket expansion <code>( )</code> subexpressions or grouping <code>*</code> <code>+</code> <code>?</code> <code>{ }</code> Repetition of preceding regex Concatenation <code>^</code> <code>$</code> Anchors <code>\\|</code> Alternation"},{"location":"system-commands/notes/Week-4/#grep","title":"<code>grep</code>","text":"<p>Searches for string which matches pattern with each line in the file.</p>"},{"location":"system-commands/notes/Week-4/#default-engine-is-bre","title":"Default engine is BRE","text":"<ul> <li><code>grep 'pattern' filename</code></li> <li><code>command | grep 'pattern'</code></li> </ul>"},{"location":"system-commands/notes/Week-4/#examples","title":"Examples","text":"<p>We will consider names.txt for the explanation. A comment starts with <code>#</code> and continues till the end of the line. * <code>grep 'pattern' &lt;filename&gt;</code> or <code>command | grep 'pattern'</code>     - Looking for a string as a pattern in file filename.     - Print the lines which contain word \u2018Raman\u2019.</p> <pre><code>    ```terminal\n    ~$ grep 'Raman' names.txt\n    ED22B902 Raman Singh\n    ```\n\n- Print for lines which contain pattern 'Anu'.\n\n    ```terminal\n    $ grep 'Anu' names.txt            # lines that contain\n    EE22B905 Anu K. Jain\n    NA22B906 Anupama Shridhar\n    ```\n\n    + ` 'Anu' ` : **Anu** , **Anu**pama\n- Try similar commands in terminal\n\n    ```bash\n    grep 'Sa' names.txt               # lines containing string 'Sa' together. \n    ```\n\n    ```bash\n    grep 'ai' names.txt               # lines containing string 'ai' together. \n    ```\n\n- Piping is very important feature which can be used ` grep ` any command output.\n    + Passing input using pipe to grep and searching the pattern 'ai'.\n\n    ```terminal\n    ~$ cat names.txt | grep 'ai'      # you have seen similar command earlier !\n    ```\n\n- ` . ` to match a single character.\n\n    ```terminal\n    ~$ cat names.txt | grep 'S.n'\n    ED22B902 Raman Singh\n    PH22B907 Vel Sankaran\n    ```\n\n    + ` 'S.n' ` matches 3 letters, 'S' followed any single character and 'n'.\n    + **Sin**gh and **San**karan in example above.\n\n    ```terminal\n    ~$ cat names.txt | grep '.am'     # matches any single character, followed by 'am'\n    MM22B901 Mary Manickam\n    ED22B902 Raman Singh\n    CS22B904 Charles M. Sagayam\n    NA22B906 Anupama Shridhar\n    ```\n\n    + ` '.am' ` : Manic**kam**, **Ram**an, Saga**yam**, Anup**ama**\n\n- ` $ ` to match pattern at/towards the end of line.\n\n    ```terminal\n    ~$ cat names.txt | grep '.am$'    # '.am' pattern at the end of line.\n    MM22B901 Mary Manickam\n    CS22B904 Charles M. Sagayam\n    ```\n\n    + ` '.am$' ` : Manic**kam**, Saga**yam**\n\n- ` \\. ` to match ` . ` literal.\n\n    ```terminal\n    ~$ cat names.txt | grep '\\.'\n    CS22B904 Charles M. Sagayam\n    EE22B905 Anu K. Jain\n    ```\n\n    + ` '\\.' ` : '.' in M. , K.\n\n    ```terminal\n    ~$ cat names.txt | grep '.\\.'     # match an Abbreviation\n    CS22B904 Charles M. Sagayam\n    EE22B905 Anu K. Jain\n    ```\n\n    + ` '.\\.` : **M.**, **K.**\n\n- ` ^ ` to match pattern at/from the beginning.\n\n    ```terminal\n    ~$ cat names.txt | grep '^E'      # line begins with 'E', case-sensitive.\n    ED22B902 Raman Singh\n    EE22B905 Anu K. Jain        \n    ```\n\n    or\n\n    ```terminal\n    ~$ cat names.txt | grep  -i '^e'  # line begins with 'E' or 'e', case-insensitive (-i).\n    ED22B902 Raman Singh\n    EE22B905 Anu K. Jain\n    ```\n\n    + ` -i '^e' ` : **E**D22B902, **E**E22B905\n- Try in a terminal\n\n    ```bash\n    cat names.txt | grep '^M'\n    ```\n\n- ` \\b ` to match word boundary, irrespective of the position of the word.\n\n    ```terminal\n    ~$ cat names.txt | grep 'an\\b'\n    ED22B902 Raman Singh\n    PH22B907 Vel Sankaran\n    ```\n\n    + ` 'an\\b' ` : Ram**an**, Sankar**an** (Word boundary as well as end of line)\n\n- Try in terminal\n\n    ```bash\n    cat names.txt | grep 'am\\b'\n    ```\n\n- ` [] ` matching a character from characters or range of characters enclosed.\n\n    ```terminal\n    $ cat names.txt | grep 'M[ME]'\n    MM22B901 Mary Manickam\n    ME22B903 Umair Ahmad\n    ```\n\n    + Matches 'M' and then 'M' or 'E', i.e. matches 'MM' or 'ME'\n    + ` 'M[ME]' ` : **MM**22B901, **ME**22B903\n\n\n- Try in terminal\n\n    ```bash\n    cat names.txt | grep 'E[ED]'      # matches 'EE' or 'ED'\n    ```\n\n    ```bash\n    cat names.txt | grep '[ME]E'      # matches 'ME' or 'EE'\n    ```\n\n    ```bash\n    ~$ cat names.txt | grep '[aeiou]' # matches vowels.\n    ```\n\n    ```bash\n    ~$ cat names.txt | grep '[aeiou][aeiou]' # matches two vowels side by side.\n    ```\n\n- ` [start-stop] ` Matching any characters specified by range ` start-stop `.\n    + ` [1-4] ` : Matches characters in range 1 to 4\n\n    ```terminal\n    $ cat names.txt | grep 'B90[1-4]'\n    MM22B901 Mary Manickam\n    ED22B902 Raman Singh\n    ME22B903 Umair Ahmad\n    CS22B904 Charles M. Sagayam\n    ```\n\n    + Match 'B90' followed by any numbers in range 1 to 4\n    + ` 'B90[1-4] ' ` : MM22**B901**, ED22**B902**, ME22**B903**, CS22**B904**\n\n\n- Try in terminal\n\n    ```bash\n    cat names.txt | grep 'B90[5-7]'   # match 'B90' followed by any digits from 5 to 7\n    ```\n\n    ```bash\n    cat names.txt | grep 'B90[5-7]'   # match 'B90' followed by any digits from 1 to 9\n    ```\n\n    ```bash\n    cat names.txt | grep '[M-Z][aeiou]'  \n    # match any character from 'M' to 'Z' followed by a vowel\n    ```\n\n- ` [^] ` match negation of the characters.\n\n    ```terminal\n    ~$ cat names.txt | grep 'B90[^5-7]'\n    MM22B901 Mary Manickam\n    ED22B902 Raman Singh\n    ME22B903 Umair Ahmad\n    CS22B904 Charles M. Sagayam\n    ```\n\n    + Match 'B90' followed by digits not in range 5 to 7\n    + ` 'B90[^5-7] ' ` : MM22**B901**, ED22**B902**, ME22**B903**, CS22**B904**\n\n\n- ` .* ` match any number of characters including 0.\n\n    ```terminal\n    ~$ cat names.txt | grep 'S.*[mn]'\n    ED22B902 Raman Singh\n    CS22B904 Charles M. Sagayam\n    PH22B907 Vel Sankaran\n    ```\n\n    + Match 'S', followed by any number of characters ('.*'), then 'm' or 'n'\n    + ` 'S.*[mn]' ` : **Sin**gh, C**S22B904 Charles M. Sagayam**, **Sankaran**\n    + What if we want to match just names and not part of roll number?\n    + We will introduce word boundary before 'S'\n\n    ```terminal\n    ~$ cat names.txt | grep '\\bS.*[mn]'\n    #HIDDEN#\n    ```\n\n    + ` '\\bS.*[mn]' ` : **Sin**gh, **Sagayam**, **Sankaran**\n\n- ` \\{m\\} ` preceding character repeats exactly 'm' times\n\n    ```terminal\n    ~$ cat names.txt | grep 'M\\{2\\}'\n    MM22B901 Mary Manickam\n    ```\n\n    + 'M' repeats exactly twice.\n    + ` 'M\\{2\\}' ` : **MM**22B901\n\n- ` \\{m, n\\} ` preceding character repeats at least 'm' times and at most 'n' times.\n\n    ```terminal\n    ~$ cat names.txt | grep 'E\\{1,2\\}'\n    ED22B902 Raman Singh\n    ME22B903 Umair Ahmad\n    EE22B905 Anu K. Jain\n    ```\n    + 'E' repeates once or twice.\n    + ` 'E\\{1,2\\}' ` : **E**D22B902, M**E**22B903, **EE**22B905\n\n- ` \\{m,\\} ` preceding character repeats at least 'm' times.\n    + Try in terminal\n\n    ```bash\n    cat names.txt | grep 'M\\{1,\\}'    # 'M' repeats at least 1 time.\n    ```\n\n- ` \\{,n\\} ` preceding character repeats at most 'n' times.\n    + Try in terminal\n\n    ```bash\n    cat names.txt | grep 'M\\{,2\\}'    # 'M' repeats at most 2 times.\n    ```\n\n- ` \\(pattern\\) ` grouping 'pattern's and backreferences.\n    + The 'pattern' inside parenthesis can be any valid pattern.\n\n    ```terminal\n    ~$ cat names.txt | grep '\\(ma\\).*\\1'\n    ME22B903 Umair Ahmad\n    ```\n\n    + pattern matches 'ma' (` '\\(ma\\)' `), followed by any number of characters (` '.*' `), followed by 'ma' ( backreferenced with ` '\\1' ` to the first pattern in parenthesis.)\n    + ` '\\(ma\\).*\\1' ` : U**mair Ahma**d\n\n\n    ```terminal\n    ~$ cat names.txt | grep '\\(a.\\)\\{3\\}'\n    CS22B904 Charles M. Sagayam\n    ```\n\n    + 'a' and any character repeated thrice.\n    + ` '\\(a.\\)\\{3\\}' ` : S**agayam**\n    + Change 3 to 2 and see the output.\n\n- Try in terminal\n\n    ```bash\n    cat names.txt | grep '\\(.a\\).*\\1'  \n    ```\n\n    + any character and 'a' (` '\\(.a\\)' ` =&gt; 1), followed by any number of characters (` '.*' `), then any character and 'a' (` '\\1' `).        ......... (1)\n\n    ```bash\n    cat names.txt | grep '\\(a.\\).*\\1'  \n    ```\n\n    + Follows similar interpretation as (1).\n\n    ```bash\n    cat names.txt | grep '\\(a.\\)\\{2,3\\}'\n    ```\n</code></pre>"},{"location":"system-commands/notes/Week-4/#switch-to-use-ere","title":"Switch to use ERE","text":"<ul> <li><code>egrep 'pattern' filename</code></li> <li> <p><code>grep -E 'pattern' filename</code></p> <ul> <li> <p><code>+</code> match preceding pattern once or more number of times.</p> <p><code>terminal ~$ cat names.txt | egrep 'M+' MM22B901 Mary Manickam ME22B903 Umair Ahmad CS22B904 Charles M. Sagayam</code> </p> <ul> <li>Match \u2018M\u2019 at least once. Similar to <code>'\\{1,\\}'</code></li> <li><code>'M+'</code> : MM22B901 Mary Manickam, ME22B903,  M.</li> </ul> <p><code>terminal ~$ cat names.txt | egrep '^M+' MM22B901 Mary Manickam ME22B903 Umair Ahmad</code></p> <ul> <li>Match \u2018M\u2019 at least once at the beginning of the line.</li> <li><code>'^M+'</code> : MM22B901, ME22B903</li> </ul> </li> <li> <p><code>*</code> matches preceding character 0 or more times</p> <p><code>terminal ~$ cat names.txt | egrep '^M*'</code></p> <ul> <li>Match \u2018M\u2019 0 or more number of times at the beginning of the line.</li> <li>It dumps the whole names.txt file</li> </ul> </li> <li> <p>Try in terminal</p> <p><code>bash cat names.txt | egrep 'M*a'</code></p> <ul> <li>Matches string containing, \u2018a\u2019,  \u2018Ma\u2019, \u2018MMa\u2019, \u2018MMMa\u2019.....</li> </ul> <p><code>bash cat names.txt | egrep 'M.*a'</code></p> <ul> <li>Matches \u2018M\u2019 then any number of characters (<code>.*</code>) then \u2018a\u2019.</li> </ul> </li> <li> <p><code>(pattern)</code> match subexpression</p> <p><code>terminal ~$ cat names.txt | egrep '(ma)+' ED22B902 Raman Singh ME22B903 Umair Ahmad NA22B906 Anupama Shridhar</code></p> <ul> <li>matches \u2018ma\u2019 once or more times.</li> <li><code>(ma)+</code> :  Raman, Umair Ahmad, Anupama</li> </ul> </li> <li> <p>Try in terminal</p> <p><code>bash cat names.txt | egrep '(ma)*'</code> + Matches \u2018ma\u2019 0 or more times</p> <p><code>bash cat names.txt | egrep '(ma){2}'</code></p> <ul> <li>Matches \u2018ma\u2019 exactly twice consecutively.</li> </ul> </li> <li> <p><code>(pattern1 | pattern2)</code> match \u2018pattern1\u2019 or \u2018pattern2\u2019</p> <p><code>terminal ~$ cat names.txt | egrep '(ED|ME)' ED22B902 Raman Singh ME22B903 Umair Ahmad</code></p> <ul> <li>Matches \u2018ME\u2019 or \u2018ED\u2019</li> <li><code>'(ED|ME)'</code> : ED22B902, ME22B903 </li> </ul> </li> <li> <p>Try in terminal</p> <p><code>bash cat names.txt | egrep '(Anu|Raman)'</code></p> <ul> <li>Matches string containing \u2018Anu\u2019 or \u2018Raman\u2019</li> </ul> <p><code>bash cat names.txt | egrep '(an|an)$'</code></p> <ul> <li>Matches with \u2018am\u2019 or \u2018an\u2019 at the end of the line.</li> <li>Remove \u2018$\u2019 and try.</li> </ul> </li> <li> <p>It is important to gain flexibility to use <code>grep</code> on any command.</p> </li> <li>We will discuss this for a command that we have seen earlier namely <code>dpkg-query</code></li> <li> <p>Using <code>dpkg-query</code> and <code>egrep</code>      To list package names with 4 characters</p> <p><code>terminal ~$ dpkg-query -W -f'${Section} ${binary:Package}\\n' | egrep ' .{4}$'</code></p> <p>First 5 lines of output</p> <p><code>terminal shells bash admin bolt utils cpio admin cron net cups</code></p> <ul> <li><code>' .{4}$'</code> matches any character 4 times at the end of the line,  before ensures word boundary, and helps not matching the section. <li><code>' .{4}$'</code> is equivalent to <code>' ....$'</code></li> <li><code>' .{4}$'</code>  : ** bash, ** bolt, ** cpio, ** cron, ** cups**</li> <p>To list the package names with 4 characters starting with \u2018g\u2019.</p> <p><code>terminal ~$ dpkg-query -W -f'${Section} ${binary:Package}\\n' | egrep ' g.{3}$' interpreters gawk gnome gdm3 utils gpgv utils grep utils gzip</code></p> <p>To list the package names starting with \u2018g\u2019 and having 1 to 6 characters</p> <p><code>terminal ~$ dpkg-query -W -f'${Section} ${binary:Package}\\n' | egrep ' g.{1,5}$' interpreters gawk gnome gcr devel gdb admin gdisk gnome gdm3</code></p> <p>To list the package names in section \u2018math\u2019</p> <p><code>terminal ~$ dpkg-query -W -f'${Section} ${binary:Package}\\n' | egrep '^math' math bc math dc math galculator math gnome-calculator</code></p> <p>Try in a terminal and figure out the difference with command above</p> <p><code>bash dpkg-query -W -f'${Section} ${binary:Package}\\n' | egrep 'math'</code></p> <ul> <li>Prints packages or sections having \u2018math\u2019 as string </li> </ul> <p>Try in a terminal</p> <p><code>bash dpkg-query -W -f'${Section} ${binary:Package}\\n' | egrep ' kd.*$'</code></p> <ul> <li>Prints package names starting with \u2018kd\u2019</li> </ul>"},{"location":"system-commands/notes/Week-4/#matching-character-sets-with-grep","title":"Matching character sets with <code>grep</code>","text":"<ul> <li>We will consider chartypes.txt file for demonstration.</li> <li> <p>It contains text, special characters as well as control characters (similar file is used in the lecture video).</p> <ul> <li> <p><code>[[:alpha:]]</code> matches alphabetic characters.</p> <p>To match an alphabetic character at the beginning of the line</p> <p><code>terminal ~$ cat chartypes.txt | grep '^[[:alpha:]]' hello : alphabetical stuff : 5g l : start lower end upper : H L : start upper end lower : h</code></p> <ul> <li><code>'^[[:alpha:]]'</code> : hello, l, L</li> </ul> <p>To match an alphabetic character at the end of the line</p> <p><code>terminal ~$ cat chartypes.txt | grep '[[:alpha:]]$' hello : alphabetical stuff : 5g l : start lower end upper : H L : start upper end lower : h</code></p> <ul> <li><code>'[[:alpha:]]$'</code> : 5g, H, h</li> </ul> <p>To match an alphabetic character anywhere in the line + Try in a terminal</p> <p><code>bash cat chartypes.txt | grep '[[:alpha:]]'</code></p> </li> <li> <p><code>[[:alnum:]]</code> matches alpha numeric characters.</p> <p>To match an alpha numeric character at the beginning of the line</p> <p><code>terminal ~$ cat chartypes.txt | grep '^[[:alnum:]]' hello : alphabetical stuff : 5g l : start lower end upper : H L : start upper end lower : h 5g : alpha numeric stuff : 42 42 : solution to everything :</code></p> <ul> <li><code>'^[[:alnum:]]'</code> : hello, l, L, 5g, 42</li> </ul> <p>To match an alpha numeric character at the end of the line</p> <p><code>terminal ~$ cat chartypes.txt | grep '[[:alnum:]]$' hello : alphabetical stuff : 5g l : start lower end upper : H L : start upper end lower : h 5g : alpha numeric stuff : 42</code> + <code>'[[:alnum:]]$'</code> : 5g,  H, h,  42</p> <p>To match an alpha numeric character anywhere in the line + Try in a terminal</p> <p><code>bash cat chartypes.txt | grep '[[:alnum:]]'</code></p> </li> <li> <p><code>[[:digit:]]</code> matches only numbers or digits</p> <p>To match a digit at the beginning of the line</p> <p><code>terminal ~$ cat chartypes.txt | grep '^[[:digit:]]' 5g : alpha numeric stuff : 42 42 : solution to everything :</code></p> <ul> <li><code>'^[[:digit:]]'</code> : 5g, 42</li> </ul> <p>To match a digit at the end of the line</p> <p><code>terminal ~$ cat chartypes.txt | grep '[[:digit:]]$'  5g : alpha numeric stuff : 42</code></p> <ul> <li><code>'[[:digit:]]$'</code> : 42</li> </ul> <p>To match a digit anywhere in the line + Try in a terminal</p> <p><code>bash cat chartypes.txt | grep '[[:digit:]]'</code></p> </li> <li> <p><code>[[:cntrl:]]</code> matches control characters.</p> <p>To match a control character</p> ```terminal ~$ cat chartypes.txt | grep \u2018[[:cntrl:]]\u2019 42 : solution to everything : start with control C and end with dot : . start with blank end with control char : ``` <ul> <li>The first line contains tab character at the end.</li> </ul> <p>To output lines which do not match any control characters. +  <code>-v</code> option negates the selection. + Try in terminal</p> <p><code>bash cat chartypes.txt | grep -v '[[:cntrl:]]'</code></p> </li> <li> <p><code>[[:punct:]]</code> matches punctuation characters.</p> <ul> <li>Punctuation Characters : <code>`~\\!@#$%^&amp;*_-+=[]{}();:,.&lt;&gt;/?\"\"''</code></li> </ul> <p>To match a punctuation character at the beginning of the line </p> <p><code>terminal ~$ cat chartypes.txt | grep '^[[:punct:]]' , : start with comma end with equals : =</code></p> <p>Try the questions below. + Write a command to match a punctuation character at the end of the line. + Write a command to match a punctuation character anywhere in the line.</p> </li> <li> <p><code>[[:lower:]]</code> matches lower case characters</p> <p>To match a lower case character at the beginning of the line</p> <p><code>terminal ~$ cat chartypes.txt | grep '^[[:lower:]]' hello : alphabetical stuff : 5g l : start lower end upper : H</code></p> <ul> <li><code>'^[[:lower:]]'</code> : hello, l</li> </ul> <p>Try the questions below. + Write a command to match a lower case character at the end of the line. + Write a command to match a lower case character anywhere in the line.</p> </li> <li> <p><code>[[:upper:]]</code> matches upper case characters</p> <p>To match an upper case character at the beginning of the line</p> <p><code>terminal ~$ cat chartypes.txt | grep '^[[:upper:]]' L : start upper end lower : h</code></p> <ul> <li><code>'^[[:upper:]]'</code> : L</li> </ul> <p>Try the questions below. + Write a command to match an upper case character at the end of the line. + Write a command to match an upper case character anywhere in the line.</p> </li> <li> <p><code>[[:print:]]</code> matches printable characters</p> <ul> <li>control characters are not printable.</li> </ul> <p>To match a printable character at the end of the line</p> ```terminal ~$ cat chartypes.txt | grep \u2018[[:print:]]$\u2019 hello : alphabetical stuff : 5g l : start lower end upper : H L : start upper end lower : h 5g : alpha numeric stuff : 42 start with control C and end with dot : . , : start with comma end with equals : = ``` <ul> <li><code>'[[:print:]]$'</code> : 5g, H, h, 42, ., = </li> </ul> <p>Try the questions below. + Write a command to match a printable character at the beginning of the line. + Write a command to match a printable character anywhere in the line.</p> </li> <li> <p><code>[[:blank:]]</code> matches blank characters (space / tab)</p> <p>To match a blank character at the end of the line</p> <p><code>terminal ~$ cat chartypes.txt | grep '[[:blank:]]$' 42 : solution to everything :</code></p> <ul> <li>The line has tab at the end.</li> </ul> <p>Try the questions below. + Write a command to match a blank character at the beginning of the line. + Write a command to match a blank character anywhere in the line.</p> </li> <li> <p><code>[[:space:]]</code> matches space</p> <p>To match a space at the beginning of the line</p> ```terminal ~$ cat chartypes.txt | grep \u2018^[[:space:]]\u2019 start with blank end with control char : ``` <p>Try the questions below. + Write a command to match a space at the end of the line. + Write a command to match a space anywhere in the line.</p> </li> <li> <p><code>[[:graph:]]</code> matches non-space characters.</p> <p>To match a non-space characters at the beginning of the line</p> <p><code>terminal ~$ cat chartypes.txt | grep '^[[:graph:]]' hello : alphabetical stuff : 5g l : start lower end upper : H L : start upper end lower : h 5g : alpha numeric stuff : 42 42 : solution to everything :    , : start with comma end with equals : =</code></p> <ul> <li><code>'^[[:graph:]]'</code> : hello, l, L, 5g, 42, ,</li> </ul> <p>Try the questions below. + Write a command to match a space at the end of the line. + Write a command to match a space anywhere in the line.</p> </li> <li> <p><code>^$</code> matches empty lines.     The two anchors together match empty lines.     Use when you want the empty lines in the input to be skipped in the output</p> <p>Try in a terminal</p> <p><code>bash cat chartypes.txt | grep '^$'</code> </p> <p><code>bash cat chartypes.txt | grep -v '^$'</code></p> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-4/#more-examples-on-grep-character-sets","title":"More Examples on <code>grep</code> Character Sets","text":"<ul> <li>We will consider patterns.txt file.</li> <li>It contains some patterns. We will try to match these using <code>grep</code>.</li> <li> <p>Similar file is used in lecture.</p> <ul> <li> <p>To match the line which contains aadhaar number.</p> <p><code>terminal ~$ egrep '[[:digit:]]{12}' patterns.txt Aadhar card number contains 12 digits and can look like 123456781234 for example.</code></p> <ul> <li><code>'[[:digit:]]{12}'</code> : 123456781234</li> </ul> </li> <li> <p>To match the line which contains pincode.</p> <ul> <li>Matching only six digits is not feasible, we will consider word boundary also.</li> </ul> <p><code>terminal ~$ egrep '\\b[[:digit:]]{6}\\b' patterns.txt Pincodes of cities of Bharat contain 6 digits and that of IITM is 600036.</code></p> <ul> <li><code>'\\b[[:digit:]]{6}\\b'</code> : 600036</li> <li>Try without \u2018\\b\u2019 and see the difference in output.</li> </ul> </li> <li> <p>To match the line which contains roll number.</p> <ul> <li> <p>Roll number has a specific pattern, only matching alphanumeric characters will not help. <code>terminal ~$ egrep '\\b[[:alpha:]]{2}[[:digit:]]{2}[[:alpha:]][[:digit:]]{3}\\b' patterns.txt Roll numbers in IIT for regular students are of the pattern MM22B001 where the first two letters correspond to the Department code, 2 digits for the year of joining, then the program code character and then a 3 digit number for their roll number within the class</code></p> </li> <li> <p><code>'\\b[[:alpha:]]{2}'</code> : MM</p> </li> <li><code>'[[:digit:]]{2}'</code>   : 22</li> <li><code>'[[:alpha:]]'</code>      : B</li> <li> <p><code>'[[:digit:]]{3}\\b'</code> : 001</p> </li> <li> <p>Try the command with pattern - <code>'[[:alnum:]]{8}'</code></p> </li> </ul> </li> <li> <p>To match the line that contains URL.</p> <ul> <li>\u201cgithub.com\u201d and \u201chttps://www.github.com\u201d are valid URLs.</li> <li>Notice that the URL contains  dot (\u2018.\u2019)</li> </ul> <p><code>terminal ~$ egrep \"\\b[[:alnum:]]+\\.[[:alnum:]]+\" patterns.txt URLs can be given these days without the protocol like https://www.iitm.ac.in/ They can be given as just github.com for example.</code></p> <ul> <li><code>\"\\b[[:alnum:]]+\\.[[:alnum:]]+\"</code> : www.iitm,  ac.in, github.com</li> </ul> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-4/#cut-command","title":"<code>cut</code> Command","text":"<ul> <li>We have seen <code>head</code> and <code>tail</code> command to select lines.</li> <li>Cut command is used to select columns of lines.</li> <li>We will consider fields.txt file for demonstration.</li> <li>Options :<ul> <li><code>-b</code> : to select bytes.</li> <li><code>-c</code> : to select characters</li> <li><code>-d</code> : to specify delimeter, TAB by default</li> <li><code>-f</code> : to select fields</li> </ul> </li> <li> <p>arguments to <code>-b</code>, <code>-c</code>, <code>-f</code>, M and N are numbers</p> <ul> <li><code>M</code> - select only M\u2019th character</li> <li><code>M-N</code> - select M to N characters.</li> <li><code>M-</code> - select characters M onwards</li> <li> <p><code>-N</code> - select characters upto N</p> </li> <li> <p><code>cut -c</code> to select characters</p> <p>To select first 4 characters (1-4)</p> <p><code>terminal ~$ cut -c 1-4 fields.txt 1234 2345 3456</code></p> <p>Try in a terminal</p> <p><code>bash cut -c 5-8 fields.txt</code> + Selects characters 5 to 8</p> <p>To select characters up to 4 (-4)</p> <p><code>terminal ~$ cut -c -4 fields.txt 1234 2345 3456</code></p> <p>To select characters 8 onwards (8-)</p> <p><code>terminal ~$ cut -c 8- fields.txt llo world,line-1 welcome cmdline,line-2 rse text,line-3</code></p> </li> <li> <p><code>cut -d\"D\" -f</code> to cut and select characters by fields separated by D (delimeter)</p> <p>To select first field using D=\u201d \u201d (space)</p> <p><code>terminal ~$ cut -d \" \" -f 1 fields.txt 1234;hello 234567;welcome 3456;parse</code></p> <p>Try in a terminal</p> <p><code>bash ~$ cut -d \" \" -f 2</code></p> <ul> <li>Selects second half of the field separated by \u201d \u201c</li> </ul> <p>To select first field using D=\u201d;\u201d</p> <p><code>terminal ~$ cut -d \";\" -f 1 fields.txt 1234 234567 3456</code></p> <p>Try in a terminal</p> <p><code>bash cut -d \";\" -f 2 fields.txt</code> + Selects second half of the field separated by \u201c;\u201d.</p> <p>To select second field using D=\u201d,\u201d</p> <p><code>terminal ~$ cut -d \",\" -f 2 fields.txt line-1 line-2 line-3</code></p> <p>Try in a terminal</p> <p><code>bash cut -d \",\" -f 1 fields.txt</code></p> <ul> <li>Selects first half of the field separated by \u201c,\u201d.</li> </ul> </li> <li> <p>Combining <code>cut</code> command twice</p> <p>To select only the text part between fields separated by \u201c;\u201d and \u201c,\u201d + We use piping for this.</p> <p><code>terminal ~$ cat fields.txt | cut -d \";\" -f 2 | cut -d \",\"  -f 1  hello world welcome cmdline parse text</code></p> <p>It is possible to match the similar output using <code>grep</code> + Try in a terminal</p> <p><code>bash cat fields.txt | grep \";.*,\"</code> + Matches patterns like ;hello world, + This pattern can be extracted using sed command</p> </li> <li> <p>Combining <code>cut</code>, <code>head</code> and <code>tail</code> commands     We will pick welcome cmdline text.</p> <p><code>terminal ~$ cat fields.txt | cut -d \";\" -f 2 | cut -d \",\"  -f 1 | head -n 2 | tail -n 1       welcome cmdline</code></p> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-4/#command-line-editors","title":"Command Line Editors","text":"<p>Working with text files in the terminal</p>"},{"location":"system-commands/notes/Week-4/#editors","title":"Editors","text":""},{"location":"system-commands/notes/Week-4/#line-editors","title":"Line Editors","text":"<p>Old editors from the days of Unix. These editors are included by default in Linux or Unix. * ed : oldest known editor * ex : extension to ed editor</p>"},{"location":"system-commands/notes/Week-4/#terminal-editors","title":"Terminal Editors","text":"<ul> <li>pico : It came along with email application pine.<ul> <li>nano : extension to pico editor</li> </ul> </li> <li>vi or vim : most popular and complex editor</li> <li>emacs : alternate to vi editor</li> </ul>"},{"location":"system-commands/notes/Week-4/#gui-editors","title":"GUI Editors","text":"<ul> <li>KDE : Common Desktop Environment<ul> <li>kate</li> <li>kwrite</li> </ul> </li> <li>Gnome<ul> <li>gedit</li> </ul> </li> <li>sublime</li> <li>atom : provides intergration to github (support not available.)</li> <li>brackets : HTML editor</li> </ul>"},{"location":"system-commands/notes/Week-4/#ide-integrated-development-environment","title":"IDE (Integrated Development Environment)","text":"<ul> <li> <p>eclipse</p> </li> <li> <p>Bluefish</p> </li> <li> <p>NetBeans</p> </li> </ul>"},{"location":"system-commands/notes/Week-4/#features","title":"Features","text":"<ul> <li>Scrolling, view modes, current position in file</li> <li>Navigation (char, word, line, pattern)</li> <li>Insert, Replace, Delete</li> <li>Cut-Copy-Paste</li> <li>Search-Replace</li> <li>Language-aware syntax highlighting</li> <li>Key-maps, init scripts, macros</li> <li>Plugins</li> </ul> <p>We will look at ed, nano (pico), vim and emacs editors.</p>"},{"location":"system-commands/notes/Week-4/#ed","title":"ed","text":""},{"location":"system-commands/notes/Week-4/#nano","title":"nano","text":""},{"location":"system-commands/notes/Week-4/#vim","title":"vim","text":""},{"location":"system-commands/notes/Week-4/#emacs","title":"emacs","text":""},{"location":"system-commands/notes/Week-4/#commands","title":"Commands","text":""},{"location":"system-commands/notes/Week-4/#readlink","title":"<code>readlink</code>","text":"<pre><code>readlink -f path\n</code></pre> <ul> <li>It print value of symbolic link or canonical file name.</li> <li> <p>With <code>-f</code> as option it recursively follows the symlink and prints the canonical file name.</p> <p><code>terminal ~$ readlink -f /usr/bin/pico /usr/bin/nano</code></p> </li> </ul>"},{"location":"system-commands/notes/Week-4/#dmesg","title":"<code>dmesg</code>","text":"<pre><code>dmesg\n</code></pre> <ul> <li>It is used to examine or control kernel ring buffer.</li> <li>By default it displays all the messages from kernel ring buffer.</li> </ul>"},{"location":"system-commands/notes/Week-4/ed/","title":"The GNU ed line editor","text":"<p>It is used for editing file line by line. Now a days, we have more advanced editors, it is good to know when it comes to legacy of editors. ed editor commands have very close resemblance with vi editor commands. ed will always be part of system, so it can be used in emergency situations when other tools are not available.</p>"},{"location":"system-commands/notes/Week-4/ed/#ed-ex-commands","title":"ed / ex commands","text":"Description Commands Show the Prompt <code>P</code> Command Format <code>[addr[,addr]]cmd[params]</code> Commands for location <code>2</code> <code>.</code> <code>$</code> <code>%</code> <code>+</code> <code>-</code> <code>,</code> <code>;</code> <code>/RE/</code> Commands for editing <code>f</code> <code>p</code> <code>a</code> <code>c</code> <code>d</code> <code>i</code> <code>j</code> <code>s</code> <code>m</code> <code>u</code> Execute a shell command <code>!command</code> edit a file <code>e filename</code> read file contents into buffer <code>r filename</code> read command output to into buffer <code>r !command</code> write buffer to filename <code>w filename</code> quit <code>q</code>"},{"location":"system-commands/notes/Week-4/ed/#commands-for-location","title":"Commands for Location","text":"<p>These commands are used to move the cursor.</p> Commands Description a number like <code>2</code> refers to second line of file <code>.</code> refers to current line <code>$</code> refers to last line <code>%</code> refers to all the lines <code>+</code> line after the cursor (current line) <code>-</code> line before the cursor (current line) <code>,</code> refers to the buffer holding the file (used with <code>p</code>) or last line in buffer (without <code>p</code>) <code>;</code> refers to current position to end of the file <code>/RE/</code> refers line matched by pattern specified by \u2018RE\u2019"},{"location":"system-commands/notes/Week-4/ed/#commands-for-editing","title":"Commands for Editing","text":"<p>These commands are used for editing.</p> Commands Description <code>f</code> show name of file being edited <code>p</code> print the current line <code>a</code> append at the current line <code>c</code> change the current line <code>d</code> delete the current line <code>i</code> insert line at the current position <code>j</code> join lines <code>s</code> search for regex pattern <code>m</code> move current line to position <code>u</code> undo latest change <ul> <li> <p>We will use test.txt, the file used in lecture, to work with examples.</p> </li> <li> <p>To open file to edit.</p> <p>```terminal ~$ ed test.txt 117</p> <p>```</p> <ul> <li>Here the prompt is available for editing, 117 is size of file test.txt</li> </ul> </li> <li> <p>To see the prompt string, type <code>P</code> and press enter.</p> <ul> <li>The default prompt is <code>*</code>.</li> </ul> <p><code>terminal P *</code></p> </li> <li> <p>To go to line <code>1</code> or last line <code>$</code></p> <p><code>terminal *1 line-1 hello world *$ line-4 end of file *</code></p> </li> <li> <p>To see all the lines try <code>,p</code></p> </li> <li> <p>To go to last line of buffer holding file use <code>,</code></p> </li> <li> <p>To print range of lines</p> <ul> <li>Print lines 2 to 3</li> </ul> <p><code>terminal *2,3p line-2 welcome to line editor line-3 ed is perhaps the oldest editor out there</code></p> </li> <li> <p>To go to line containing a pattern \u2018hello\u2019</p> <p><code>terminal */hello/ line-1 hello world</code></p> </li> <li> <p>To go to next line use <code>+</code></p> <p><code>terminal *+ line-2 welcome to line editor</code></p> </li> <li> <p>To go to previous line use <code>-</code></p> <p><code>terminal *- line-1 hello world</code></p> </li> <li> <p>To print current line till end of buffer using <code>;p</code></p> <ul> <li>After the command, current line is the last line</li> </ul> <p><code>terminal *3 line-3 ed is perhaps the oldest editor out there *;p line-3 ed is perhaps the oldest editor out there line-4 end of file</code></p> </li> <li> <p>To see all lines use <code>%p</code></p> <ul> <li>The cursor is now at the last line.</li> </ul> </li> <li> <p>To run a command using <code>!command</code></p> <p><code>terminal *!date Saturday 31 December 2022 02:17:24 PM EET !</code></p> </li> <li> <p>To read the output of a command into buffer using <code>r !command</code></p> <ul> <li>We will read output of the command <code>date</code></li> <li>After reading, the number of bytes read is printed</li> </ul> <p><code>terminal *r !date 42</code></p> </li> <li> <p>To write the buffer read earlier to the file using <code>w</code></p> <ul> <li>After writing, the new file size is printed. </li> </ul> <p><code>terminal *w 159</code></p> </li> <li> <p>To exit editing press <code>q</code> + enter</p> </li> <li> <p>To delete a line using <code>d</code></p> <ul> <li>To delete current line use <code>.d</code></li> <li>We will move to last line using <code>$</code>, then delete the line, then check the cursor.</li> <li>use <code>w</code> to save the file.</li> </ul> <p><code>terminal ~$ ed test.txt  159 P *$ Saturday 31 December 2022 02:18:59 PM EET *.d *. line-4 end of file *w 117</code></p> </li> <li> <p>To append to a line using  <code>a</code></p> <ul> <li>Exit appending by <code>.</code> + enter</li> </ul> <p><code>terminal *a appended this line after the first line . *1,2p</code></p> <ul> <li>Check using <code>,p</code> if the line has really appended.</li> </ul> </li> <li> <p>To search and replace using <code>s/search/replacement/</code></p> <ul> <li>We will search for appended on line to replace it with Appended on line 2</li> </ul> <p><code>terminal *2 appended this line after the first line *s/appended/Appended/ *</code></p> <ul> <li>Check the replacement using <code>.</code> or <code>2</code>.</li> <li>Search for welcome and replace it with WELCOME on line 3.</li> <li>Use <code>w</code> + enter to save the file.</li> </ul> </li> <li> <p>To see the filename you are working with using <code>f</code></p> <p><code>terminal *f test.txt</code></p> </li> <li> <p><code>p</code> is also used to see the contents of current line</p> <p><code>terminal *p line-4 end of file</code></p> </li> <li> <p>To join two lines using <code>j</code></p> <ul> <li>First we will append a line at the end</li> <li>Then we will join the lines 5 and 6 and print the line</li> </ul> <p><code>terminal *a this line is appended at the end of file . *5 *5,6j *. line-4 end of filethis line is appended at the end of the file</code></p> </li> <li> <p>To move a line to a position using <code>m</code></p> <ul> <li>We will move the last line before the first line.</li> </ul> <p><code>terminal *m0 *</code></p> <ul> <li>Check the status using <code>,p</code></li> </ul> </li> <li> <p>To undo using <code>u</code></p> <ul> <li>This will undo the effect of previous command.</li> </ul> <p><code>terminal *u *</code></p> <ul> <li>Check the status using <code>,p</code>, save the file using <code>w</code> + enter.</li> </ul> </li> <li> <p>To change the line using <code>c</code></p> <ul> <li>Change the last line to \u2018line-5 EOF\u2019</li> </ul> <p><code>terminal *$ *c line-5 EOF . *</code></p> <ul> <li>Use <code>,p</code> to see the changes.</li> </ul> </li> <li> <p>To insert a line above current line use <code>i</code></p> <ul> <li>we will add \u2018line-4 just before end of file\u2019</li> </ul> <p><code>terminal *i line-4 just before end of file . *</code></p> <ul> <li>Use <code>,p</code> to see the changes.</li> </ul> </li> <li> <p>To prefix all lines using <code>s</code></p> <ul> <li><code>.*</code> matches entire line.</li> <li>After the operation every line is prefixed by text \u2018PREFIX \u2018</li> </ul> <p><code>terminal *%s/\\(.*\\)/PREFIX \\1/ *</code></p> <ul> <li>Use <code>,p</code> to see the changes.</li> </ul> </li> <li> <p>To prefix specific lines using <code>s</code></p> <ul> <li>We will replace \u2018PREFIX\u2019 with \u2018prefix\u2019 on lines 3 to 5</li> </ul> <p><code>terminal *3,5s/PREFIX/prefix/ *</code></p> <ul> <li>Use <code>,p</code> to see the changes.</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-4/emacs/","title":"The GNU emacs text editor","text":"<p>Documentation: https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf</p>"},{"location":"system-commands/notes/Week-4/emacs/#opening-emacs","title":"Opening emacs","text":"<ul> <li> <p>GUI</p> <p><code>bash emacs &lt;filename&gt;</code></p> </li> <li> <p>Terminal</p> <p><code>bash emacs -nw &lt;filename&gt;</code></p> </li> </ul> <p>Shortcuts * <code>C-</code> : Control key * <code>M-</code> : Alt key</p>"},{"location":"system-commands/notes/Week-4/emacs/#moving-around","title":"Moving Around","text":"Keys Description <code>C-p</code> Move up one line <code>C-b</code> Move left one char <code>C-f</code> Move right one char <code>C-n</code> Move down one line <code>C-a</code> Goto beginning of current line <code>C-e</code> Goto end of current line <code>C-v</code> Move forward one screen <code>M-&lt;</code> Move to first line of the file <code>M-b</code> Move left to previous word <code>M-f</code> Move right to next word <code>M-&gt;</code> Move to last line of the file <code>M-a</code> Move to beginning of current sentence <code>M-e</code> Move to end of current sentence <code>M-v</code> Move back one screen"},{"location":"system-commands/notes/Week-4/emacs/#exiting-emacs","title":"Exiting emacs","text":"Keys Description <code>C-x C-s</code> Save buffer to file <code>C-z</code> Exit emacs but keep it running <code>C-x C-c</code> Exit emacs and stop it"},{"location":"system-commands/notes/Week-4/emacs/#searching-text","title":"Searching Text","text":"Keys Description <code>C-s</code> Search forward <code>C-r</code> Search backward <code>M-x</code> Replace string"},{"location":"system-commands/notes/Week-4/emacs/#copy-paste","title":"Copy-Paste","text":"Keys Description <code>M-backspace</code> Cut the word before cursor <code>M-d</code> Cut the word after cursor <code>C-k</code> Cut from cursor to end of line <code>M-k</code> Cut from cursor to end of sentence <code>C-y</code> Paste the content at the cursor"},{"location":"system-commands/notes/Week-4/nano/","title":"The GNU nano text editor","text":"<ul> <li>In Ubuntu 20.04 or 22.04 the pico editor is symbolic link for nano editor.</li> <li>This can be checked with <code>readlink</code> command.</li> <li>nano is a simple editor just like notepad.</li> <li>The file opened is directly available for editing unlike vim.</li> </ul>"},{"location":"system-commands/notes/Week-4/nano/#keystrokes-in-nano","title":"Keystrokes in nano","text":"<p>Shortcuts used for keys:</p> <ul> <li>Ctrl key is denoted by <code>^</code>. It can also be entered using Esc key twice.</li> <li>Meta or Alt or Cmd key is denoted by <code>M-</code> </li> </ul> <p>Definitions:</p> <ul> <li>Buffer : file opened for editing</li> <li>macro : a set of actions</li> <li>anchor : a jump point</li> <li>soft wrapping : break word while wrapping</li> <li>hard wrapping : do not break word while wrapping</li> <li>linter : a program which checks programmatic errors (e.g. syntactic errors).</li> </ul>"},{"location":"system-commands/notes/Week-4/nano/#file-handling","title":"File Handling","text":"Keys Description <code>^S</code> Save current file <code>^O</code> <code>F3</code> Offer to write file (\u201cSave as\u201d) to disk <code>^R</code> <code>Ins</code> Insert a file into current one <code>^X</code> <code>F2</code> Close buffer, exit from nano"},{"location":"system-commands/notes/Week-4/nano/#editing","title":"Editing","text":"Keys Description <code>^K</code> <code>F9</code> Cut current line and save in cutbuffer <code>M-6</code> <code>M-^</code> Copy current line and save in cutbuffer <code>^U</code> <code>F10</code> Paste contents of cutbuffer <code>M-T</code> Cut until end of buffer <code>^]</code> Complete current word <code>M-U</code> Undo last action <code>M-E</code> Redo last undone action <code>^J</code> <code>F4</code> Justify the current paragraph <code>M-J</code> Justify the entire file <code>M-:</code> Start/stop recording a macro <code>M-;</code> Run the last recorded macro <code>F12</code> Invoke the spell checker, if available"},{"location":"system-commands/notes/Week-4/nano/#search-and-replace","title":"Search and Replace","text":"Keys Description <code>^Q</code> Start backward search for string <code>^W</code> Start forward search <code>M-Q</code> Find next occurrence backward <code>M-W</code> Find next occurrence forward <code>M-R</code> <code>^\\</code> Start a replacing session <code>M-C</code> Case sensitive when in <code>M-R</code>"},{"location":"system-commands/notes/Week-4/nano/#deletion","title":"Deletion","text":"Keys Description <code>^H</code> <code>Bsp</code> Delete character before cursor <code>^D</code> <code>Del</code> Delete character under cursor <code>M-Bsp</code> <code>Sh-^Del</code> Delete word to the left <code>^Del</code> Delete word to the right <code>M-Del</code> Delete current line"},{"location":"system-commands/notes/Week-4/nano/#information","title":"Information","text":"Keys Description <code>^C</code> <code>F11</code> Report cursor position <code>M-D</code> Report line/word/character count <code>^G</code> Display help text <code>M-C</code> Enable/disable constant cursor position display"},{"location":"system-commands/notes/Week-4/nano/#moving-around","title":"Moving Around","text":"Keys Description <code>^B</code> <code>\u25c2</code> One character backward <code>^F</code> <code>\u25b8</code> One character forward <code>^\u25c2</code> <code>M-Space</code> One word backward <code>^\u25b8</code> <code>^Space</code> One word forward <code>^A</code> <code>Home</code> To start of line <code>^E</code> <code>End</code> To end of line <code>^P</code> <code>\u25b4</code> Go to previous line <code>^N</code> <code>\u25be</code> Go to next line <code>^\u25b4</code> <code>M-7</code> To previous block <code>^\u25be</code> To next block <code>M-(</code> Go to beginning of paragraph; then of previous paragraph <code>M-)</code> Go just beyond end of paragraph; then of next paragraph <code>^Y</code> <code>PgUp</code> One page up <code>^V</code> <code>PgDn</code> One page down <code>M-\\</code> <code>^Home</code> To top of buffer <code>M-/</code> <code>^End</code> To end of buffer"},{"location":"system-commands/notes/Week-4/nano/#special-movement","title":"Special Movement","text":"Keys Description <code>M-G</code> <code>M-^-</code> <code>^7</code> <code>^/</code> Go to specified line and column number <code>M-]</code> Go to complementary bracket <code>M-\u25b4</code> <code>M--</code> Scroll viewport up <code>M-\u25be</code> <code>M-+</code> Scroll viewport down <code>M-PgUp</code> Jump backward to the nearest anchor <code>M-PgDn</code> Jump forward to the nearest anchor <code>M-&lt;</code> <code>M-\u25c2</code> Switch to preceding buffer <code>M-&gt;</code> <code>M-\u25b8</code> Switch to succeeding buffer"},{"location":"system-commands/notes/Week-4/nano/#various","title":"Various","text":"Keys Description <code>M-Z</code> Hidden interface enable/disable <code>^T</code> Execute a function of external command <code>M-B</code> Invoke the linter, if available <code>M-F</code> Invoke a program, if available to format/arrange/manipulate the buffer <code>M-A</code> <code>^6</code> Turn the mark on or off <code>Tab</code> <code>^I</code> <code>M-}</code> Indent current line or  marked region <code>Sh-Tab</code> <code>M-{</code> Unindent current line or  marked region <code>^M</code> <code>Enter</code> Insert a newline at the cursor position <code>M-Ins</code> Place or remove an anchor at the current line <code>M-V</code> Enter next keystroke verbatim <code>M-S</code> Soft wrapping of overlong lines enable/disable <code>M-L</code> Hard wrapping of overlong lines enable/disable <code>M-N</code> <code>M-#</code> Turn line numbers on/off <code>M-P</code> Turn visible whitespace on/off <code>M-X</code> Hide or unhide the help lines <code>M-Y</code> Color syntax highlighting enable/disable <code>M-H</code> Smart home key enable/disable <code>M-I</code> Auto indent enable/disable <code>M-K</code> Cut to end enable/disable <code>M-O</code> Conversion of typed tabs to spaces enable/disable <code>^L</code> Refresh the screen <code>M-M</code> Mouse support enable/disable"},{"location":"system-commands/notes/Week-4/vim/","title":"vi editor","text":"<ul> <li>It is also known as vim.</li> <li>VIM stands for Vi IMproved</li> <li>It is said that vi is the most complex editor with respect to it\u2019s features which it provides through the commands.</li> <li>vim is available for all operating systems.</li> <li>Vim tutorial<ul> <li> <p>The following command can be used to open vim tutorial.</p> <p><code>bash vimtutor</code></p> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-4/vim/#opening-files","title":"Opening Files","text":"<ul> <li> <p>Normal Mode</p> <p><code>bash vi &lt;filename&gt;</code></p> </li> <li> <p>Binary mode</p> <p><code>bash vi -b &lt;filename&gt;</code></p> </li> </ul>"},{"location":"system-commands/notes/Week-4/vim/#modes-in-vi","title":"Modes  in vi","text":"<p>vi has different modes. At the bottom it puts a notification when a mode is enebled.</p>"},{"location":"system-commands/notes/Week-4/vim/#command-mode","title":"command mode","text":"<p>This mode is default mode in vi editor. It eneables running commands such as special keystrokes and opens door to enter ex mode.</p> <ul> <li><code>Esc</code><ul> <li>Escape key is used to enter command mode.</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-4/vim/#ex-mode","title":"ex mode","text":"<p>This mode is available after you enter command mode. It is used to run native or system commands in vi editor.</p> <ul> <li><code>:</code><ul> <li>Used to run ex or ed commands</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-4/vim/#information","title":"Information","text":"Keys Description <code>:f</code> See the file name <code>CTRL+G</code> Print file name and number of lines <code>:X</code> Encrypt file <code>:h</code> Show help"},{"location":"system-commands/notes/Week-4/vim/#exiting-vi","title":"Exiting vi","text":"Keys Description <code>:w</code> write changes made to the disk <code>:x</code> write changes made to the disk and quit <code>:wq</code> write changes made to the disk and quit <code>:q</code> quit (if write out is over) <code>!q</code> ignore chnges and quit"},{"location":"system-commands/notes/Week-4/vim/#moving-around-in-vi","title":"Moving around in vi","text":"Keys Description <code>k</code> move up <code>h</code> move left <code>j</code> move down <code>l</code> move right <pre><code>             k \u25b4 \n\nh \u25c2 Bsp     \"Moving around in vi\"       l \u25b8 Space\n\n            j \u25be Enter\n\n</code></pre>"},{"location":"system-commands/notes/Week-4/vim/#screen-manipulation","title":"Screen Manipulation","text":"Keys Description <code>CTRL+F</code> Scroll forward one screen <code>CTRL+B</code> Scroll backward one screen <code>CTRL+D</code> Scroll down half screen <code>CTRL+U</code> Scroll up half screen <code>CTRL+L</code> Redraw screen <code>CTRL+R</code> Redraw screen removing deleted stuff, redo, pulls the file content towards newest change"},{"location":"system-commands/notes/Week-4/vim/#moving-around","title":"Moving Around","text":"Keys Description <code>0</code> start of the current line <code>$</code> end of the current line <code>w</code> beginning of the word <code>b</code> beginning of preceding word <code>:0</code> first line in the file <code>1G</code> first line in the file <code>gg</code> first line in the file <code>:n</code> nth line in the file <code>nG</code> nth line in the file <code>ngg</code> nth line in the file <code>:$</code> last line in the file <code>G</code> last line in the file"},{"location":"system-commands/notes/Week-4/vim/#changing-text","title":"Changing Text","text":"Keys Description <code>r</code> replace single char under cursor <code>R</code> replace chars from cursor till Esc <code>cw</code> change word under cursor, from current char till Esc <code>cNw</code> change N words from current char till Esc <code>C</code> Change chars in current line till Esc <code>cc</code> change current line till Esc <code>Ncc</code> change next N lines, starting from current, till Esc"},{"location":"system-commands/notes/Week-4/vim/#deleting-text","title":"Deleting Text","text":"Keys Description <code>x</code> delete single char under cursor <code>Nx</code> delete N chars from cursor <code>dw</code> delete one word, from the char under cursor <code>dNw</code> delete N words, from the char under cursor <code>D</code> Delete rest of the line, from the char under cursor <code>dd</code> delete current line <code>Ndd</code> delete next N lines, starting from current"},{"location":"system-commands/notes/Week-4/vim/#copy-paste-text","title":"Copy-Paste Text","text":"Keys Description <code>yy</code> copy (yank) current line to buffer <code>Nyy</code> copy next N lines, including current, into buffer <code>p</code> Paste buffer into text after current line <code>u</code> undo previous action, pulls the file content back to oldest change <ul> <li><code>y+Enter</code> is same as <code>2yy</code></li> </ul>"},{"location":"system-commands/notes/Week-4/vim/#searching-text","title":"Searching Text","text":"Keys Description <code>/string</code> search forward for string <code>?string</code> Search backward for string <code>n</code> move cursor to next occurrence of string <code>N</code> move to previous occurrence of string"},{"location":"system-commands/notes/Week-4/vim/#search-and-replace-text","title":"Search and Replace Text","text":"<ul> <li>Use <code>/</code> to search using regex.</li> </ul> <p>ex mode Syntax * <code>[addr] s/regex/replacement/[flags]</code>     - Search for text matching regex on lines specified by address addr and replace with replacement</p>"},{"location":"system-commands/notes/Week-4/vim/#address-types","title":"Address Types","text":"Keys Description <code>m,n</code> lines from m to n <code>/regex/,n</code> from lines matching /regex/ to n <code>m,/regex/</code> from line m to line matching /regex/ <code>%</code> all lines"},{"location":"system-commands/notes/Week-4/vim/#flags","title":"Flags","text":"Flag Description No Flag only first occurrence <code>c</code> prompt for confirmation <code>g</code> all occurrences"},{"location":"system-commands/notes/Week-4/vim/#enable-disable-line-numbers","title":"Enable-Disable Line Numbers","text":"Keys Description <code>:se nu</code> <code>:set nu</code> set line numbers <code>:se nonu</code> <code>:set nonu</code> unset line numbers"},{"location":"system-commands/notes/Week-4/vim/#insert-mode","title":"insert mode","text":"<p>It is the mode where you start typing text for editing file. You can enter insert mode in multiple ways with different necessities.</p> <ul> <li><code>i</code><ul> <li>Start inserting text before the character under cursor.</li> </ul> </li> <li><code>I</code><ul> <li>Move cursor to the start of the current line.</li> </ul> </li> <li><code>O</code><ul> <li>Insert line above current line.</li> </ul> </li> <li><code>o</code><ul> <li>Append line below current line.</li> </ul> </li> <li><code>a</code><ul> <li>Start appending text after the character under cursor.</li> </ul> </li> <li><code>A</code><ul> <li>Move cursor to the end of current line</li> </ul> </li> </ul> <p>In insert mode you can enter keystrokes verbatim after using <code>CTRL+V</code>.</p>"},{"location":"system-commands/notes/Week-5/","title":"Scripts","text":"<p>Creating your own commands.</p>"},{"location":"system-commands/notes/Week-5/#software-tools-principles","title":"Software Tools Principles","text":"<ul> <li>Do one thing well</li> <li>Process lines of text, not binary</li> <li>Use regular expressions</li> <li>Default to standard I/O</li> <li>Don\u2019t be chatty</li> <li>Generate same output format accepted as input</li> <li>Let omeone else do the hard part</li> <li>Detour to build specialized tools</li> </ul> <p>Ref: Classic Shell Scripting - Arnold Robbins &amp; Nelson H.F. Beebe</p>"},{"location":"system-commands/notes/Week-5/#script-components","title":"Script Components","text":"<pre><code>#! interpreter\n# comments\ncommands\nloops\nvariables\ncase statements\nfunctions\n</code></pre>"},{"location":"system-commands/notes/Week-5/#types-of-scripts","title":"Types of Scripts","text":""},{"location":"system-commands/notes/Week-5/#based-on-languages","title":"Based on Languages","text":"<ul> <li>shell</li> <li>awk</li> <li>sed</li> <li>python</li> <li>ruby</li> <li>perl</li> <li>Other scripting languages</li> </ul>"},{"location":"system-commands/notes/Week-5/#based-on-invocation","title":"Based on invocation","text":"<ul> <li> <p>sourced</p> <ul> <li><code>. scriptname</code> or <code>source scriptname</code></li> <li>execute permission is not needed</li> <li>PID is same as the current shell</li> <li>Commands are executed one after the other</li> <li>Shell environment continues</li> <li>Used to prepare environment</li> </ul> </li> <li> <p>executed</p> <ul> <li><code>./scriptname</code></li> <li>Needs execution permission</li> <li>New process gets created to run script</li> <li>PID is not same as the shell</li> <li>Commands are executed one after the other</li> <li>New environment is lost after return</li> <li>Used to create a new functionality</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#script-location","title":"Script Location","text":"<ul> <li>Use absolute path or relative path while executing script</li> <li>Keep the script in folder listed in <code>$PATH</code></li> <li>Watch out for the sequence of directories in <code>$PATH</code></li> </ul>"},{"location":"system-commands/notes/Week-5/#bash-environment","title":"Bash Environment","text":"<ul> <li> <p>Login shell</p> <ul> <li>Shell that asks you for login credentials, e.g. ssh.</li> <li>Files used in a login shell<ul> <li><code>/etc/profile</code></li> <li><code>~/.bash_profile</code></li> <li><code>~/.bash_login</code></li> <li><code>~/.profile</code></li> </ul> </li> </ul> </li> <li> <p>Non-login shell</p> <ul> <li>Shell that does not ask for login credentials, e.g. normally opening a terminal</li> <li>Files used in a non-login shell<ul> <li><code>/etc/bashrc</code></li> <li><code>~/.bashrc</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#output-from-shell-scripts","title":"Output from Shell Scripts","text":"<p>The following commands can be used for output.</p> <ul> <li> <p><code>echo</code></p> <ul> <li>simple</li> <li>terminates with a newline if <code>-n</code> option not given.</li> <li><code>echo My home is $HOME</code></li> </ul> </li> <li> <p><code>printf</code></p> <ul> <li>supports format specifiers like in C.</li> <li><code>printf \"My home is %s\\n\" $HOME</code></li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#input-to-shell-scripts","title":"Input to Shell Scripts","text":"<ul> <li><code>read var</code><ul> <li>String read from command line is stored in <code>$var</code></li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#shell-script-arguments","title":"Shell Script Arguments","text":"<p><code>./myscript.sh -l arg2 -v arg4</code></p> <ul> <li><code>$0</code> - name of the shell program, <code>myscript.sh</code></li> <li><code>$#</code> - number of arguments passed, 4</li> <li><code>$1</code> or <code>${1}</code> - first argument, <code>-l</code></li> <li><code>${11}</code> - eleventh argument</li> <li><code>$*</code> or <code>$@</code> - all arguments at once, <code>-l arg2 -v arg4</code></li> <li><code>\"$*\"</code> - all arguments as a single string, \u201c-l arg2 -v arg4\u201d</li> <li><code>\"$@\"</code> - all arguments as a separate strings, \u201c-l\u201d \u201carg2\u201d \u201c-v\u201d \u201carg4\u201d</li> <li>example script : s1.sh</li> </ul>"},{"location":"system-commands/notes/Week-5/#command-substitution","title":"Command Substitution","text":"<pre><code>var=`command`\n\nvar=$(command)\n</code></pre> <ul> <li><code>command</code> is executed and the output is substituted.</li> <li>Here, the variable <code>var</code> will be assigned with that output</li> </ul>"},{"location":"system-commands/notes/Week-5/#conditions","title":"Conditions","text":"<p>While writing scripts we use conditional statements or loops, hence it is important to know the syntax. Bash uses a wide variety of conditions. These conditions can be checked directly on the command line.</p> <ul> <li> <p>Use <code>! condition</code> for negation.</p> </li> <li> <p><code>test expression</code></p> <ul> <li><code>test</code> evaluates <code>expression</code> to true or false.</li> <li>It can be used to check for file types, integer and string comparisons.</li> <li>e.g. <code>test -e file</code> check if <code>file</code> exists.</li> </ul> </li> <li> <p><code>[ expression ]</code></p> <ul> <li>this is other way to use <code>test</code> expressions.</li> <li>Command line special characters needs to be escaped.</li> <li>e.g. <code>[ -e file ]</code> check if <code>file</code> exists.</li> </ul> </li> <li> <p><code>[[ expression ]]</code></p> <ul> <li>supports expressions supported by <code>test</code> command</li> <li>It also helps to evaluate regular expressions.</li> <li>e.g. <code>[[ $var == 5.* ]]</code></li> </ul> </li> <li> <p><code>(( expression ))</code></p> <ul> <li><code>expression</code> is any complex conditional arithmetic expression.</li> <li>only integers supported.</li> <li>e.g. <code>(( $v ** 2 &gt; 10 ))</code></li> </ul> </li> <li> <p><code>command</code></p> <ul> <li>If the command is successful, conditional statement is executed.</li> <li>e.g. <code>wc -l file</code></li> </ul> </li> <li> <p>pipeline</p> <ul> <li>If the exit status of pipelined commands is <code>0</code>, then the conditional statement is executed.</li> <li>e.g. <code>who | grep \"joy\" &gt; /dev/null</code></li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#types-of-expressions","title":"Types of Expressions","text":"<p>The expressions can have one operand ( unary ) or 2 operands (binary) * string comparisons * numeric comparisons * file comparision</p>"},{"location":"system-commands/notes/Week-5/#test","title":"<code>test</code>","text":"<ul> <li>Check file type and compare values.</li> <li>Without expression, defaults to false.</li> <li>You can combile multiple expressions using <code>-a</code> ( logical AND ) or <code>-r</code> ( logical OR ) ( Not supported by <code>[[ ]]</code>)</li> </ul>"},{"location":"system-commands/notes/Week-5/#test-numeric-comparisons","title":"<code>test</code> numeric comparisons","text":"expression description <code>$n1 -eq $n2</code> Check if n1 is equal to n2 <code>$n1 -ge $n2</code> Check if n1 is greater than or equal to n2 <code>$n1 -gt $n2</code> Check if n1 is greater than n2 <code>$n1 -le $n2</code> Check if n1 is less than or equalt to n2 <code>$n1 -lt $n2</code> Check if n1 is less than n2 <code>$n1 -ne $n2</code> Check if n1 is not equal to n2"},{"location":"system-commands/notes/Week-5/#test-string-comparisons","title":"<code>test</code> string comparisons","text":"expression description <code>$str1 = $str2</code> Check if str1 is same as str2 <code>$str1 != $str2</code> Check if str1 is not same as str2 <code>$str1 &lt; $str2</code> Check if str1 less than str2 <code>$str1 &gt; $str2</code> Check if str1 greater than str2 <code>-n $str</code> Check if str has length greater than zero <code>-z $str</code> Check if str has length zero"},{"location":"system-commands/notes/Week-5/#test-unary-file-comparisons","title":"<code>test</code> unary file comparisons","text":"expression description <code>-e file</code> Check if file exists <code>-d file</code> Check if file exists and is a directory <code>-b file</code> Check file exists and is block special <code>-c file</code> Check file exists and is character special <code>-f file</code> Check if file exists and is a regular file <code>-h file</code> Check file exists and is symbolic link ( also <code>-L</code> can be used) <code>-p file</code> Check if file exists and is a named pipe <code>-S file</code> Check if file exists and is a socket <code>-r file</code> Check if file exists and is readable <code>-w file</code> Check if file exists and is writable <code>-x file</code> Check if file exists and is executable <code>-s file</code> Check if file exists and is not empty <code>-O file</code> Check if file exists and is owened by current user <code>-G file</code> Check if file exists and default group is same as that of current user"},{"location":"system-commands/notes/Week-5/#test-binary-file-comparisons","title":"<code>test</code> binary file comparisons","text":"<ul> <li>Check files based on modification date.</li> </ul> expression description <code>file1 -nt file2</code> Check if file1 is newer than file2 <code>file1 -ot file2</code> Check if file1 is older than file2"},{"location":"system-commands/notes/Week-5/#debugging","title":"Debugging","text":"<pre><code>set -x\n./myscript.sh\n</code></pre> <pre><code>bash -x ./myscript.sh\n</code></pre> <ul> <li>Print the command before executing it.</li> <li>Place <code>set -x</code> inside the script.</li> </ul>"},{"location":"system-commands/notes/Week-5/#combining-conditions","title":"Combining conditions","text":"<ul> <li> <p>Using <code>&amp;&amp;</code> (logical AND operator)</p> <p><code>bash [ $a -gt 3 ] &amp;&amp; [ $a -lt 7 ]</code> </p> </li> <li> <p>Using <code>||</code> (logical OR operator)</p> <p><code>bash [ $a -le 3 ] || [ $a -ge 7 ]</code></p> </li> <li> <p>Example Script : </p> <ul> <li>condition-examples.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#shell-arithmetic","title":"Shell Arithmetic","text":"<ul> <li> <p><code>let</code> <code>bash     let a=$1+5  # no spaces around operators = and +      # or     let \"a = $1 + 5\"</code></p> </li> <li> <p><code>expr</code></p> <p>```bash expr $a + 20</p> </li> <li> <p><code>$[ expression ]</code></p> <p><code>bash b=$[ $a + 10 ]</code></p> </li> <li> <p><code>$(( expression ))</code></p> <p><code>bash b=$(( $a + 10 )) (( b++ )) # increment b by 1</code></p> </li> <li> <p>Example Scripts </p> <ul> <li>arithmetic-example-1.sh     Try with different arguments, numeric or string</li> <li>expr-examples.sh      (also demonstrates <code>set -x</code> )</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#or","title":"or","text":"<p>expr \u201c$a + 20\u201d</p>"},{"location":"system-commands/notes/Week-5/#or_1","title":"or","text":"<p>b=$( expr $a + 20 ) ```</p>"},{"location":"system-commands/notes/Week-5/#bc","title":"<code>bc</code>","text":""},{"location":"system-commands/notes/Week-5/#expr-command-operators","title":"<code>expr</code> command operators","text":"<ul> <li>Escape command line special characters.</li> </ul> expression Description <code>a + b</code> Return arithmetic sum of a and b <code>a - b</code> Return arithmetic difference of a and b <code>a * b</code> Return arithmetic product of a and b <code>a / b</code> Return arithmetic quotient of a divided by b <code>a % b</code> Return arithmetic remainder of a divided by b <code>a &gt; b</code> Return 1 if a greater than b; else return 0 <code>a &gt;= b</code> Return 1 if a greater than or equal to b; else return 0 <code>a &lt; b</code> Return 1 if a less than b; else return 0 <code>a &lt;= b</code> Return 1 if a less than or equal to b; else return 0 <code>a = b</code> Return 1 if a equals b; else return 0 <code>a \\| b</code> Return a if neither argument is null or 0; else return b <code>a &amp; b</code> Return a if neither argument is null or 0; else return 0 <code>a != b</code> Return 1 if a is not equal to b; else return 0 <code>str : reg</code> Return the position upto anchored pattern match with BRE str <code>match str reg</code> Return the pattern match if reg matches pattern in str <code>substr str n m</code> Return the substring m chars in length starting at position n <code>index str chars</code> Return position in str where any one of chars is found first&lt;; else return 0 <code>length str</code> Return numeric length of string str <code>+ token</code> Interpret token as string even if it\u2019s a keyword <code>(exprn)</code> Return the value of expression exprn"},{"location":"system-commands/notes/Week-5/#heredoc-feature","title":"Heredoc Feature","text":"<ul> <li>A here document is used to redirect input into an interactive shell script or program.</li> <li>Using here document it is possible to supply input and to run a shell script from another program without user interaction.</li> <li> <p>Thus, the input is here as opposed to somwhere else, hence the name.</p> <p><code>bash program_name &lt;&lt; LABEL program_input1 program_input2 ... program_input# LABEL</code></p> <ul> <li>A <code>LABEL</code> can be anything.</li> </ul> <p>or</p> <p><code>bash program_name &lt;&lt;- LABEL     program_input1     program_input2     ...     program_input#     LABEL</code></p> <ul> <li>A hyphen tells to ignore leading tabs.</li> </ul> </li> <li> <p>Example Scripts</p> <ul> <li>heredoc-example-1.sh</li> <li>heredoc-example-2.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#shell-programming","title":"Shell Programming","text":""},{"location":"system-commands/notes/Week-5/#control-structures","title":"Control Structures","text":""},{"location":"system-commands/notes/Week-5/#ifthen-statement","title":"if\u2026then statement","text":"<pre><code>if condition\nthen\n    commands\nfi\n</code></pre> <pre><code>if condition; then\n    commands\nfi\n</code></pre> <ul> <li><code>commands</code> are exectuted only if <code>condition</code> is true.</li> <li>Example Scripts<ul> <li>The file s1.sh can be used to explore some basics and if statement. </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#ifthenelse-statement","title":"if\u2026then\u2026else statement","text":"<pre><code>if condition\nthen\n    commands\nelse\n    commands\nfi\n</code></pre>"},{"location":"system-commands/notes/Week-5/#ifthenelifelse-statement","title":"if\u2026then\u2026elif\u2026(else) statement","text":"<pre><code>if condition_1\nthen\n    commands\nelif condition_2\nthen\n    commands\n.\n.\n.\nelif condition_#\nthen\n    commands\nelse        # optional\n    commands\nfi\n</code></pre> <ul> <li>If a condition fails, the program moves to next elif block, as long as a condition becomes true.</li> <li>else block is optional.</li> <li>Example Scripts<ul> <li>if-elif-else-example.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#case-statement","title":"case statement","text":"<pre><code>case var in\npattern1)\n    commands\n    ;;\npattern2)\n    commands\n    ;;\nesac\n</code></pre> <p>or </p> <pre><code>case $var in\n    op1)\n        commandset1;;\n    op2 | op3)      # | is for OR.\n        commandset2;;\n    op4 | op5 | op6)\n        commandset3;;\n    *)      # default\n        commandset4;;\nesac\n</code></pre> <ul> <li><code>commands</code> are executed each <code>pattern</code> matched for <code>var</code> in the options.</li> <li><code>*)</code> is the default statement, which can match any value of <code>$var</code> not matched earlier.</li> <li>Example Scripts<ul> <li>case-example.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#forin-loop","title":"for\u2026in loop","text":"<pre><code>for var in list\ndo\n    commands\ndone\n</code></pre> <ul> <li><code>commands</code> are executed once for each item in the <code>list</code></li> <li>space is the field delimiter</li> <li>set <code>IFS</code> (Internal Field Separator) environment variable if required.</li> <li>Example Scripts<ul> <li>s21.sh</li> <li>s22.sh to better understand for loop.</li> <li>Setting <code>IFS</code> - path-example.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#c-style-for-loop","title":"C style for loop","text":"<ul> <li> <p>One variable</p> <p><code>bash begin=1 finish=10 for (( a = $begin; a &lt; $finish; a++ )) do     echo $a done</code></p> </li> <li> <p>Two variables</p> <p><code>bash begin1=1 begin2=10 finish=10 for (( a=$begin1, b=$begin2; a &lt; $finish; a++, b-- )) do     echo $a $b done</code></p> <ul> <li>Note: Only one condition to close the for loop.</li> </ul> </li> <li> <p>Example Scripts</p> <ul> <li>One variable : c-for-loop-example-1.sh</li> <li>Two variables : c-for-loop-example-2.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#while-loop","title":"while loop","text":"<pre><code>while condition\ndo\n    commands\ndone\n</code></pre> <ul> <li><code>commands</code> are executed only if <code>condition</code> is true.</li> </ul>"},{"location":"system-commands/notes/Week-5/#until-loop","title":"until loop","text":"<pre><code>until condition\ndo\n    commands\ndone\n</code></pre> <ul> <li><code>commands</code> are executed only if <code>condition</code> returns false.</li> </ul>"},{"location":"system-commands/notes/Week-5/#processing-output-of-a-loop","title":"Processing Output of a Loop","text":"<ul> <li>The output of any loop can be saved to a file using <code>&gt; filename</code> directive succeeding <code>done</code> </li> <li> <p>The file can be then used for further processing.</p> <p><code>bash filename=tmp.$$ begin=1 finish=10 for (( a = $begin; a &lt; $finish; a++ )) do     echo $a done &gt; $filename</code></p> <ul> <li>Note : Output of the loop is redirected to the tmp file</li> </ul> </li> <li> <p>Example Script</p> <ul> <li>loop-output.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#using-break","title":"Using <code>break</code>","text":"<p><code>break</code> is used to exit the loop halting further iteration.</p> <pre><code>while condition\ndo\n    commands\n    if condition_b\n    then\n        break   # break out of inner loop\n    fi\ndone\n</code></pre> <ul> <li>Example Script<ul> <li>break-example-1.sh</li> </ul> </li> </ul> <pre><code>while condition_outer\ndo\n    while condition_inner\n    do\n        commands\n        if condition_b\n        then\n            break 2     # break out of outer loop\n        fi\n    done\ndone\n</code></pre> <ul> <li>Example Script<ul> <li>break-example-2.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#using-continue","title":"Using continue","text":"<p><code>continue</code> is used to skip an iteration and go to next iteration.</p> <pre><code>while condition\ndo\n    commands\n    if condition\n    then\n        continue\n    fi\ndone\n</code></pre> <ul> <li>Example Script<ul> <li>continue-example.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#using-shift","title":"Using <code>shift</code>","text":"<ul> <li><code>shift</code> will shift the command line arguments by one to the left, except <code>$0</code>.</li> <li>As the arguments are shifted, they are lost and can not be accessed later.</li> </ul> <pre><code>i=1\nwhile [ -n \"$1\" ]\ndo\n    echo argument $i is $1\n    shift\n    (( i++ ))\ndone\n</code></pre> <ul> <li>Example Script<ul> <li>shift-example.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#functions","title":"Functions","text":"<p>definition</p> <pre><code>myfunction()\n{\n    commands\n}\n</code></pre> <p>or </p> <pre><code>function myfunction\n{\n    commands\n}\n</code></pre> <p>call </p> <pre><code>myfunction\n</code></pre> <ul> <li><code>commands</code> are executed each time <code>myfunction</code> is called.</li> <li>Definitions must be before calls.</li> <li>Libraries needs be sourced. </li> <li>Example Script<ul> <li>function-example.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#exec","title":"<code>exec</code>","text":"<pre><code>exec ./my-executable --my-options --my-args\n</code></pre> <ul> <li>To replace shell with a new program or to change i/o settings</li> <li>If new program is launched successfully, it will not return control to the shell</li> <li>If new program fails to launch, the shell continues   </li> <li>Example Script<ul> <li>exec-example.sh </li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#eval","title":"<code>eval</code>","text":"<pre><code>eval my-arg\n</code></pre> <ul> <li>Execute argument as a shell command</li> <li>Combines arguments into a single string</li> <li>Returns control to the shell with exit status</li> <li>WARNING: As a security practice to avoid evaluation of user input strings</li> <li>Example Script<ul> <li>eval-example.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#getopts","title":"<code>getopts</code>","text":"<ul> <li> <p>It is a command to parse positional parameters to scripts as options.</p> <p><code>bash getopts OPTSTRING NAME [arg...]</code></p> </li> <li> <p><code>OPTSTRING</code> has option letters to be recognized.</p> </li> <li>If option letter follows <code>:</code> character, it requires an argument which must follow the letter and should be separated by white space.</li> <li>Each time <code>getopts</code> is called, the next option is stored in shell variable <code>NAME</code>, and the index of the next argument to be procesed in <code>OPTIND</code></li> <li><code>OPTIND</code> is initialized to 1 each time the shell script is invoked.</li> <li>If option requires an argument, it is stored in shell variable <code>OPTARG</code></li> <li><code>:</code> as firstcharacter of <code>OPTSTRING</code> suppresses error.</li> <li><code>OPTERR</code> switches errors on or off.</li> <li><code>OPTERR=0</code> errors off even without <code>:</code> as first character of <code>OPTSTRING</code></li> <li>By default <code>OPTERR=1</code> means errors on.</li> <li>Example Script<ul> <li>getopts-example.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#select","title":"<code>select</code>","text":"<ul> <li>Select words from a list and execute commands. </li> <li> <p>It\u2019s a simple text menu.</p> <p><code>bash select NAME [in WORDS ... ;] do COMMANDS; done</code></p> <p><code>bash select x in 1 2 3 q; do echo $x; if [ \"$x\" = \"q\" ]; then break; fi; done</code></p> </li> <li> <p>Example Script</p> <ul> <li>select-example.sh</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-5/#security-tips","title":"Security Tips","text":"<ul> <li>Do not give set uid permission to the scripts.</li> <li>Make sure that processing user input is safe.</li> </ul>"},{"location":"system-commands/notes/Week-6/","title":"Knowing your Hardware","text":""},{"location":"system-commands/notes/Week-6/#hardware-items","title":"Hardware Items","text":"<ul> <li>CPU</li> <li>Storage and Partitions</li> <li>Graphics Card</li> <li>Memory Modules</li> <li>Battery and Status</li> <li>Network devices and configuration</li> </ul>"},{"location":"system-commands/notes/Week-6/#required-packages","title":"Required Packages","text":"<p>The following packages are required to explore the hardware</p> clinfo coreutils dmidecode fdisk hardinfo hdparm hwinfo lshw memtester net-tools pciutils procps sysstat upower util-linux"},{"location":"system-commands/notes/Week-6/#hwinfo","title":"<code>hwinfo</code>","text":"<ul> <li>It is used to probe for the hardware present in the system.</li> <li>You can probe for a specific hardware and get information about it.</li> <li>For this <code>--&lt;HARDWARE_ITEM&gt;</code> option is used, i.e. probe for a particular HARDWARE_ITEM.</li> <li>Available hardware items list can be found using <code>man hwinfo</code> command.</li> <li>A few are</li> </ul> <p>all, arch, bluetooth, memory, scanner, printer, mouse </p> <pre><code>hwinfo\n</code></pre> <ul> <li> <p>Output is roughly equivalent to <code>hwinfo --all --log=-</code>.</p> </li> <li> <p>Task :</p> <ul> <li>Run the <code>hwinfo</code> command and store output to a file. Read the using <code>less</code>.</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-6/#lshw","title":"<code>lshw</code>","text":"<ul> <li> <p>It is used to get detailed information on the hardware configuration of the machine.</p> </li> <li> <p>It can report exact memory configuration, firmware  version,  mainboard configuration,  CPU  version  and  speed,  cache configuration, bus speed, etc</p> </li> </ul> <pre><code>lshw\n</code></pre> <ul> <li>To get information about specific hardware.<ul> <li><code>lshw -c &lt;HARDWARE&gt;</code></li> </ul> </li> </ul> <pre><code>lshw -c display\n</code></pre> <ul> <li>Task:<ul> <li>Print information about <code>memory</code>.</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-6/#proccpuinfo","title":"<code>/proc/cpuinfo</code>","text":"<ul> <li>This filesystem contains information about the CPU.</li> <li>in file<ul> <li>flags: Capabilities of the CPU</li> <li>cache: How well the machine performs the computation?</li> </ul> </li> </ul> <pre><code>cat /proc/cpuinfo\n</code></pre>"},{"location":"system-commands/notes/Week-6/#procpartitions","title":"<code>/proc/partitions</code>","text":"<ul> <li>This filesystem has the partition information.</li> <li>loop devices usually are there for snap packages.</li> </ul> <pre><code>cat /proc/partitions\n</code></pre>"},{"location":"system-commands/notes/Week-6/#lsblk","title":"<code>lsblk</code>","text":"<ul> <li>It lists information about all available or the specified block devices. </li> <li>The <code>lsblk</code> command reads the <code>sysfs</code> filesystem and <code>udev db</code> to gather information.</li> <li>If <code>udev db</code> is absent, it gathers information from LABELs, UUIDs and filesystem types from the block device (<code>su</code> required).</li> </ul> <pre><code>lsblk -o NAME,SIZE\n</code></pre> <ul> <li><code>-o</code> or <code>--output</code> is used to gather  only <code>NAME</code> and <code>SIZE</code> of the block device.</li> </ul>"},{"location":"system-commands/notes/Week-6/#lspci","title":"<code>lspci</code>","text":"<ul> <li>It lists information about PCI (Peripheral Component Interconnect, a type of expansion slot on motherboard) buses and devices connected to them.</li> </ul> <pre><code>lspci\n</code></pre>"},{"location":"system-commands/notes/Week-6/#free","title":"<code>free</code>","text":"<ul> <li>Display amount of free and used memory in the system.</li> </ul> <pre><code>free -h\n</code></pre> <ul> <li><code>-h</code> : human-readable</li> </ul>"},{"location":"system-commands/notes/Week-6/#dmidecode","title":"<code>dmidecode</code>","text":"<ul> <li>low level command, <code>su</code> required.</li> <li>The tool is used for dumping   a  computer\u2019s DMI (some  say  SMBIOS) table contents in a human-readable    format.</li> </ul> <pre><code>dmidecode -type memory\n</code></pre> <ul> <li>Task:<ul> <li>Explore the <code>man</code> page to know more about <code>--type</code> keyword arguments</li> </ul> </li> </ul>"},{"location":"system-commands/notes/Week-6/#hardinfo","title":"<code>hardinfo</code>","text":"<ul> <li>A GUI based utility to display hardware information.</li> </ul> <pre><code>hardinfo\n</code></pre>"},{"location":"system-commands/notes/Week-6/#clinfo","title":"<code>clinfo</code>","text":"<ul> <li>Prints the information about graphics card.</li> </ul> <pre><code>clinfo\n</code></pre>"},{"location":"system-commands/notes/Week-6/#upower","title":"<code>upower</code>","text":"<ul> <li>It\u2019s a tool used to display battery status.</li> <li>It is based on UPower daemon.</li> </ul> <pre><code>upower -e   # lists all the battery devices.\n</code></pre> <ul> <li>To explore the ITEM in the above list use the syntax below.</li> </ul> <pre><code>upower -i &lt;ITEM&gt;\n</code></pre>"},{"location":"system-commands/notes/Week-6/#hdparm","title":"<code>hdparm</code>","text":"<ul> <li><code>hdparm</code> utility is used to check hard disk parameters.</li> <li>This command shows the speed of the disk.</li> </ul> <pre><code>hdparm -Tt /dev/sda\n</code></pre>"},{"location":"system-commands/notes/Week-6/#iostat","title":"<code>iostat</code>","text":"<ul> <li>Prints the information about input output speed.</li> <li>The output of this command can be used to compare speed at different times with speed at ideal timing.</li> </ul> <pre><code>iostat -dx /dev/sdb\n</code></pre>"},{"location":"system-commands/notes/Week-6/#ifconfig","title":"<code>ifconfig</code>","text":"<ul> <li>Prints the network configuration of the system like wi-fi, ethernet and loopback connection.</li> </ul> <pre><code>ifconfig\n</code></pre>"},{"location":"system-commands/notes/Week-6/#promp-strings","title":"Promp Strings","text":"<p>Fields and Customization</p>"},{"location":"system-commands/notes/Week-6/#context-of-prompt-string","title":"Context of Prompt String","text":"<ul> <li>Shells: bash, dash, zsh, ksh csh</li> <li>python: An elegant programming language</li> <li>octave: GNU octave language for numeric computations</li> <li>gnuplot: Command-line driven interactive plotting program.</li> <li>sage: Open source mathematical software</li> </ul>"},{"location":"system-commands/notes/Week-6/#bash-prompts","title":"Bash Prompts","text":"<ul> <li><code>PS1</code> : primary prompt string : <code>$</code></li> <li><code>PS2</code> : secondary prompt for multi-line input : <code>&gt;</code></li> <li><code>PS3</code> : prompt string in select loops : <code>#?</code></li> <li><code>PS4</code> : prompt string for execution trace : <code>+</code></li> </ul>"},{"location":"system-commands/notes/Week-6/#escape-sequences","title":"Escape Sequences","text":"escape Description <code>\\A</code> Current time in 24-hour as hh:mm <code>\\d</code> Date in weakday month day format <code>\\h</code> Hostname upto first period <code>\\H</code> Complete hostname <code>\\s</code> Name of the shell <code>\\t</code> Current time in 24-hour as hh:mm:ss <code>\\T</code> Current time in 12-hour as hh:mm:ss <code>\\u</code> Current user\u2019s username <code>\\w</code> Current directory <code>\\W</code> Basename of current directory <code>\\#</code> Current command number <code>\\$</code> If uid is 0, # else $ <code>\\@</code> Current time in 12-hour am/pm <code>\\\\</code> A literal \\ character <ul> <li>Default prompt</li> </ul> <pre><code>\\u@\\h:\\w\\$\n</code></pre> <ul> <li>username (<code>\\u</code>), @ literal, machine name (<code>\\h</code>), : literal, current directory (<code>\\w</code>) followed by $ literal if the user is not superuser. </li> </ul>"},{"location":"system-commands/notes/Week-6/#examples","title":"Examples","text":""},{"location":"system-commands/notes/Week-6/#ps1","title":"<code>PS1</code>","text":"<ul> <li>The default prompt without colors</li> </ul> <pre><code>~$ PS1=\"\\u@\\h:\\w\\$ \"\na@a:~$ \n</code></pre> <ul> <li> <p>Display time along with current directory</p> <ul> <li>A typical output is given below.</li> </ul> </li> </ul> <pre><code>a@a:~$ PS1=\"\\t:\\w\\$ \"\n21:47:07:~$ \n</code></pre> <ul> <li>Display date along with current directory</li> </ul> <pre><code>21:48:05:~$ PS1=\"\\d:\\w\\$ \"\nFri Feb 17:~$ \n</code></pre> <ul> <li>Date and time together with current directory</li> </ul> <pre><code>Fri Feb 17:~$ PS1=\"\\d \\t:\\w\\$ \"\nFri Feb 17 21:50:01:~$ \n</code></pre> <ul> <li>Number of the command.</li> </ul> <pre><code>Fri Feb 17 21:50:01:~$ PS1=\"\\#:\\$ \"\n45:$\n</code></pre> <ul> <li>Doesn\u2019t look good? Source the default prompt<ul> <li>bash prompt is defined in <code>~/.bashrc</code> filesystem. </li> </ul> </li> </ul> <pre><code>source .bashrc\n</code></pre>"},{"location":"system-commands/notes/Week-6/#ps2","title":"<code>PS2</code>","text":"<ul> <li>This prompt is made available when there are unmatching quotes or newline escapes.</li> <li>Change the <code>PS2</code> prompt to ~&gt;</li> </ul> <pre><code>PS2=\"~&gt;\"\n</code></pre>"},{"location":"system-commands/notes/Week-6/#ps3","title":"<code>PS3</code>","text":"<ul> <li> <p>This prompt can not be printed but can be seen within <code>[select]()</code> loop.</p> </li> <li> <p><code>select</code> gives a menu, and on choosing right menu option (choose a menu item number), it can perform operations which are specified within the loop.</p> </li> </ul> <pre><code>select x in alpha beta gamma; do echo $x; done\n</code></pre> <ul> <li> <p><code>#?</code> is the prompt you will see, when you execute above expression.</p> </li> <li> <p>Change the prompt to \u2018choose your option as above: \u2018</p> </li> </ul> <pre><code>PS3=\"choose your option as above: \"\n</code></pre> <ul> <li>Execute the <code>select</code> code above again to see the prompt change.</li> </ul>"},{"location":"system-commands/notes/Week-6/#ps4","title":"<code>PS4</code>","text":"<ul> <li>It is activated when <code>set -x</code>, used to debug, command is run.</li> <li>The typical output is shown below.</li> </ul> <pre><code>~$ set -x\n~$ pwd\n+ pwd\n/home/a\n</code></pre> <ul> <li>Change <code>PS4</code> to \u2018Now Running Command: \u2018</li> </ul> <pre><code>~$ PS4='Now Running Command: '\n+ PS4='Now Running Command: '\n~$ date\nNow Running Command: date\nFri Feb 17 05:52:23 PM +06 2023\n</code></pre>"},{"location":"system-commands/notes/Week-6/#python-command-line","title":"Python Command Line","text":"<ul> <li><code>ps1</code> and <code>ps2</code> are defined in the module <code>sys</code></li> <li>Change <code>sys.ps1</code> and <code>sys.ps2</code> is needed</li> <li>Override <code>__str__</code> method to have dynamic prompt.</li> <li>Default prompt:</li> </ul> <pre><code>&gt;&gt;&gt;\n</code></pre>"},{"location":"system-commands/notes/Week-6/#octave-prompt","title":"octave prompt","text":"<ul> <li>See prompt changing in octave, as we plot<ul> <li>x and y are array from 1 to 100, with hops of 10.</li> </ul> </li> </ul> <pre><code>~$ octave\noctave:1&gt; x=[1:10:100]\noctave:2&gt; y=[1:10:100]\noctave:3&gt; plot(x,y)\n</code></pre>"},{"location":"system-commands/notes/Week-6/#gnuplot-prompt","title":"gnuplot prompt","text":"<pre><code>~$ gnuplot\ngnuplot&gt; \n</code></pre>"},{"location":"system-commands/notes/Week-6/#sage-prompt","title":"sage prompt","text":"<pre><code>~$ sage\nsage: plot(sin(x),x,0,2*pi)\n</code></pre>"},{"location":"system-commands/notes/Week-6/#utilities-in-gnulinux","title":"Utilities in GNU/Linux","text":"<p>Tools to augment your productivity.</p>"},{"location":"system-commands/notes/Week-6/#find","title":"<code>find</code>","text":"<ul> <li>locating files and processing them</li> </ul> <pre><code>find [pathnames] [conditions]\n</code></pre> condition Description RrR -name ` pattern to match filenames <code>-type</code> File type code eg., <code>c</code> for character file, <code>d</code> for direcotry, <code>l</code> for symbolic link <code>-atime</code> File accessed <code>+n</code> (more than n), <code>-n</code> (less than n) days ago <code>-ctime</code> File changed <code>+n</code> (more than n), <code>-n</code> (less than n) days ago <code>-regex</code> Regular expression for pattern of filenames. Combine with -regextype posix-basic, posix-egrep etc. <code>-exec</code> Command to run using <code>{ }</code> as place holder for filename. <code>-print</code> Print the full path name of matching files <p>Examples</p> <ul> <li>Print all the file paths in home directory.</li> </ul> <pre><code>find $HOME -print \n</code></pre> <ul> <li>Count the number of files in home directory.</li> </ul> <pre><code>find $HOME -print | wc -l\n</code></pre> <ul> <li>List the file names in home directory that are modified in last two days.</li> </ul> <pre><code>find $HOME -mtime -2 -print\n</code></pre> <ul> <li>List the file names in home directory that are modified more than a month ago in home directory.</li> </ul> <pre><code>find $HOME -mtime +30 -print\n</code></pre> <ul> <li>List the man page direcotries in <code>/usr</code> directory.<ul> <li><code>?</code> matches one character after man</li> </ul> </li> </ul> <pre><code>find /usr -type d -name 'man?' -print\n</code></pre> <ul> <li>List the files which are more than 10 MB.</li> </ul> <pre><code>find . -size +10M -print\n</code></pre> <ul> <li>Using <code>-exec</code> long list with <code>-h</code> option the files which are more than 10 MB.<ul> <li><code>{}</code> is the placeholder for file names</li> </ul> </li> </ul> <pre><code>find . -size +10M -exec ls -lsh {} \\;\n</code></pre> <ul> <li>List all the jpeg files along with it\u2019s size in human readable form.</li> </ul> <pre><code>find . -name '*.jpg' -exec ls -sh {} \\;\n</code></pre>"},{"location":"system-commands/notes/Week-6/#file-packaging","title":"File Packaging","text":"<ul> <li>Deep file hierarchies</li> <li>Large number of tiny files</li> <li><code>tar</code> : collect a file hierarchy into a single file</li> <li><code>gzip</code> : compress a file</li> <li>Applications : backup, file sharing, reduce disc utilization</li> </ul>"},{"location":"system-commands/notes/Week-6/#possibilities","title":"Possibilities","text":"<ul> <li><code>tar</code>, <code>zip</code></li> <li><code>compress</code> (ncompress), <code>gzip</code> (ncompress), <code>bzip2</code> (bzip2), <code>xz</code>(xz-utils), <code>7z</code> (p7zip-full)</li> <li>Tarballs like bundle.tgz for package + compress</li> <li>Time and memory required to shrink / expand versus size ratio</li> <li>Portability</li> <li>Unique names using timestamp, process ID etc., for backup tarballs</li> </ul>"},{"location":"system-commands/notes/Week-6/#tar","title":"<code>tar</code>","text":"<ul> <li>packaging (archiving) collection of files.</li> </ul> <pre><code>tar -[cvx] [-f ARCHIVE] [files]\n</code></pre> <p>Examples</p> <ul> <li>Getting all log files in a directory <code>logfiles</code></li> </ul> <pre><code>cp -r /var/log logfiles\n</code></pre> <ul> <li>Storage space used by logfiles directory.</li> </ul> <pre><code>du -sh logfiles/\n</code></pre> <ul> <li>Creating a bundle of all log files in directory <code>logfiles</code>.</li> </ul> <pre><code>tar -cvf logfiles.tar logfiles/\n</code></pre> <ul> <li>Extracting files from tarball</li> </ul> <pre><code>tar -xvf logfiles.tar logfiles/\n</code></pre>"},{"location":"system-commands/notes/Week-6/#gzip","title":"<code>gzip</code>","text":"<ul> <li>Compress or expand files</li> <li>Extension: .gz.</li> </ul> <pre><code>gzip [OPTIONS] [file]\n</code></pre> <p>Examples</p> <ul> <li>Compressing <code>logfiles.tar</code></li> </ul> <pre><code>gzip logfiles.tar\n</code></pre> <ul> <li>Decompressing the <code>logfiles.tar.gz</code> file</li> </ul> <pre><code>gunzip logfiles.tar\n</code></pre>"},{"location":"system-commands/notes/Week-6/#bzip2","title":"<code>bzip2</code>","text":"<ul> <li>Compress or expand files</li> <li>More efficient than <code>gzip</code> in terms of compression ratio.</li> <li>Extension: .bz2.</li> </ul> <pre><code>bzip2 [OPTIONS] [file]\n</code></pre> <p>Examples</p> <ul> <li>Compressing <code>logfiles.tar</code></li> </ul> <pre><code>bzip2 logfiles.tar\n</code></pre> <ul> <li>Decompressing the <code>logfiles.tar.bz2</code> file</li> </ul> <pre><code>bzip2 -d logfiles.tar.bz2\n</code></pre>"},{"location":"system-commands/notes/Week-6/#compress","title":"<code>compress</code>","text":"<ul> <li>Compress or expand files</li> <li>Less efficient than both <code>gzip</code> and <code>gzip2</code> in terms of compression ratio.</li> <li>Extension: .Z.</li> </ul> <pre><code>compress [OPTIONS] [file]\n</code></pre> <p>Examples</p> <ul> <li>Compressing <code>logfiles.tar</code></li> </ul> <pre><code>compress logfiles.tar\n</code></pre> <ul> <li>Decompressing the <code>logfiles.tar.Z</code> file</li> </ul> <pre><code>uncompress logfiles.tar.Z\n</code></pre>"},{"location":"system-commands/notes/Week-6/#make","title":"<code>make</code>","text":"<p>Used to</p> <ul> <li>compile source code</li> <li>Conditional actions</li> <li>Conditional running of the scripts.</li> <li>Maintainance activity.</li> <li>Only performs action when the target files have changed.</li> </ul> <pre><code>make -f make.file # make.file is make script file.\n</code></pre> <ul> <li>See make.file</li> </ul> <p>Examples</p> <ul> <li>Running a section of the make file</li> <li>The command below runs the <code>backup</code> section from the file <code>make.file</code>.</li> </ul> <pre><code>make -f make.file backup \n</code></pre>"},{"location":"system-commands/notes/Week-6/#automating-scripts","title":"Automating Scripts","text":"<ul> <li>Scheduled, recurring, automatic execution of scripts.</li> </ul>"},{"location":"system-commands/notes/Week-6/#cron","title":"<code>cron</code>","text":"<ul> <li>Service called <code>cron.d</code> (a daemon) to run scripts automatically at scheduled times.</li> <li>Tools : <code>at</code>, <code>crontab</code>, <code>anacron</code> and <code>logrotate</code>.</li> <li>Script locations : </li> <li><code>/etc/crontab</code></li> <li><code>/etc/cron.d</code></li> <li><code>/etc/cron.hourly</code></li> <li><code>/etc/cron.daily</code></li> <li><code>/etc/cron.weekly</code></li> <li> <p><code>/etc/cron.monthly</code></p> </li> <li> <p><code>cron</code> feature can be used for</p> </li> <li>Rotating log </li> <li>Taking backup</li> <li>Cleaning up temporary files</li> <li>Getting alerts through email on system failures.</li> </ul>"},{"location":"system-commands/notes/Week-6/#job-definition","title":"Job Definition","text":"<ul> <li>Run a mkbackup.sh as root every working day at 02:05 AM.</li> </ul> <pre><code># ----------------------------- minute (0 - 59)\n# |  --------------------------- hour (0 - 23)\n# |  |  ------------------------- day of month (1 - 31)\n# |  |  |   -------------------- month (1 - 12) OR jan,feb,... \n# |  |  |   |   ------------- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,...\n# |  |  |   |   |   --------- user-name\n# |  |  |   |   |   |    ---- command to execute\n# |  |  |   |   |   |    |\n# m  h dom mon dow user cmd\n  5  2  *   *  1-5 root cd /home/a/scripts/backup &amp;&amp; ./mkbackup.sh \n</code></pre>"},{"location":"system-commands/notes/Week-6/#startup-scripts","title":"Startup Scripts","text":"<ul> <li>Some scripts are run every time you boot the machine.</li> <li>Startup scripts</li> <li><code>/etc/init/</code></li> <li> <p><code>/etc/init.d/</code></p> </li> <li> <p>Runlevel Scripts</p> </li> <li>Scripts run to perform certain actions and to run the machine in a specific mode.</li> </ul> 0 <code>/etc/rc0.d/</code> Shutdown and power off 1 <code>/etc/rc1.d/</code> Single user mode 2 <code>/etc/rc2.d/</code> Non GUI multi-user mode w/o networking 3 <code>/etc/rc3.d/</code> Non GUI multi-user mode with networking 4 <code>/etc/rc4.d/</code> Non GUI multi-user mode for special purposes 5 <code>/etc/rc5.d/</code> GUI multi-user mode with networking (default) 6 <code>/etc/rc6.d/</code> Shutdown and reboot"},{"location":"system-commands/notes/Week-6/#examples_1","title":"Examples","text":"<ul> <li> <p>See file mkbackup.sh</p> </li> <li> <p>Opening <code>crontab</code></p> </li> <li>After the command, select your favourite editor from options given.</li> </ul> <pre><code>crontab -e\n</code></pre> <ul> <li> <p>To run the <code>mkbackup.sh</code> script insert the line below in <code>crontab</code> file. (Pick time suitable to your needs)</p> </li> <li> <p><code>27 * * * * cd /home/a/scripts/backup &amp;&amp; ./mkbackup.sh</code></p> </li> <li>The script will run automatically at choosen time.</li> </ul>"},{"location":"system-commands/notes/Week-6/#sed","title":"<code>sed</code>","text":"<ul> <li>A language for processing text streams.</li> </ul>"},{"location":"system-commands/notes/Week-6/#introduction","title":"Introduction","text":"<ul> <li>It is a programming language</li> <li><code>sed</code> is an abbreviation for <code>s</code>tream <code>ed</code>itor</li> <li>It is a part of POSIX</li> <li>sed precedes awk</li> </ul>"},{"location":"system-commands/notes/Week-6/#execution-model","title":"Execution model","text":"<ul> <li>Input stream is a set of lines</li> <li>Each line is sequence of characters</li> <li>Two data buffers are maintained: active pattern space and auxiliary hold space</li> <li>Matched patterns are found in the hold space if parenthesis is used and the pattern space will contain the line that is read.</li> <li>For each line of input, an execution cycle is performed loading the line into pattern space</li> <li>During each cycle, all the statements in the script are executed in the sequence for matching address pattern for actions specified with the options provided</li> </ul>"},{"location":"system-commands/notes/Week-6/#usage","title":"Usage","text":"<ul> <li>Single line at the command line</li> </ul> <pre><code>sed -e 's/hello/world/g' input.txt \n</code></pre> <ul> <li>Script interpreted by <code>sed</code></li> </ul> <pre><code>sed -f ./myscript.sed input.txt \n</code></pre> <ul> <li>myscript.sed</li> </ul>"},{"location":"system-commands/notes/Week-6/#sed-statements","title":"sed statements","text":"<pre><code>:label address-pattern action options\n</code></pre> <ul> <li>Grouping commands</li> </ul> <pre><code>{ cmd ; cmd ; }\n</code></pre>"},{"location":"system-commands/notes/Week-6/#address","title":"address","text":"<ul> <li>Selecting by numbers : </li> <li><code>5</code> - 5th line</li> <li><code>$</code> - the last line </li> <li><code>%</code> - all the lines</li> <li> <p><code>1~3</code> - every 3rd line starting from 1st line</p> </li> <li> <p>Selection by text matching : </p> </li> <li> <p><code>/regexp/</code> - lines which match regexp</p> </li> <li> <p>range addresses : </p> </li> <li><code>/regexp1/,/regexp2/</code> - from first line which matches regexp1 till the line that matches regexp2</li> <li><code>/regexp/, +4</code> - 4 lines from first line which matches regexp</li> <li><code>/regexp/, ~2</code> - every second line from first line which matches regexp </li> <li><code>5,15</code> - from line 5 to 15</li> <li> <p><code>5,/regexp/</code> - from line 5 to line which first matches regexp </p> </li> <li> <p>In GNU extended version of <code>sed</code> the starting and ending part of the address both can be regexp.</p> </li> </ul> action description <code>p</code> Print the pattern space <code>d</code> Delete the pattern space <code>s</code> Substitute using regex match <code>[address]s/search/replace/[flags]</code> <code>=</code> Print current input line number, \\n <code>#</code> comment <code>i</code> Insert above the current line <code>a</code> Append below the current line <code>c</code> Change current line"},{"location":"system-commands/notes/Week-6/#programming","title":"programming","text":"syntax description <code>b label</code> Branch unconditionally to label <code>:label</code> Specify location of label for branch command <code>N</code> Add a new line to the pattern space and append line of input into it <code>q</code> Exit sed without processing further commands or input lines <code>t label</code> Branch to label only if there was a successful substitution was made <code>T label</code> Branch to label only if there was no successful substitution was made <code>w filename</code> Write pattern space to filename <code>x</code> Exchange the contents of hold and pattern spaces"},{"location":"system-commands/notes/Week-6/#bash-sed","title":"bash + sed","text":"<ul> <li>Including sed inside shell script</li> <li>heredoc feature</li> <li>Use with other shell scripts on command line using pipe</li> </ul> <p>sed is available everywhere !</p> <p>sed is a meant for text processing, fast in execution</p> <p>use sed to pre-process input for further processing</p>"},{"location":"system-commands/notes/Week-6/#demonstration","title":"Demonstration","text":"<ul> <li> <p>sample.txt</p> </li> <li> <p>The default action of the stream editor is to print the line that is sent to it.</p> </li> <li>output same as <code>cat sample.txt</code></li> </ul> <pre><code>sed -e \"\" sample.txt\n</code></pre> <ul> <li>Suppressing the default action of printing using <code>-n</code> option</li> </ul> <pre><code>sed -n -e \"\" sample.txt\n</code></pre> <ul> <li>Print the line number and <code>\\n</code> and then the line itself</li> </ul> <pre><code>sed -e \"=\" sample.txt\n</code></pre>"},{"location":"system-commands/notes/Week-6/#selection-by-numbers","title":"Selection by numbers","text":"<ul> <li>Print only a line specified by line number as address</li> <li>print 5th line</li> </ul> <pre><code>sed -n -e \"5p\" sample.txt \n</code></pre> <ul> <li> <p>if <code>-n</code> option is omitted it will print all lines with 5th line printed twice</p> </li> <li> <p>To print special characters as it is without any interpretation single quote are useful.</p> </li> <li> <p>To print all lines except a particular line (using !)</p> </li> <li>print all lines except 5th line</li> </ul> <pre><code>sed -e '5!p' sample.txt\n</code></pre> <ul> <li>Print the last line using <code>$</code></li> </ul> <pre><code>sed -n -e '$p' sample.txt\n</code></pre> <ul> <li>Replacing <code>'$p'</code> with <code>\"$p\"</code> will match the value in shell variable <code>p</code></li> <li> <p>Hence, <code>\"$VARNAME\"</code> can be used to match for a shell variable value.</p> </li> <li> <p>Print every 5th line starting from line 1</p> </li> </ul> <pre><code>sed -n -e '1~5p' sample.txt\n</code></pre> <ul> <li>A single line can be deleted using the line number.</li> <li>delete the 5th line</li> </ul> <pre><code>sed -e '5d' sample.txt\n</code></pre>"},{"location":"system-commands/notes/Week-6/#selection-by-address","title":"Selection by address","text":"<ul> <li>Print lines 5 to 8</li> </ul> <pre><code>sed -n -e '5,8p' sample.txt\n</code></pre> <ul> <li>Separating commands with <code>;</code></li> <li>Print all line numbers and contents of lines 5 to 8.</li> </ul> <pre><code>sed -n -e '=; 5,8p' sample.txt\n</code></pre> <ul> <li>Print line numbers and the content for only lines 5 to 8</li> </ul> <pre><code>sed -n -e '5,8{=;p}' sample.txt\n</code></pre> <ul> <li>Print lines where the address matches the word <code>microsoft</code> in regexp.</li> </ul> <pre><code>sed -n -e '/microsoft/p' sample.txt\n</code></pre> <ul> <li>Try for yourself:</li> <li>print the line which matches address <code>/in place of/</code>.</li> <li> <p>print lines which does not match the address <code>/text/</code></p> </li> <li> <p>Printing a specific number of lines after the address match.</p> </li> <li>print 2 lines after including the matching address.</li> </ul> <pre><code>sec -n -e '/adobe/,+2p' sample.txt\n</code></pre> <ul> <li>A range of lines can be deleted specified by address</li> <li>to delete lines 1 to 5</li> </ul> <pre><code>sed -e '1,5d' sample.txt\n</code></pre> <ul> <li>Try for yourself:</li> <li>delete all the lines.</li> <li>delete lines except lines 4 to 6</li> <li>delete every 2nd line after matching address <code>/microsoft/</code></li> </ul>"},{"location":"system-commands/notes/Week-6/#the-s-command","title":"The <code>s</code> command","text":"<ul> <li> <p>The most used command in <code>sed</code>.</p> </li> <li> <p>Search for the word <code>microsoft</code> and replace it with <code>MICROSOFT</code></p> </li> </ul> <pre><code>sed -e 's/microsoft/MICROSOFT/g' sample.txt\n</code></pre> <ul> <li>Before <code>s</code> comes the address space. Since it is not specified the command is applicable for all lines.</li> <li> <p><code>g</code> flag is used to match search regexp and replace all the occurrences of it with <code>replace</code> string on a line.</p> </li> <li> <p>On first line, replace the word <code>linux</code> with <code>LINUX</code></p> </li> </ul> <pre><code>sed -e '1s/linux/LINUX/g'\n</code></pre> <ul> <li>Try for yourself:</li> <li> <p>replace all occurrences of in place of with in lieu of</p> </li> <li> <p>By default sed uses BRE, with <code>-E</code> we can force to use ERE.</p> </li> <li> <p>Use ERE to search for <code>L</code> and one or more digits followed by space and replace it with empty string.</p> </li> <li> <p>for line 3 to 6</p> </li> </ul> <pre><code>sed -E -e '3,6s/^[[:digit:]]+ //g' sample.txt\n</code></pre> <ul> <li>from line 3 upto the occurrence of phrase symbolic.</li> </ul> <pre><code>sed -E -e '3,/symbolic/s/^[[:digit:]]+ //g' sample.txt\n</code></pre> <ul> <li>Try for yourself:</li> <li>do the same for all lines.</li> <li>do the same starting from line 1, every 3rd line.</li> <li>do the same for even numbered line (with and without using <code>!</code>).</li> <li>do the same for the address range <code>/text/,/video/</code></li> </ul>"},{"location":"system-commands/notes/Week-6/#adding-a-line-before-and-after-a-line","title":"Adding a line before and after a line.","text":"<ul> <li>The sed <code>i</code> (<code>i</code>nsert) command can be used to add a line before a line specified by address.</li> <li> <p>The sed <code>a</code> (<code>a</code>ppend) command can be used to add a line after a line specified by address.</p> </li> <li> <p>To insert a header line before the first line.</p> </li> </ul> <pre><code>sed -e '1i -----------header-----------' sample.txt\n</code></pre> <ul> <li>To append footer after the last line.</li> </ul> <pre><code>sed -e '$a -----------footer-----------' sample.txt\n</code></pre> <ul> <li>Both the operations can be performed with a single command with <code>-e</code> spanning the same command.</li> </ul> <pre><code>sed -e '1i -----------header-----------' -e '$a -----------footer-----------' sample.txt\n</code></pre> <ul> <li>Add a break after before every 5th line starting with line 1</li> </ul> <pre><code>sed -e '1~5i ------- break --------' sample.txt\n</code></pre> <ul> <li>The two operations can be combined together to perform meaningful insertion and append operations on different address ranges.</li> </ul>"},{"location":"system-commands/notes/Week-6/#replacing-or-changing-a-line-with-some-text","title":"Replacing or changing a line with some text","text":"<ul> <li> <p>The sed <code>c</code> (<code>c</code>hange line) command can be used to change che contents of a line with new content.</p> </li> <li> <p>To change the lines which match the address <code>/miscosoft/</code></p> </li> </ul> <pre><code>sed -e '/microsoft/c ------censored------' sample.txt\n</code></pre>"},{"location":"system-commands/notes/Week-6/#sed-scripts","title":"Sed Scripts","text":"<p>A sed script is a file which contains the sed commands (the part in quotes after <code>-e</code>). The commands given in the script are executed line by line on input file.</p> <p>A sample script file can be found as hf.sed.</p> <ul> <li>Executing the hf.sed on the file sample.txt</li> </ul> <pre><code>sed -f hf.sed sample.txt \n</code></pre> <ul> <li>We will now process the file block-ex-6.input with script clean.sed which produces only roll number and amount separated by space.</li> </ul> <pre><code>sed -E -f clean.sed block-ex-6.input\n</code></pre>"},{"location":"system-commands/notes/Week-6/#joining-lines-using","title":"Joining Lines using","text":"<ul> <li> <p>Joining lines requires sed to read one more line into the buffer.</p> </li> <li> <p>Consider file sample-split.txt. It has line breaks after <code>\\</code> on some lines. </p> </li> <li> <p>Join the lines which are ending with <code>\\</code> using the sed script join.sed.</p> </li> <li>The script will produce the similar result as in file sample.txt</li> </ul> <pre><code>sed -f join.sed sample-split.txt\n</code></pre>"},{"location":"system-commands/notes/Week-6/#sed-debugging","title":"Sed debugging","text":"<ul> <li>Option <code>--degug</code> to sed can be used to enable debugging.</li> <li>For every line that is being precessed, it prints the line which is read, pattern that matched and command that is executed.</li> </ul>"},{"location":"system-commands/notes/Week-7/","title":"AWK","text":"<p>AWK is a language for processing fields and records.</p>"},{"location":"system-commands/notes/Week-7/#introduction","title":"Introduction","text":"<ul> <li>It is a programming language</li> <li>AWK is abbreviation of the three people who developed it:</li> <li>Aho</li> <li>Weinberger</li> <li> <p>Kernighan</p> </li> <li> <p>It is a part of POSIX, IEEE 1003.1-2008</p> </li> <li>Variants : nawk, gawk, mawk \u2026</li> <li>gawk contains features that extend POSIX</li> </ul>"},{"location":"system-commands/notes/Week-7/#execution-model","title":"Execution Model","text":"<ul> <li>Input is a set of records</li> <li>Eg., using \u201c\\n\u201d as separator, lines are records</li> <li>Each record is a sequence of fields</li> <li>Eg. using \u201d \u201d as fields separator, words are fields</li> <li>Splitting of records to fields is done automatically</li> <li>Each code block executes on one record at a time, as matched by the pattern of the block</li> </ul>"},{"location":"system-commands/notes/Week-7/#usage","title":"Usage","text":"<ul> <li>Single line at the command line</li> </ul> <pre><code>~$ cat /etc/passwd | awk -F\":\" '{print $1}'\n</code></pre> <ul> <li>Script interpreted by awk</li> </ul> <pre><code>~$ ./myscript.awk input_file\n</code></pre> <ul> <li>Script reading from a file using <code>-f</code></li> </ul> <pre><code>~$ cat /etc/passwd | awk -f myscript.awk\n</code></pre>"},{"location":"system-commands/notes/Week-7/#built-in-variables","title":"Built-in Variables","text":"Variables Description <code>ARGC</code> Number of arguments supplied on the command line (except those that came with -f &amp; -v options) <code>ARGV</code> Array of command line arguments supplied; indexed from 0 to ARGC-1 <code>ENVIRON</code> Associative array of environment variables <code>FILENAME</code> Current filename being processed <code>FNR</code> Number of the current record, relative to the current file <code>FS</code> Field separator, can use regex <code>NF</code> Number of fields in the current record <code>NR</code> Number of the current record <code>OFMT</code> Output format for numbers <code>OFS</code> Output fields separator <code>ORS</code> Output record separator <code>RLENGTH</code> Record separator <code>RSTART</code> Length of string matched by match() function <code>SUBSEP</code> First position in the string matched by match() function <code>$0</code> Entire input record <code>$n</code> nth field in the current record"},{"location":"system-commands/notes/Week-7/#awk-scripts","title":"AWK scripts","text":"<pre><code>[block] { procedure }\n</code></pre> <p>An awk script has to follow the syntax as shown above.</p> <ul> <li>There three types of blocks in awk.</li> <li>BEGIN: <code>BEGIN {procedure }</code></li> <li>General : <code>[pattern] { procedure }</code><ul> <li>expression </li> <li>regex</li> <li>Relational expression</li> <li>Pattern-matching expression</li> </ul> </li> <li> <p>END: <code>END { procedure }</code></p> </li> <li> <p>A procedure is any of or all of the following:</p> </li> <li>Variable assignment</li> <li>Array assignment</li> <li>Input / Output commands</li> <li>Built-in functions</li> <li> <p>Control loops.</p> </li> <li> <p>User defined functions needs to be defined before any block starts.</p> </li> <li>Like python, one line comments in awk start with <code>#</code>.</li> </ul>"},{"location":"system-commands/notes/Week-7/#execution","title":"Execution","text":"<ul> <li><code>BEGIN { commands; }</code></li> <li>Executed once, before files are read</li> <li>Can appear anywhere in the script</li> <li>Can appear multiple times</li> <li> <p>Can contain program code</p> </li> <li> <p><code>END { commands }</code></p> </li> <li>Executed once, after files are read</li> <li>Can appear anywhere in the script </li> <li>Can appear multiple times</li> <li> <p>Can contain program code</p> </li> <li> <p><code>pattern { commands }</code></p> </li> <li>Patterns can be combined with <code>&amp;&amp;</code>, <code>||</code> and <code>!</code></li> <li>Range of records can be specified using comma</li> <li>Executed each record pattern evaluates to true</li> <li> <p>Script can have multiple blocks</p> </li> <li> <p><code>{ commands }</code></p> </li> <li>Executed for all records.</li> <li>Can have multiple such blocks</li> </ul>"},{"location":"system-commands/notes/Week-7/#operators","title":"Operators","text":"<ul> <li>Assignment</li> <li><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>^=</code> <code>**=</code></li> <li>Logical</li> <li><code>||</code> <code>&amp;&amp;</code> <code>!</code></li> <li>Algebraic</li> <li><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> <code>^</code> <code>**</code></li> <li>Relational</li> <li><code>&gt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code> <code>!=</code> <code>==</code></li> </ul> Operators Description <code>expr ? a : b</code> Conditional expression <code>i in array</code> Array index/key membership <code>a ~ /regex/</code> Regular expression match <code>a !~ /regex/</code> Negation of regular expression match <code>++</code> Increment, both prefix and postfix <code>--</code> Decrement, both prefix and postfix <code>$</code> Field reference <code></code> Blank is for concatenation"},{"location":"system-commands/notes/Week-7/#functions-and-commands","title":"Functions and commands","text":"Type functions/commands Arithmetic <code>atan2</code> <code>cos</code> <code>exp</code> <code>int</code> <code>log</code> <code>rand</code> <code>sin</code> <code>sqrt</code> <code>srand</code> String <code>asort</code> <code>asorti</code> <code>gsub</code> <code>index</code> <code>length</code> <code>match</code> <code>split</code> <code>sprintf</code> <code>strtonum</code> <code>sub</code> <code>substr</code> <code>tolower</code> <code>toupper</code> Control flow <code>break</code> <code>continue</code> <code>do</code> <code>while</code> <code>exit</code> <code>for</code> <code>if</code> <code>else</code> <code>return</code> Input/Output <code>close</code> <code>fflush</code> <code>getline</code> <code>next</code> <code>nextline</code> <code>print</code> <code>printf</code> Programming <code>extension</code> <code>delete</code> <code>function</code> <code>system</code> bit-wise <code>and</code> <code>compl</code> <code>lshift</code> <code>or</code> <code>rshift</code> <code>xor</code>"},{"location":"system-commands/notes/Week-7/#arrays","title":"Arrays","text":"<ul> <li>Associative arrays</li> <li>Sparse storage</li> <li>Index need not be integer</li> <li><code>arr[index]=value</code></li> <li><code>for (index in arr )</code></li> <li><code>delete arr[index]</code></li> </ul>"},{"location":"system-commands/notes/Week-7/#conditionals-and-loops","title":"Conditionals and Loops","text":"<p>if:</p> <pre><code>if (a &gt; b)\n{\n  print a\n}\n</code></pre> <p>for:</p> <pre><code>for (index in array)\n{\n  print array[index]\n}\n</code></pre> <pre><code>for (i=1;i&lt;n;i++)\n{\n  print i\n}\n</code></pre> <p>while:</p> <pre><code>while (a &lt; n)\n{\n  print a\n}\n</code></pre> <p>do \u2026 while:</p> <pre><code>do\n{\n  print a\n} while (a &lt; n)\n</code></pre>"},{"location":"system-commands/notes/Week-7/#functions","title":"Functions","text":"<ul> <li>Invocation:</li> </ul> <pre><code>~$ cat infile | awk -f mylib -f myscript.awk\n</code></pre> <p>Files : mylib myscript.awk</p>"},{"location":"system-commands/notes/Week-7/#pretty-printing","title":"Pretty printing","text":"<pre><code>printf \"format\", a, b, c \n</code></pre> <ul> <li><code>format</code> has the following format</li> <li> <p><code>%[modifier]control-letter</code></p> </li> <li> <p>Where <code>modifier</code> can be width, precision and -</p> </li> <li>control-letter</li> </ul> ctrl-letter description <code>c</code> ascii char <code>d</code> integer <code>i</code> integer <code>e</code> scientific notation <code>f</code> floating notation <code>g</code> shorter of scientific and float <code>o</code> octal value <code>s</code> string text <code>x</code> hexadecimal value <code>X</code> hexadecimal value in caps"},{"location":"system-commands/notes/Week-7/#bash-awk","title":"bash + awk","text":"<ul> <li>Including awk inside shell script</li> <li>heredoc feature</li> <li>Use with other shell scripts on command line using pipe</li> </ul> <p>awk is available everywhere !</p> <p>awk is a programming language, quick to code and fast in execution</p> <p>combine it on the command line with other scripts</p>"},{"location":"system-commands/notes/Week-7/#awk-demonstration","title":"AWK Demonstration","text":"<ul> <li><code>awk</code> points to <code>gawk</code></li> <li> <p><code>awk</code> -&gt; <code>/usr/bin/awk</code> -&gt; <code>/etc/alternatives/awk</code> -&gt; <code>/usr/bin/gawk</code></p> </li> <li> <p>The files used are there in folder awk-script-examples</p> </li> <li>All .awk files have the comments which can be used to understand the code in them.</li> </ul>"},{"location":"system-commands/notes/Week-7/#the-basic-block-structure","title":"The basic block structure","text":"<ul> <li>Files: </li> <li>script - block-ex-1.awk</li> <li>input - block-ex-1.input</li> <li>Run the script on input file and see the output.</li> </ul> <pre><code>~$ ./block-ex-1.awk block-ex-1.input\n</code></pre> <p>or </p> <pre><code>~$ awk -f block-ex-1.awk block-ex-1.input\n</code></pre> <p>or</p> <pre><code>~$ cat block-ex-1.input | awk -f block-ex-1.awk\n</code></pre>"},{"location":"system-commands/notes/Week-7/#uses-of-nf-fnr-and-0","title":"Uses of <code>NF</code> <code>FNR</code> and <code>$0</code>","text":"<ul> <li>Files: </li> <li>script - block-ex-2.awk</li> <li>input - block-ex-2.input</li> </ul>"},{"location":"system-commands/notes/Week-7/#filtering-using-regex-over-general-block","title":"Filtering using regex over general block","text":"<ul> <li>Use of <code>/regex/ { procedure }</code></li> <li>Files: </li> <li>script - block-ex-3.awk</li> <li>input - block-ex-3.input</li> </ul>"},{"location":"system-commands/notes/Week-7/#conditional-filtering-using-field-matching-regex-over-general-block","title":"Conditional filtering using field matching regex over general block","text":"<ul> <li>Use of <code>$n ~ /regex/ { procedure }</code> where <code>$n</code> is nth field</li> <li>Files: </li> <li>script - block-ex-4.awk</li> <li>input - block-ex-4.input</li> </ul>"},{"location":"system-commands/notes/Week-7/#conditional-filtering-using-nf-uses-of-fs","title":"Conditional filtering using <code>NF</code>, uses of <code>FS</code>","text":"<ul> <li>Use of <code>NF &lt; NUM { procedure }</code></li> <li>Use of <code>FS</code>, specifying multiple field separators</li> <li>Files:</li> <li>script - block-ex-5.awk</li> <li>input - block-ex-5.input</li> </ul>"},{"location":"system-commands/notes/Week-7/#array-if-conditional-filtering-and-using-for-loop-for-aggregation","title":"array, <code>if</code> Conditional filtering and using <code>for</code> loop for aggregation","text":"<ul> <li>Aggregation if any is done in <code>END</code> block</li> <li>Getting Report</li> <li>Files: </li> <li>script - block-ex-6.awk</li> <li>input - block-ex-6.input</li> </ul>"},{"location":"system-commands/notes/Week-7/#functions_1","title":"Functions","text":"<ul> <li>Definition of mathematical and user-defined functions, function call, pretty printing</li> <li>Files: </li> <li>library - func-lib.awk</li> <li>script - func-example.awk</li> </ul> <pre><code>~$ echo \"12.5\" | awk -f func-lib.awk -f func-example.awk\n</code></pre> <ul> <li>Replace 12.5 with \u201c\u201d</li> <li>Replace echo \u201c12.5\u201d with <code>cat xaa</code>, where xaa is empty file</li> <li>Notice the difference in output</li> <li>What do you observe?</li> </ul>"},{"location":"system-commands/notes/Week-7/#the-power-of-awk-in-terms-of-speed","title":"The power of awk in terms of speed","text":"<ul> <li>Files: </li> <li>script-1 - rsheet-create.awk</li> <li> <p>script-2 - rsheet-process.awk</p> </li> <li> <p>The script-1 creates random data sheet.</p> </li> <li>Can be invoked by passing empty string as input. (use <code>time</code> command to time the script)</li> <li>Store the output in file rsheet-data.txt</li> <li>Run the script-2 on rsheet-data.txt, note the time.</li> </ul> <pre><code>~$ time ./rsheet-process.awk rsheet-data.txt &gt; rsheet-pdata.txt\n</code></pre> <ul> <li>You can see that awk processes data very quickly. Try to load the data in LibreOffice and see the result.</li> </ul>"},{"location":"system-commands/notes/Week-7/#processing-log","title":"Processing log","text":"<ul> <li>File:</li> <li>script-1 - apache-log-example-1.awk</li> <li>script-1a - apache-log-example-1a.awk</li> <li>script-2 - apache-log-example-2.awk</li> <li>script-3 - apache-log-example-3.awk</li> <li>input - access-full.log contains log from web server, the requests.</li> <li> <p>Create files access-head.log and access-tail.log using <code>head</code> and <code>tail</code> commands respectively. </p> </li> <li> <p>awk on command line</p> </li> </ul> <pre><code>~$ awk 'BEGIN {FS=\" \"} {print $1}' access-head.log # prints the ip address\n</code></pre> <pre><code>~$ awk 'BEGIN {FS=\" \"} {d=substr($4,2,11); print d}' access-head.log #print date field which is 4th field\n</code></pre> <pre><code>~$ awk 'BEGIN {FS=\" \"} {d=substr($4,2,11); print d, $1}' access-head.log #print date and ip address\n</code></pre> <ul> <li>Run the same commands on access-tail.log and see the output</li> <li> <p>Run the same commands on input file and see the time.</p> </li> <li> <p>See date command to follow further</p> </li> <li> <p>Using <code>getline</code>, <code>sprintf</code> and getting log summary for 5 days</p> </li> <li>We will use script-1 which has code written to get the date and ip address along with the log summary ip and it\u2019s count.</li> <li>Run the script on input file and see the time</li> <li>To only get only the ip stats run the script-1a on input file</li> <li> <p>The sorted output can be obtained using <code>sort -n</code> on output of previous action.</p> </li> <li> <p>Using <code>dig</code> to find the DNS of the ip address along with the count stats</p> </li> <li> <p>Time run script-2 on input file.</p> </li> <li>See the output. </li> </ul>"},{"location":"system-commands/notes/Week-7/#date","title":"<code>date</code>","text":"<ul> <li>Getting date of 5 days ago from today.</li> </ul> <pre><code>~$ date --date=\"5 days ago\" +%d/%m/%Y\n</code></pre>"},{"location":"system-commands/notes/Week-8/","title":"Managing Storage","text":""},{"location":"system-commands/notes/Week-8/#lvm","title":"LVM","text":"<ul> <li>Logical Volume Management</li> <li>Pooling multiple storage devices as a single logical volume.</li> <li>lvm2 tools : create and manage virtual block devices from physical devices.</li> </ul>"},{"location":"system-commands/notes/Week-8/#raid","title":"RAID","text":"<ul> <li>Redundant Array of Independent (or Inexpensive) Disks</li> <li>Distributing data over multiple disks for redundancy / speed / increased capacity</li> <li>Raid Controller : software or hardware</li> </ul>"},{"location":"system-commands/notes/Week-8/#raid-modes","title":"RAID modes","text":"<p>usable capacity &lt; actual capacity (when not striping)</p> RAID Mode Min Drives Description Comments RAID 0 1 Striping Speed up RAID 1 2 Mirroring Read is n times faster, n-1 drive failures tolerated RAID 5 3 Block-level striping with distributed parity 1 drive failure tolerated, Read is n times faster, write is n-1 times faster RAID 6 4 Block-level striping with dual distributed parity 2 drive failures t lerated, read is n times faster, write is n-2 times faster <p>RAID 0</p> <p></p> <p>RAID 1</p> <p></p> <p>RAID 5</p> <p></p> <p>RAID 6</p> <p></p> <ul> <li>Imgage source : Wikipedia</li> </ul>"},{"location":"system-commands/notes/Week-8/#networking-commands-and-ssh","title":"Networking Commands and SSH","text":"<p>Accessing remote machines on command line</p>"},{"location":"system-commands/notes/Week-8/#ways-to-gain-remote-access","title":"Ways to gain remote access","text":"<ul> <li>VPN access</li> <li>ssh tunneling</li> <li>Remote desktop : x2go, rdp, pcoip,</li> <li>Desktop over browser: Apache Guacomole</li> <li>Commercial, over internet : Teamviewer, AnyDesk, Zoho assist, \u2026</li> </ul>"},{"location":"system-commands/notes/Week-8/#some-important-ports","title":"Some important ports","text":"port service description 21 ftp File transfer 22 ssh Secure Shell 25 smtp Simple Mail Transfer Protocol 80 http Hypertext Tranfer Protocol 443 https Secure Hypertext Tranfer Protocol 631 cups Common Unix Printing System 3306 mysql MySQL database"},{"location":"system-commands/notes/Week-8/#firewall","title":"Firewall","text":"<ul> <li>[<code>ufw</code>]</li> <li>Ports open on my machine</li> <li>Ports needed to be accessed on remote machine</li> <li>Network routing over the port</li> <li>Firewall controls at each hop</li> </ul>"},{"location":"system-commands/notes/Week-8/#protecting-a-server","title":"Protecting a server","text":"<p>A server with a public service is protected from anonymous user using using Web Application Filter and Network Firewall.</p>"},{"location":"system-commands/notes/Week-8/#selinux","title":"SElinux","text":"<ul> <li>Security Enhanced Linux mode available on Ubuntu too, apart from server grade flavors like CentOS, Fedora, RHEL, SuSE Linux etc.,</li> <li>Additional layer of access control on files to services</li> <li>Role Based Access Control</li> <li>Process sandboxing, least privilege access for subjects</li> <li>Check using <code>ls -lZ</code> and <code>ps -eZ</code></li> <li>RBAC items: user (unconfined_u), role (object_r), type (user_home_t), level (s0)</li> <li>Modes: disabled, enforcing, permissive</li> <li>Tools: <code>semanage</code>, <code>restorecon</code></li> </ul> <p>SELinux is recommended for all publicly visible servers</p>"},{"location":"system-commands/notes/Week-8/#network-tools","title":"Network tools","text":"tool Description <code>ping</code> To see if the remote machine is up <code>traceroute</code> Diagnostics the hop timings to the remote machine <code>nslookup</code> Ask for conversion of IP address to name <code>dig</code> DNS lookup utility <code>netstat</code> Print network connections mxtoolbox.com For help with accessibility from public network whois lookup Who owns which domain name <code>nmap</code> (careful !) Network port scanner <code>wireshark</code> (careful !) Network protocol analyzer"},{"location":"system-commands/notes/Week-8/#high-performance-computing","title":"High Performance Computing","text":"<ul> <li>Look at www.top500.org for statistics</li> <li>Accessing a remote HPC machine is usually over SSH</li> <li>Long duration jobs are submitted to a job scheduler for execution</li> <li>Raw data if large needs to be processed remotely before being transferred to your machine (network charges? bandwidth?)</li> <li>Comfort with command line is a must</li> </ul>"},{"location":"system-commands/notes/Week-8/#ifconfig","title":"<code>ifconfig</code>","text":""},{"location":"system-commands/notes/Week-8/#nslookup","title":"<code>nslookup</code>","text":"<ul> <li>Convert names to IP addresses.</li> </ul> <p>Syntax:</p> <pre><code>nslookup &lt;domain-name&gt;\n</code></pre> <p>Example:</p> <pre><code>nslookup www.iitm.ac.in\n</code></pre> <ul> <li>Try for www.mit.edu &amp; aqua.iitm.ac.in</li> </ul> <p>The same information can be obtained from https://mxtoolbox.com/.</p>"},{"location":"system-commands/notes/Week-8/#dig","title":"<code>dig</code>","text":"<ul> <li><code>dig</code> is a DNS lookup utility.</li> <li>It can show the IP address of a domain name or can reverse lookup the domain name of the IP address.</li> </ul> <p>Syntax:</p> <ol> <li>dig for the IP address using domain name</li> </ol> <pre><code>dig &lt;domain-name&gt;\n</code></pre> <ol> <li>dig for the domain name using IP address.</li> </ol> <pre><code>dig -x &lt;IP-address&gt;\n</code></pre> <p>Example:</p> <pre><code>dig www.google.com # 1\n</code></pre> <pre><code>dig -x 54.209.123.136 # 2\n</code></pre> <ul> <li>Getting only the DNS of the IP address by suppressing all other output</li> </ul> <pre><code>~$ dig +noall +answer -x 34.234.167.93\n</code></pre>"},{"location":"system-commands/notes/Week-8/#w","title":"<code>w</code>","text":"<ul> <li>See the people who are currently logged into the system</li> </ul>"},{"location":"system-commands/notes/Week-8/#qstat","title":"<code>qstat</code>","text":"<ul> <li>Job scheduler especially used in High Performance Computing.</li> <li>Lists job id, job name, user, time, Q( in queue) / R (running), type of Q  (CPU, GPU)</li> </ul> <pre><code>qstat\n</code></pre>"},{"location":"system-commands/notes/Week-8/#ping","title":"<code>ping</code>","text":"<ul> <li>It is used to check if a particular host or IP address is reachable.</li> </ul> <pre><code>ping &lt;host or IP address&gt;\n</code></pre> <p>Example:</p> <pre><code>ping 170.187.251.202 # VM used for se2001 \n</code></pre>"},{"location":"system-commands/notes/Week-8/#netstat","title":"<code>netstat</code>","text":"<ul> <li>It is a command used to show network statistics and lists the active Internet Connections and Active UNIX domain sockets.</li> </ul> <pre><code>netstat\n</code></pre>"},{"location":"system-commands/notes/Week-8/#git","title":"Git","text":"<p>Git is a version control system.</p> <p>The git enabled directories are called repositories.</p>"},{"location":"system-commands/notes/Week-8/#installing-git","title":"Installing Git","text":"<pre><code>~$ sudo apt-get install git\n</code></pre>"},{"location":"system-commands/notes/Week-8/#configuring-git","title":"Configuring Git","text":"<p>Git global configuration is applicable for all directories.</p> <p>To see the global configuration use the command below,</p> <pre><code>git config --global --list\n</code></pre> <p>To see the local configuration remove the <code>--global</code> from the command above.</p> <p>Now we will set up the global configuration.</p> <p>To set the username use the command below.</p> <pre><code>git config --global user.name &lt;your-name&gt;\n</code></pre> <p>To set the user email use the command below.</p> <pre><code>git config --global user.email &lt;your-email&gt; \n</code></pre> <p>To set the email and name only for a particular repository remove <code>--global</code> option from the commands above and run them.</p> <p>Here, you are almost done with the configuration. We will look it later if some more configurations needed.</p>"},{"location":"system-commands/notes/Week-8/#creating-a-git-repository","title":"Creating a git repository","text":"<p>You can create (initiate) a repository by being in an already available directory or create a new one giving option to <code>git init</code>.</p> <p>We will go by the first way.</p> <pre><code>~$ mkdir myrepo\n~$ cd myrepo\n~$ git init  \n</code></pre> <p>This will initialize an empty repository.</p> <p>You can create a file within ~/myrepo. Write Hello World! program in any language of your choice with name <code>hello.&lt;ext&gt;</code></p> <p>I will use python.  It\u2019s great that I have it already.</p> <pre><code>~/myrepo$ cat hello.py\nprint(\"Hello World!\")\n</code></pre>"},{"location":"system-commands/notes/Week-8/#status-of-a-repository","title":"Status of a repository","text":"<p>You have created a file. Now you can check status of the repository. </p> <p>It shows the created, modified or deleted files.</p> <p>Git is so friendly that it also shows you what to do.</p> <p>Run the command below</p> <pre><code>~/myrepo$ git status\n</code></pre> <p>Observe, what you see?</p> <pre><code>No commits\nUntracked files ...\n</code></pre> <p>You have created a file but it is untracked and now note that any newly created file needs to be tracked before commit.</p> <p>What is commit?</p> <p>It is an action which takes account of the changes and adds them to the git storage.</p>"},{"location":"system-commands/notes/Week-8/#tracking-a-newly-created-file","title":"Tracking a newly created file","text":"<p><code>git add</code> is used to track newly created files.</p> <p>Let\u2019s track the file we have created.</p> <pre><code>~/myrepo$ git add hello.py\n</code></pre> <p>Now what you observe when you check status?</p> <pre><code>Changes need to be committed:\n...\n</code></pre> <p>So now we will see how to commit changes.</p>"},{"location":"system-commands/notes/Week-8/#committing-the-changes","title":"Committing the changes","text":"<p>We use syntax below to commit any changes which are recently tracked or staged(?) using add.</p> <p>Let\u2019s commit the changes on <code>hello.py</code>, and later diagnose what it means.</p> <pre><code>~/myrepo$ git commit -m \"hello world program created\"\n</code></pre> <p>Here you see, we are using <code>git commit</code> with option <code>-m</code> which stands for message that should (not always) contain how you want to remember the commit.</p> <p>Each commit gets a unique commit id so that the changes at that particular instant of commit are remembered.</p> <p>Now check the status once again.</p> <p>Observe the output.</p> <p>You are doing well. Now we will modify the <code>hello.py</code> file.</p> <pre><code>~/myrepo$ cat hello.py\nprint(\"Hello World!\")\nprint(\"Welcome!!!\")\n</code></pre> <p>Check the status. What you see?</p> <p>You have modified the file, and your changes needs to be staged before commit. As a suggestion, you can see the commands you have to use for staging or discarding the changes.</p> <p>Use the first suggested command, and we will use it as below.</p> <pre><code>~/myrepo$ git add hello.py\n</code></pre> <p>Now check the status and commit the changes with message file modified.</p> <p>You can add all files and commit using one line command</p>"},{"location":"system-commands/notes/Week-8/#adding-and-committing-simultaneously","title":"Adding and committing simultaneously","text":"<pre><code>~/myrepo$ git commit -a -m \"files created and modified\"\n</code></pre> <p>To undo changes if any you can use the command below,</p>"},{"location":"system-commands/notes/Week-8/#restoring-changes-made-in-a-file","title":"Restoring changes made in a file","text":"<ul> <li>Restoring a modified file before adding to the staging area</li> </ul> <pre><code>git restore &lt;file&gt;\n</code></pre> <p>Note: All changes made after the recent commit will be lost.</p> <ul> <li>Restoring a modified file after adding to the staging area</li> </ul> <pre><code>git restore --staged &lt;file&gt;\n</code></pre> <p>All along we are following blindly and we don\u2019t know where we are!</p>"},{"location":"system-commands/notes/Week-8/#checking-where-we-are","title":"Checking where we are?","text":"<p>Git uses concept of branching to keep track of the location.</p> <p>Multiple branches can be created and the files in those branches are modified without affecting other branches.</p> <p>This is the branch structure that git tree follows to survive over the ages!</p> <p>All along you are seeing something as the first line,</p> <pre><code>On branch master\n...\n</code></pre> <p>Yes, git on it\u2019s own creates a branch called master by default. This name can be modified.</p> <p>Using git status you can see on which branch you are.</p> <p>There is other elegant way to figure this out,</p>"},{"location":"system-commands/notes/Week-8/#branching-in-git","title":"Branching in git","text":"<p>To know what all branches are there and on which branch you are use the command below</p> <pre><code>~/myrepo$ git branch\n</code></pre> <p>Currently, we have only one branch, i.e. master and the * in front of it indicates we are on this branch.</p> <p>Can we create a branch? Of course, git is not restricting us from anything.</p> <p>Let\u2019s do it!</p>"},{"location":"system-commands/notes/Week-8/#creating-a-branch","title":"Creating a branch","text":"<p>We use the same command we used to see the branches, but with an argument which is a new branch name of your choice. My choice is main.</p> <pre><code>~/myrepo$ git branch main # main is the name of the branch that will be created\n</code></pre> <p>You nailed it, now see what all branches are there.</p> <p>You can notice that two branches are listed in the output in alphabetical order.</p> <p>But, you are still on the branch master.</p> <p>How to jump to new branch main?</p>"},{"location":"system-commands/notes/Week-8/#checkout-to-a-branch","title":"Checkout to a branch","text":"<p>There are two options to git that you can use to jump to a branch, <code>checkout</code> and <code>switch</code>.</p> <pre><code>~/myrepo$ git checkout main\n</code></pre> <p>Check the status to see where you are. Of course you will be on branch main.</p> <p>Since, you landed on main from master, you will see all the files from master into main. </p> <p>But, if you create files in main the same will not happen once you jump to master.</p> <p>In branch main you can create files and use the git commands you have learned to save the changes.</p> <p>I suppose that you might have created some fancy program, let\u2019s say add.py to perform addition of two numbers.</p> <p>Now go to master branch and run <code>ls</code>. You see that only one file is there which is hello.py</p> <p>Now how will you merge whatever you have done on main branch into master branch?</p>"},{"location":"system-commands/notes/Week-8/#merging-branches-in-git","title":"Merging branches in git","text":"<p>Git is not limited to just separation of concerns but also helps putting it together when it is resolved.</p> <pre><code>~/myrepo$ git merge main\n</code></pre> <p>Now you will see the files on main merged to master.</p> <p>What\u2019s next?</p> <p>We may want to see what all commits we have done.</p> <p>Thanks to git. It\u2019s logging feature comes to our rescue.</p> <p>Let\u2019s explore it!</p>"},{"location":"system-commands/notes/Week-8/#logging-in-git","title":"Logging in git","text":"<p>To see full log in git run the command below</p> <pre><code>~/myrepo$ git log\n</code></pre> <p>What do you see?</p> <p>Line 1 : Commit id (also knows as commit SHA or commit hash) and the branch name.</p> <p>Line 2 : Author name and email id of the author of the commit.</p> <p>Line 3 : Timestamp on which the commit took place.</p> <p>Line 4- : The commit message. It may span multiple lines.</p> <p>And the above 4 lines repeated.</p> <p>The most recent commit you see on the top. And then commit before it, and so on\u2026</p> <p>Here, you see only two commits which may not be the case when you are working with large project.</p> <p>Is there any way to make the log line short?</p> <p>Yes. To see commits on single line just add <code>--oneline</code> to <code>git log</code></p> <pre><code>~/myrepo$ git log --oneline \n</code></pre> <p>Now you can see oneline log.</p> <p>Why this is helpful?</p> <p>It is helpful when you want to checkout to your previous commits or see the changes you have made using diff.</p>"},{"location":"system-commands/notes/Week-8/#checkout-to-a-commit-hash","title":"Checkout to a commit HASH","text":"<p>I assume that you have played around with git by adding many more files and committing those so and your log is now grown.</p> <p>To check out to a commit hash <code>206a535</code></p> <pre><code>~/myrepo$ git checkout 206a535\n</code></pre> <p>Checkout to your master branch</p> <p>Now we will move on to see how to perform diff using git.</p>"},{"location":"system-commands/notes/Week-8/#git-diff-to-know-the-changes","title":"Git diff to know the changes","text":"<pre><code>~/myrepo$ git diff main \n</code></pre> <p>This command prints the diff between master and main.</p> <p>Take the help of internet to know how to interpret the output.</p> <p>Now we are done with most of the important commands (there are more, but we will not discuss that here, please explore in the resources given below.</p> <p>We will now discuss how to work with remote repositories.</p>"},{"location":"system-commands/notes/Week-8/#working-with-remote-repositories","title":"Working with remote repositories","text":""},{"location":"system-commands/notes/Week-8/#git-repository-hosting-services","title":"Git repository hosting services","text":"<ul> <li>GitHub</li> <li>GitLab</li> <li>BitBucket</li> <li>CloudForge</li> </ul> <p>The repository hosting services provide centralized location to host your repository.</p> <p>We will go with Github as it is most popular website for housing Open Source Software.</p> <p>Before we proceed create an account on Github.</p> <p>Follow the steps given in below</p>"},{"location":"system-commands/notes/Week-8/#create-an-account","title":"Create an account","text":"<ol> <li>Go to www.github.com</li> <li>On top right corner you will see Sign up and Sign in option.</li> <li>If you already have an account proceed with Sign in.</li> <li>If you don\u2019t have an account click on Sign up. </li> <li>Follow the steps suggested on the Sign up page.</li> <li>After you verify your email you will be redirected to your dashboard on github.</li> <li>On top-right corner on dashboard click on Avatar and got to settings.</li> <li>Go to section SSH and GPG Keys</li> <li>Click the button New SSH key</li> </ol>"},{"location":"system-commands/notes/Week-8/#generate-ssh-key","title":"Generate SSH key","text":"<ol> <li>Now open terminal on your machine.</li> <li>Type command <code>ssh-keygen</code> and follow the prompts. Write no if the keys are already available.</li> <li>Now you have successfully created the SSH keys.</li> </ol>"},{"location":"system-commands/notes/Week-8/#add-ssh-key-to-github","title":"Add SSH key to GitHub","text":"<ol> <li>Now copy the contents of the file <code>~/.ssh/id_rsa.pub</code> and paste it in the key text area on page that you opened in step 9.</li> <li>Give it a name in Title input field.</li> <li>Keep default Key Type then click on Add SSH key.</li> </ol>"},{"location":"system-commands/notes/Week-8/#create-a-repository-in-github","title":"Create a repository in GitHub","text":"<ol> <li>Go to dashboard and click on Repositories section. Then click on New</li> <li>Select owner from dropdown and give repository name.</li> <li>For now keep all other options default and checkboxes unchecked, click on Create repository, you will be redirected to a new page.</li> <li>Click on SSH and copy a link similar to <code>git@github.com:prassr/myrepo.git</code>.</li> <li>Open terminal and go to <code>~/myrepo/</code>, which is a git repository you are working on.</li> </ol>"},{"location":"system-commands/notes/Week-8/#adding-a-remote-repository-to-an-existing-repository","title":"Adding a remote repository to an existing repository","text":"<p>We are going to use the same commands listed on page in step 18.</p> <ol> <li>Run command below to add remote repository to existing repository</li> </ol> <pre><code>git remote add origin git@github.com:prassr/myrepo.git # origin is alias to your remote repository on your machine\n</code></pre> <p>Since, git by default creates branch with name master and GitHub with name main. </p> <p>You may want to change the name of your master branch to main and main to master. This you will find as easy as variable value swapping!</p> <p>Or push the main branch by switching to it.</p> <p>To change the name of a branch add <code>-m</code> option to <code>git branch &lt;new-name&gt;</code></p> <p>I have already done the changes, so once you are done follow next step.</p> <ol> <li>Run the command below to push changes to remote repository.</li> </ol> <pre><code>git push --set-upstream origin main # push main to origin\n# git push  ## use for later pushes\n</code></pre> <p><code>--set-upstream</code> is required only during first push of a branch to remote repository.</p> <p>Hurrah!!! Here you have learned how to add remote repository to local repository and push the changes from local repository to remote repository.</p> <p>Now we will see how to clone a repository.</p>"},{"location":"system-commands/notes/Week-8/#cloning-a-repository","title":"Cloning a repository","text":"<p>Follow steps 15 to 17 to create a remote repository from section above. This time check the Add README checkbox.</p> <p>On similar lines of step 18 copy the SSH link by clicking on Code button.</p> <ol> <li>Open terminal and run the command below.</li> </ol> <pre><code>git clone git@github.com:prassr/myproject.git # local repository name will be myproject\n</code></pre> <p>You have successfully cloned a remote repository.</p> <p>You can modify the README.md and push it to remote repository by following the step 21 in above section.</p> <p>Now go to GitHub and make changes to README.md file and commit it there itself.</p> <p>You may now want to pull the remote changes to your local repository.</p>"},{"location":"system-commands/notes/Week-8/#pulling-changes-from-remote-repository","title":"Pulling changes from remote repository","text":"<p>You can pull the changes from remote repository using the command below,</p> <pre><code>git pull\n</code></pre> <p>That\u2019s all! Now you can see the changes to README.md file locally.</p> <p>Still want to explore more?</p> <p>Here are the</p>"},{"location":"system-commands/notes/Week-8/#resources","title":"Resources","text":"<ul> <li>Pro Git</li> </ul>"},{"location":"system-commands/opeq/","title":"Common Instructions for questions 1 to 3","text":"<p>Consider shopping bill dataset stored in directory <code>shopping-bills</code>.</p> <pre><code>~$ pwd\n/home/a/shopping-bills\n</code></pre> <p>Click here to access the files.</p> <p>It contains text files which has data about a customer who has made purchase at a particular shop (inspect a file yourself to find more information). There are 30 files in the directory.</p> <p>As an example one of the text files name is <code>shopping_bill_1.txt</code>.</p>"},{"location":"system-commands/opeq/#q1","title":"Q1","text":"<p>Write an <code>awk</code> script which accepts an integer variable <code>i</code> and processes a file with name <code>shopping_bill_i.txt</code>.  And prints</p> <pre><code>CUSTOMER NAME : customer-name\nSHOP NAME : shop-name\nNUMBER OF ITEMS PURCHASED : number\nTOTAL BILL : number\n</code></pre> <p>If file containing <code>i</code> does not exist the output should be</p> <pre><code>FILE NOT FOUND \n</code></pre>"},{"location":"system-commands/opeq/#q2","title":"Q2","text":"<p>Write an <code>awk</code> script which reads a variable <code>customer_name</code> and prints</p> <pre><code>CUSTOMER NAME : customer_name\nNUMBER OF UNIQUE SHOPS VISITED : number\nAVERAGE NUMBER OF PURCHASES PER SHOP : number\nAVERAGE SPENDING PER SHOP : number\n</code></pre>"},{"location":"system-commands/opeq/#q3","title":"Q3","text":"<p>Write an <code>awk</code> script which reads a variable <code>shop-name</code> and prints</p> <pre><code>NAME OF THE SHOP : shop-name\nNUMBER OF UNIQUE CUSTOMERS : number\nMOST PURCHASED ITEM : item-name\nMOST PURCHASED ITEM CATEGORY : category\nMOST PURCHASED ITEM PRICE : number\n</code></pre>"},{"location":"system-commands/opeq/#common-instructions-for-questions-4-to-9","title":"Common Instructions for Questions 4 to 9","text":"<p>Consider a directory named <code>employee-data</code>.</p> <pre><code>~$ pwd\n/home/a/employee-data\n</code></pre> <p>There are regular files in this data set with name employee id. A file name as an example is <code>1999A005</code>.</p> <p>Click here to get the zip file which contains the data.</p>"},{"location":"system-commands/opeq/#q4","title":"Q4","text":"<p>In an employee data file the JOINING DATE is of the form <code>YYYY/MM/DD</code> format.</p> <p>Write a <code>sed</code> (use BRE and then ERE) command when run on a file converts the JOINING DATE format to <code>DD-MM-YYYY</code> in place.</p>"},{"location":"system-commands/opeq/#q5","title":"Q5","text":"<p>Use the above solution to write a <code>bash</code> script which changes the JOINING DATE of all the employees in the <code>pwd</code>. Suppress all errors.</p>"},{"location":"system-commands/opeq/#q6","title":"Q6","text":"<p>Write a <code>bash</code> script which prints <code>min</code> CTC, <code>max</code> CTC and <code>avg</code> CTC of the employees which are there in file named <code>appraisal_list</code>.</p>"},{"location":"system-commands/opeq/#q7","title":"Q7","text":"<p>Write a <code>bash</code> script which gives salary hike of 1.25 to the employees found in file <code>appraisal_list</code>. This should change the files in place. You can create temporary files if you think is needed.</p>"},{"location":"system-commands/opeq/#q8","title":"Q8","text":"<p>Write an <code>awk</code> script to read a character <code>C</code> (one of A, E, M, S) as a department and prints</p> <pre><code>DEPARTMENT : C\nNUMBER OF EMPLOYEES : number\nNUMBER OF EMPLOYEES WHO GOT SALARY HIKE : number\nMIN SALARY : number\nMAX SALARY : number\nAVERAGE SALARY : number.\n</code></pre>"},{"location":"system-commands/opeq/#q9","title":"Q9","text":"<p>Write an <code>awk</code> script to read a character <code>C</code> (one of A, E, M, S) as a department and prints information below about the longest serving employee.</p> <pre><code>DEPARTMENT : C\nEMPLOYEE NAME : name\nIS APPRAISED : boolean\nCTC : number\n</code></pre>"},{"location":"system-commands/problems/","title":"Problems for System Commands","text":""},{"location":"system-commands/problems/#week-1","title":"Week 1","text":""},{"location":"system-commands/problems/#week-2","title":"Week 2","text":""},{"location":"system-commands/problems/#week-3","title":"Week 3","text":""},{"location":"system-commands/problems/#week-4","title":"Week 4","text":""},{"location":"system-commands/problems/#week-5","title":"Week 5","text":""},{"location":"system-commands/problems/#week-6","title":"Week 6","text":""},{"location":"system-commands/problems/#week-7","title":"Week 7","text":""},{"location":"system-commands/problems/#week-8","title":"Week 8","text":""},{"location":"system-commands/videos/","title":"Videos","text":""},{"location":"system-commands/videos/#here-are-some-videos-that-you-may-find-interesting","title":"Here are some videos that you may find interesting","text":""},{"location":"template_for_a_course/about/","title":"Why Learn Programming?","text":"<p>Learning this will be helpful.</p>"},{"location":"template_for_a_course/videos/","title":"Index","text":""},{"location":"template_for_a_course/videos/#here-are-some-videos-that-you-may-find-interesting","title":"Here are some videos that you may find interesting","text":""},{"location":"blog/archive/2023/","title":"September 2023","text":""},{"location":"blog/category/features/","title":"Features","text":""}]}